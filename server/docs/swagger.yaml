definitions:
  schemas.AP:
    properties:
      activeWacId:
        type: string
      coordinate:
        $ref: '#/definitions/schemas.ApCoordinate'
      createdAt:
        type: string
      deviceRole:
        type: string
      deviceType:
        type: string
      floor:
        type: string
      groupName:
        type: string
      healthStatus:
        type: string
      id:
        type: string
      macAddress:
        type: string
      managementIp:
        type: string
      manufacturer:
        type: string
      name:
        type: string
      operStatus:
        type: string
      osVersion:
        type: string
      serialNumber:
        type: string
      siteId:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.ApCoordinate:
    properties:
      x:
        type: number
      "y":
        type: number
      z:
        type: number
    type: object
  schemas.AuthConfig:
    properties:
      clientId:
        type: string
      clientSecret:
        type: string
    type: object
  schemas.Circuit:
    properties:
      cid:
        type: string
      circuitType:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      ipv4Address:
        type: string
      ipv6Address:
        type: string
      monitorId:
        type: string
      name:
        type: string
      provider:
        type: string
      rxBandWidth:
        type: integer
      status:
        type: string
      txBandWidth:
        type: integer
      updatedAt:
        type: string
    type: object
  schemas.CircuitCreate:
    properties:
      cid:
        type: string
      circuitType:
        type: string
      description:
        type: string
      interfaceId:
        type: string
      ipv4Address:
        type: string
      ipv6Address:
        type: string
      name:
        type: string
      provider:
        type: string
      rxBandWidth:
        type: integer
      status:
        type: string
      txBandWidth:
        type: integer
    required:
    - cid
    - circuitType
    - interfaceId
    - name
    - provider
    - rxBandWidth
    - status
    - txBandWidth
    type: object
  schemas.CircuitShort:
    properties:
      RxBandWidth:
        type: integer
      TxBandWidth:
        type: integer
      id:
        type: string
      name:
        type: string
      provider:
        type: string
    type: object
  schemas.CircuitUpdate:
    properties:
      cid:
        type: string
      circuitType:
        type: string
      description:
        type: string
      interfaceId:
        type: string
      ipv4Address:
        type: string
      ipv6Address:
        type: string
      name:
        type: string
      provider:
        type: string
      rxBandWidth:
        type: integer
      status:
        type: string
      txBandWidth:
        type: integer
    type: object
  schemas.CliCredential:
    properties:
      inheritFromOrg:
        type: boolean
      password:
        type: string
      port:
        type: integer
      username:
        type: string
    type: object
  schemas.CliCredentialCreate:
    properties:
      password:
        type: string
      port:
        description: default is 22
        maximum: 65535
        minimum: 1
        type: integer
      username:
        type: string
    required:
    - password
    - username
    type: object
  schemas.CliCredentialUpdate:
    properties:
      password:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      username:
        type: string
    type: object
  schemas.Device:
    properties:
      createdAt:
        type: string
      description:
        type: string
      deviceModel:
        type: string
      deviceRole:
        type: string
      healthStatus:
        type: string
      id:
        type: string
      isRegistered:
        type: boolean
      location:
        type: string
      managementIp:
        type: string
      manufacturer:
        type: string
      monitorId:
        type: string
      name:
        type: string
      operStatus:
        type: string
      osPatch:
        type: string
      osVersion:
        type: string
      platform:
        type: string
      rackId:
        type: string
      rackPosition:
        items:
          type: integer
        type: array
      serialNumber:
        type: string
      siteId:
        type: string
      status:
        type: string
      templateId:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.DeviceCreate:
    properties:
      description:
        type: string
      deviceModel:
        type: string
      deviceRole:
        type: string
      location:
        type: string
      managementIp:
        type: string
      manufacturer:
        type: string
      name:
        type: string
      osVersion:
        type: string
      rackId:
        type: string
      rackPosition:
        items:
          type: integer
        type: array
      serialNumber:
        type: string
      siteId:
        type: string
      status:
        enum:
        - Active
        - Inactive
        type: string
    required:
    - deviceRole
    - managementIp
    - name
    - siteId
    - status
    type: object
  schemas.DeviceInterface:
    properties:
      createdAt:
        type: string
      id:
        type: string
      ifAdminStatus:
        type: string
      ifDescr:
        type: string
      ifHighSpeed:
        type: integer
      ifIndex:
        type: integer
      ifIpAddress:
        type: string
      ifLastChange:
        type: integer
      ifMtu:
        type: integer
      ifName:
        type: string
      ifOperStatus:
        type: string
      ifPhysAddr:
        type: string
      ifSpeed:
        type: integer
      ifType:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.DeviceRole:
    properties:
      abbreviation:
        type: string
      description:
        $ref: '#/definitions/schemas.I18n'
      deviceRole:
        type: string
      productFamily:
        type: string
      weight:
        type: integer
    type: object
  schemas.DeviceUpdate:
    properties:
      description:
        type: string
      deviceModel:
        type: string
      deviceRole:
        type: string
      location:
        type: string
      managementIp:
        type: string
      manufacturer:
        type: string
      name:
        type: string
      osVersion:
        type: string
      rackId:
        type: string
      rackPosition:
        items:
          type: integer
        type: array
      serialNumber:
        type: string
      status:
        enum:
        - Active
        - Inactive
        type: string
    type: object
  schemas.I18n:
    properties:
      en:
        type: string
      zh:
        type: string
    type: object
  schemas.IdResponse:
    properties:
      id:
        type: string
    type: object
  schemas.IpAddress:
    properties:
      address:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      macAddress:
        type: string
      range:
        type: string
      siteId:
        type: string
      status:
        description: Active, Reserved, Deprecated
        type: string
      type:
        description: Dynamic, Static, Gateway, Broadcast, NetworkId
        type: string
      updatedAt:
        type: string
      vlan:
        type: integer
    type: object
  schemas.IpAddressCreate:
    properties:
      address:
        type: string
      description:
        type: string
      macAddress:
        type: string
      range:
        type: string
      siteId:
        type: string
      status:
        enum:
        - Active
        - Reserved
        - Deprecated
        type: string
      type:
        enum:
        - Dynamic
        - Static
        - Gateway
        - Broadcast
        - NetworkId
        type: string
      vlan:
        type: integer
    required:
    - address
    - siteId
    - status
    - type
    type: object
  schemas.IpAddressUpdate:
    properties:
      address:
        type: string
      description:
        type: string
      macAddress:
        type: string
      range:
        type: string
      siteId:
        type: string
      status:
        enum:
        - Active
        - Reserved
        - Deprecated
        type: string
      type:
        enum:
        - Dynamic
        - Static
        - Gateway
        - Broadcast
        - NetworkId
        type: string
      vlan:
        type: integer
    type: object
  schemas.ListResponse:
    properties:
      results: {}
      total:
        type: integer
    type: object
  schemas.Menu:
    properties:
      children:
        items:
          $ref: '#/definitions/schemas.Menu'
        type: array
      createdAt:
        type: string
      id:
        type: string
      meta:
        $ref: '#/definitions/schemas.Meta'
      name:
        type: string
      parentId:
        type: string
      path:
        type: string
      redirect:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.Meta:
    properties:
      activePath:
        type: string
      auths:
        items:
          type: string
        type: array
      dynamicLevel:
        type: integer
      extraIcon:
        type: string
      frameLoading:
        type: boolean
      frameSrc:
        type: string
      hiddenTag:
        type: boolean
      icon:
        type: string
      keepAlive:
        type: boolean
      rank:
        type: integer
      roles:
        items:
          type: string
        type: array
      showLink:
        type: boolean
      showParent:
        type: boolean
      title:
        type: string
      transition:
        $ref: '#/definitions/schemas.Transition'
    type: object
  schemas.Oauth2PasswordRequest:
    properties:
      domainName:
        type: string
      enterpriseCode:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  schemas.Organization:
    properties:
      active:
        type: boolean
      authConfig:
        $ref: '#/definitions/schemas.AuthConfig'
      authType:
        description: '0: local 1: slack 2: google 3: teams 4: github'
        maximum: 4
        minimum: 0
        type: integer
      createdAt:
        type: string
      domainName:
        type: string
      enterpriseCode:
        type: string
      id:
        type: string
      licenseCount:
        maximum: 10000
        minimum: 0
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - active
    - authType
    - domainName
    - enterpriseCode
    - id
    - licenseCount
    - name
    type: object
  schemas.Prefix:
    properties:
      createdAt:
        type: string
      id:
        type: string
      range:
        type: string
      siteId:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      utilization:
        type: number
      version:
        type: string
      vlanId:
        type: integer
      vlanName:
        type: string
    type: object
  schemas.PrefixCreate:
    properties:
      range:
        type: string
      siteId:
        type: string
      type:
        enum:
        - Dynamic
        - Static
        type: string
      vlanId:
        description: not support VxLAN now
        maximum: 4094
        type: integer
      vlanName:
        type: string
    required:
    - range
    - siteId
    - type
    type: object
  schemas.PrefixUpdate:
    properties:
      range:
        type: string
      siteId:
        type: string
      type:
        enum:
        - Dynamic
        - Static
        type: string
      vlanId:
        maximum: 4094
        type: integer
      vlanName:
        type: string
    type: object
  schemas.Rack:
    properties:
      id:
        type: string
      name:
        type: string
      serialNumber:
        type: string
      siteId:
        type: string
      uHeight:
        type: integer
    type: object
  schemas.RackCreate:
    properties:
      name:
        type: string
      serialNumber:
        type: string
      siteId:
        type: string
      uHeight:
        description: default 42
        maximum: 50
        type: integer
    required:
    - name
    type: object
  schemas.RackUpdate:
    properties:
      name:
        type: string
      serialNumber:
        type: string
      uHeight:
        maximum: 50
        type: integer
    type: object
  schemas.RestconfCredential:
    properties:
      inheritFromOrg:
        type: boolean
      password:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  schemas.RestconfCredentialCreate:
    properties:
      password:
        type: string
      url:
        type: string
      username:
        type: string
    required:
    - password
    - url
    - username
    type: object
  schemas.RestconfCredentialUpdate:
    properties:
      password:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  schemas.Role:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.RoleCreate:
    properties:
      description:
        type: string
      menus:
        items:
          type: string
        type: array
      name:
        type: string
    required:
    - menus
    - name
    type: object
  schemas.RoleDetail:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      menus:
        items:
          $ref: '#/definitions/schemas.Menu'
        type: array
      name:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.RoleShort:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  schemas.RoleUpdate:
    properties:
      description:
        type: string
      menus:
        items:
          type: string
        type: array
      name:
        type: string
    type: object
  schemas.Site:
    properties:
      address:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      region:
        type: string
      siteCode:
        type: string
      status:
        type: string
      timeZone:
        type: string
      updatedAt:
        type: string
    type: object
  schemas.SiteCreate:
    properties:
      address:
        type: string
      description:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      region:
        type: string
      siteCode:
        type: string
      status:
        enum:
        - Active
        - Inactive
        type: string
      timeZone:
        type: string
    required:
    - address
    - latitude
    - longitude
    - name
    - region
    - siteCode
    - status
    - timeZone
    type: object
  schemas.SiteDetail:
    properties:
      address:
        type: string
      apCount:
        type: integer
      circuit:
        items:
          $ref: '#/definitions/schemas.CircuitShort'
        type: array
      circuitCount:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      gatewayCount:
        type: integer
      id:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      rackCount:
        type: integer
      region:
        type: string
      siteCode:
        type: string
      status:
        type: string
      switchCount:
        type: integer
      timeZone:
        type: string
      updatedAt:
        type: string
      vlanCount:
        type: integer
    type: object
  schemas.SiteUpdate:
    properties:
      address:
        type: string
      description:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      region:
        type: string
      siteCode:
        type: string
      status:
        enum:
        - Active
        - Inactive
        type: string
      timeZone:
        type: string
    type: object
  schemas.SnmpV2Credential:
    properties:
      community:
        type: string
      inheritFromOrg:
        type: boolean
      maxRepetitions:
        type: integer
      port:
        type: integer
      timeout:
        type: integer
    type: object
  schemas.SnmpV2CredentialCreate:
    properties:
      community:
        type: string
      maxRepetitions:
        description: default is 50
        maximum: 200
        type: integer
      port:
        description: default is 161
        maximum: 65535
        minimum: 1
        type: integer
      timeout:
        description: default is 5
        maximum: 30
        minimum: 1
        type: integer
    required:
    - community
    type: object
  schemas.SnmpV2CredentialUpdate:
    properties:
      community:
        type: string
      maxRepetitions:
        maximum: 200
        type: integer
      port:
        maximum: 65535
        minimum: 1
        type: integer
      timeout:
        maximum: 30
        minimum: 1
        type: integer
    type: object
  schemas.Transition:
    properties:
      enterTransition:
        type: string
      leaveTransition:
        type: string
      name:
        type: string
    type: object
  schemas.User:
    properties:
      authType:
        type: integer
      avatar:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/schemas.RoleShort'
      status:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  schemas.UserCreate:
    properties:
      authType:
        maximum: 4
        minimum: 0
        type: integer
      avatar:
        type: string
      email:
        type: string
      password:
        type: string
      roleId:
        type: string
      status:
        enum:
        - Active
        - Inactive
        type: string
      username:
        type: string
    required:
    - authType
    - roleId
    - status
    - username
    type: object
  schemas.UserUpdate:
    properties:
      avatar:
        type: string
      email:
        type: string
      password:
        type: string
      roleId:
        type: string
      status:
        enum:
        - Active
        - Inactive
        type: string
      username:
        type: string
    type: object
  security.AccessToken:
    properties:
      access_token:
        type: string
      expires_at:
        type: integer
      issued_at:
        type: integer
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: integer
      refresh_token_issued_at:
        type: integer
      token_type:
        type: string
    type: object
info:
  contact:
    name: Jeffry
  description: Narvis OpenAPI for developers.
  termsOfService: http://swagger.io/terms/
  title: Narvis API
  version: "1.0"
paths:
  /admin/roles:
    get:
      consumes:
      - application/json
      description: list roles
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: id
        type: array
      - in: query
        name: keyword
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: name
        type: array
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/schemas.Role'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: create role
      parameters:
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/schemas.RoleCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Role'
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - Admin
  /admin/roles/{id}:
    delete:
      consumes:
      - application/json
      description: delete role
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Role'
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: get role
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.RoleDetail'
      security:
      - BearerAuth: []
      summary: Get role
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: update role
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/schemas.RoleUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Role'
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      parameters:
      - in: query
        maximum: 4
        minimum: 0
        name: authType
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: email
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: id
        type: array
      - in: query
        name: keyword
        type: string
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: roleId
        type: array
      - enum:
        - Active
        - Inactive
        in: query
        name: status
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: username
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/schemas.User'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create new user
      tags:
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Admin
    get:
      consumes:
      - application/json
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.User'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - Admin
    put:
      consumes:
      - application/json
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Admin
  /infra/aps:
    get:
      consumes:
      - application/json
      description: List aps
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: deviceType
        type: array
      - in: query
        name: keyword
        type: string
      - in: query
        name: location
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: managementIp
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: manufacturer
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: name
        type: array
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - in: query
        name: serialNumber
        type: string
      - in: query
        name: siteId
        type: string
      - enum:
        - Active
        - Inactive
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/schemas.ListResponse'
              - properties:
                  results:
                    items:
                      $ref: '#/definitions/schemas.AP'
                    type: array
                type: object
            type: array
      security:
      - BearerAuth: []
      summary: List aps
      tags:
      - Infra
  /infra/aps/{id}:
    get:
      consumes:
      - application/json
      description: get ap
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AP'
      security:
      - BearerAuth: []
      summary: Get ap
      tags:
      - Infra
  /infra/circuit:
    post:
      consumes:
      - application/json
      description: Create new circuit
      parameters:
      - description: Circuit
        in: body
        name: circuit
        required: true
        schema:
          $ref: '#/definitions/schemas.CircuitCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create new circuit
      tags:
      - Infra
  /infra/circuit/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: circuitId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: Get circuit
      parameters:
      - description: circuitId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Circuit'
      security:
      - BearerAuth: []
      summary: Get circuit
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update circuit
      parameters:
      - description: circuitId
        in: path
        name: id
        required: true
        type: string
      - description: Circuit
        in: body
        name: circuit
        required: true
        schema:
          $ref: '#/definitions/schemas.CircuitUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update circuit
      tags:
      - Infra
  /infra/circuits:
    get:
      description: List circuits
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: cid
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: circuitType
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: deviceId
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: interfaceId
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: ipv4Address
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: ipv6Address
        type: array
      - in: query
        name: keyword
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: monitorId
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: name
        type: array
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: provider
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: siteId
        type: array
      - in: query
        name: status
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schemas.Circuit'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: List circuits
      tags:
      - Infra
  /infra/devices:
    get:
      consumes:
      - application/json
      description: List devices
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: deviceModel
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: deviceRole
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: id
        type: array
      - in: query
        name: keyword
        type: string
      - in: query
        name: location
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: managementIp
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: manufacturer
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: name
        type: array
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - in: query
        name: rackId
        type: string
      - in: query
        name: serialNumber
        type: string
      - in: query
        name: siteId
        type: string
      - enum:
        - Active
        - Inactive
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schemas.Device'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: List devices
      tags:
      - Infra
    post:
      consumes:
      - application/json
      description: Create device
      parameters:
      - description: device
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/schemas.DeviceCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create device
      tags:
      - Infra
  /infra/devices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete device
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete device
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: get device
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Device'
      security:
      - BearerAuth: []
      summary: Get device
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update device
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: device
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/schemas.DeviceUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update device
      tags:
      - Infra
  /infra/devices/{id}/cli:
    delete:
      consumes:
      - application/json
      description: Delete device cli credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete device cli credential
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: Get device cli credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CliCredential'
      security:
      - BearerAuth: []
      summary: Get device cli credential
      tags:
      - Infra
    post:
      consumes:
      - application/json
      description: Create device new cli credential
      parameters:
      - description: DeviceId
        in: path
        name: id
        required: true
        type: integer
      - description: Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/schemas.CliCredentialCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create device new cli credential
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update device cli credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      - description: Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/schemas.CliCredentialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update device cli credential
      tags:
      - Infra
  /infra/devices/{id}/interfaces:
    get:
      consumes:
      - application/json
      description: Get device interfaces
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.DeviceInterface'
            type: array
      security:
      - BearerAuth: []
      summary: Get device interfaces
      tags:
      - Infra
  /infra/devices/{id}/restconf:
    delete:
      consumes:
      - application/json
      description: Delete device restconf credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete device restconf credential
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: Get device restconf credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.RestconfCredential'
      security:
      - BearerAuth: []
      summary: Get device restconf credential
      tags:
      - Infra
    post:
      consumes:
      - application/json
      description: Create new device restconf credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: integer
      - description: Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/schemas.RestconfCredentialCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create new device restconf credential
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update device restconf credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      - description: Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/schemas.RestconfCredentialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update device restconf credential
      tags:
      - Infra
  /infra/devices/{id}/snmpv2:
    delete:
      consumes:
      - application/json
      description: Delete device snmpV2 credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete device snmpV2 credential
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: Get device snmpV2 credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SnmpV2Credential'
      security:
      - BearerAuth: []
      summary: Get device snmpV2 credential
      tags:
      - Infra
    post:
      consumes:
      - application/json
      description: Create device new snmpV2 credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: integer
      - description: Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/schemas.SnmpV2CredentialCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create new device snmpV2 credential
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update device snmpV2 credential
      parameters:
      - description: deviceId
        in: path
        name: id
        required: true
        type: string
      - description: Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/schemas.SnmpV2CredentialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update device snmpV2 credential
      tags:
      - Infra
  /infra/racks:
    get:
      consumes:
      - application/json
      description: List racks
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: id
        type: array
      - in: query
        name: keyword
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: name
        type: array
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: serialNumber
        type: array
      - in: query
        name: siteId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/schemas.Rack'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: List racks
      tags:
      - Infra
    post:
      consumes:
      - application/json
      description: Create new rack
      parameters:
      - description: rack
        in: body
        name: rack
        required: true
        schema:
          $ref: '#/definitions/schemas.RackCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create new rack
      tags:
      - Infra
  /infra/racks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete rack
      parameters:
      - description: rackId
        in: path
        name: rackId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete rack
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: Get rack
      parameters:
      - description: rackId
        in: path
        name: rackId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Rack'
      security:
      - BearerAuth: []
      summary: Get rack
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update rack
      parameters:
      - description: rackId
        in: path
        name: rackId
        required: true
        type: string
      - description: rack
        in: body
        name: rack
        required: true
        schema:
          $ref: '#/definitions/schemas.RackUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update rack
      tags:
      - Infra
  /infra/sites:
    get:
      consumes:
      - application/json
      description: List sites
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: id
        type: array
      - in: query
        name: keyword
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: name
        type: array
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: region
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: siteCode
        type: array
      - enum:
        - Active
        - Inactive
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/schemas.Site'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: List sites
      tags:
      - Infra
    post:
      consumes:
      - application/json
      description: Create new site
      parameters:
      - description: site
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/schemas.SiteCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create new site
      tags:
      - Infra
  /infra/sites/{id}:
    delete:
      consumes:
      - application/json
      description: Delete site
      parameters:
      - description: site id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete site
      tags:
      - Infra
    get:
      consumes:
      - application/json
      description: Get site
      parameters:
      - description: site id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SiteDetail'
      security:
      - BearerAuth: []
      summary: Get site
      tags:
      - Infra
    put:
      consumes:
      - application/json
      description: Update site
      parameters:
      - description: site id
        in: path
        name: id
        required: true
        type: string
      - description: site
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/schemas.SiteUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update site
      tags:
      - Infra
  /intend/device-roles:
    get:
      parameters:
      - in: query
        name: abbreviation
        type: string
      - in: query
        name: keyword
        type: string
      - in: query
        name: name
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/schemas.DeviceRole'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Get list of device roles
      tags:
      - Intend
  /intend/manufacturers:
    get:
      parameters:
      - in: query
        name: keyword
        type: string
      - in: query
        name: name
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    type: string
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Get list of Manufacturers
      tags:
      - Intend
  /intend/platforms:
    get:
      parameters:
      - in: query
        name: keyword
        type: string
      - in: query
        name: platform
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                results:
                  items:
                    type: string
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Get list of Platforms
      tags:
      - Intend
  /ipam/ip-addresses:
    get:
      consumes:
      - application/json
      description: Get ip address list
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: address
        type: array
      - in: query
        name: keyword
        type: string
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - in: query
        name: range
        type: string
      - in: query
        name: siteId
        type: string
      - collectionFormat: csv
        description: Active, Reserved, Deprecated
        in: query
        items:
          type: string
        name: status
        type: array
      - collectionFormat: csv
        description: Dynamic, Static, Gateway, Broadcast, NetworkId
        in: query
        items:
          type: string
        name: type
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: integer
        name: vlan
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schemas.IpAddress'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Get ip address list
      tags:
      - IPAM
    post:
      consumes:
      - application/json
      description: Create ip address
      parameters:
      - description: ip
        in: body
        name: ip
        required: true
        schema:
          $ref: '#/definitions/schemas.IpAddressCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create ip address
      tags:
      - IPAM
  /ipam/ip-addresses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete ip address
      parameters:
      - description: ipId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete ip address
      tags:
      - IPAM
    get:
      consumes:
      - application/json
      description: Get ip address
      parameters:
      - description: ipId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IpAddress'
      security:
      - BearerAuth: []
      summary: Get ip address
      tags:
      - IPAM
    put:
      consumes:
      - application/json
      description: Update ip address
      parameters:
      - description: ipId
        in: path
        name: id
        required: true
        type: string
      - description: ip
        in: body
        name: ip
        required: true
        schema:
          $ref: '#/definitions/schemas.IpAddressUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IpAddress'
      security:
      - BearerAuth: []
      summary: Update ip address
      tags:
      - IPAM
  /ipam/prefixes:
    get:
      consumes:
      - application/json
      description: Get prefix list
      parameters:
      - in: query
        name: keyword
        type: string
      - enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - in: query
        name: orderBy
        type: string
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        maximum: 1000
        minimum: 1
        name: pageSize
        type: integer
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: range
        type: array
      - in: query
        name: siteId
        type: string
      - enum:
        - Dynamic
        - Static
        in: query
        name: type
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: integer
        maxItems: 4094
        name: vlanId
        type: array
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: vlanName
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schemas.ListResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schemas.Prefix'
                  type: array
              type: object
      security:
      - BearerAuth: []
      summary: Get prefix list
      tags:
      - IPAM
    post:
      consumes:
      - application/json
      description: Create prefix
      parameters:
      - description: Prefix
        in: body
        name: prefix
        required: true
        schema:
          $ref: '#/definitions/schemas.PrefixCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Create prefix
      tags:
      - IPAM
  /ipam/prefixes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete prefix
      parameters:
      - description: prefixId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Delete prefix
      tags:
      - IPAM
    get:
      consumes:
      - application/json
      description: Get prefix
      parameters:
      - description: prefixId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Prefix'
      security:
      - BearerAuth: []
      summary: Get prefix
      tags:
      - IPAM
    put:
      consumes:
      - application/json
      description: Update prefix
      parameters:
      - description: prefixId
        in: path
        name: id
        required: true
        type: string
      - description: Prefix
        in: body
        name: prefix
        required: true
        schema:
          $ref: '#/definitions/schemas.PrefixUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.IdResponse'
      security:
      - BearerAuth: []
      summary: Update prefix
      tags:
      - IPAM
  /login/password:
    post:
      parameters:
      - description: Username Password Login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.Oauth2PasswordRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/security.AccessToken'
      summary: Username Password Login
      tags:
      - Auth
  /org/organizations:
    post:
      parameters:
      - description: Create organization
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schemas.Organization'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Organization'
      security:
      - BearerAuth: []
      summary: Create organization
      tags:
      - Organization
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newScanDevice(db *gorm.DB, opts ...gen.DOOption) scanDevice {
	_scanDevice := scanDevice{}

	_scanDevice.scanDeviceDo.UseDB(db, opts...)
	_scanDevice.scanDeviceDo.UseModel(&models.ScanDevice{})

	tableName := _scanDevice.scanDeviceDo.TableName()
	_scanDevice.ALL = field.NewAsterisk(tableName)
	_scanDevice.Id = field.NewString(tableName, "id")
	_scanDevice.CreatedAt = field.NewTime(tableName, "createdAt")
	_scanDevice.Name = field.NewString(tableName, "name")
	_scanDevice.ManagementIp = field.NewString(tableName, "managementIp")
	_scanDevice.Platform = field.NewString(tableName, "platform")
	_scanDevice.DeviceModel = field.NewString(tableName, "deviceModel")
	_scanDevice.Manufacturer = field.NewString(tableName, "manufacturer")
	_scanDevice.ChassisId = field.NewString(tableName, "chassisId")
	_scanDevice.Description = field.NewString(tableName, "description")
	_scanDevice.OrganizationId = field.NewString(tableName, "organizationId")
	_scanDevice.Organization = scanDeviceBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_scanDevice.fillFieldMap()

	return _scanDevice
}

type scanDevice struct {
	scanDeviceDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	Name           field.String
	ManagementIp   field.String
	Platform       field.String
	DeviceModel    field.String
	Manufacturer   field.String
	ChassisId      field.String
	Description    field.String
	OrganizationId field.String
	Organization   scanDeviceBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (s scanDevice) Table(newTableName string) *scanDevice {
	s.scanDeviceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scanDevice) As(alias string) *scanDevice {
	s.scanDeviceDo.DO = *(s.scanDeviceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scanDevice) updateTableName(table string) *scanDevice {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "createdAt")
	s.Name = field.NewString(table, "name")
	s.ManagementIp = field.NewString(table, "managementIp")
	s.Platform = field.NewString(table, "platform")
	s.DeviceModel = field.NewString(table, "deviceModel")
	s.Manufacturer = field.NewString(table, "manufacturer")
	s.ChassisId = field.NewString(table, "chassisId")
	s.Description = field.NewString(table, "description")
	s.OrganizationId = field.NewString(table, "organizationId")

	s.fillFieldMap()

	return s
}

func (s *scanDevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scanDevice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.Id
	s.fieldMap["createdAt"] = s.CreatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["managementIp"] = s.ManagementIp
	s.fieldMap["platform"] = s.Platform
	s.fieldMap["deviceModel"] = s.DeviceModel
	s.fieldMap["manufacturer"] = s.Manufacturer
	s.fieldMap["chassisId"] = s.ChassisId
	s.fieldMap["description"] = s.Description
	s.fieldMap["organizationId"] = s.OrganizationId

}

func (s scanDevice) clone(db *gorm.DB) scanDevice {
	s.scanDeviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scanDevice) replaceDB(db *gorm.DB) scanDevice {
	s.scanDeviceDo.ReplaceDB(db)
	return s
}

type scanDeviceBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a scanDeviceBelongsToOrganization) Where(conds ...field.Expr) *scanDeviceBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a scanDeviceBelongsToOrganization) WithContext(ctx context.Context) *scanDeviceBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a scanDeviceBelongsToOrganization) Session(session *gorm.Session) *scanDeviceBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a scanDeviceBelongsToOrganization) Model(m *models.ScanDevice) *scanDeviceBelongsToOrganizationTx {
	return &scanDeviceBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type scanDeviceBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a scanDeviceBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a scanDeviceBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a scanDeviceBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a scanDeviceBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a scanDeviceBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a scanDeviceBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type scanDeviceDo struct{ gen.DO }

type IScanDeviceDo interface {
	gen.SubQuery
	Debug() IScanDeviceDo
	WithContext(ctx context.Context) IScanDeviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScanDeviceDo
	WriteDB() IScanDeviceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScanDeviceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScanDeviceDo
	Not(conds ...gen.Condition) IScanDeviceDo
	Or(conds ...gen.Condition) IScanDeviceDo
	Select(conds ...field.Expr) IScanDeviceDo
	Where(conds ...gen.Condition) IScanDeviceDo
	Order(conds ...field.Expr) IScanDeviceDo
	Distinct(cols ...field.Expr) IScanDeviceDo
	Omit(cols ...field.Expr) IScanDeviceDo
	Join(table schema.Tabler, on ...field.Expr) IScanDeviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScanDeviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScanDeviceDo
	Group(cols ...field.Expr) IScanDeviceDo
	Having(conds ...gen.Condition) IScanDeviceDo
	Limit(limit int) IScanDeviceDo
	Offset(offset int) IScanDeviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScanDeviceDo
	Unscoped() IScanDeviceDo
	Create(values ...*models.ScanDevice) error
	CreateInBatches(values []*models.ScanDevice, batchSize int) error
	Save(values ...*models.ScanDevice) error
	First() (*models.ScanDevice, error)
	Take() (*models.ScanDevice, error)
	Last() (*models.ScanDevice, error)
	Find() ([]*models.ScanDevice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ScanDevice, err error)
	FindInBatches(result *[]*models.ScanDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ScanDevice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScanDeviceDo
	Assign(attrs ...field.AssignExpr) IScanDeviceDo
	Joins(fields ...field.RelationField) IScanDeviceDo
	Preload(fields ...field.RelationField) IScanDeviceDo
	FirstOrInit() (*models.ScanDevice, error)
	FirstOrCreate() (*models.ScanDevice, error)
	FindByPage(offset int, limit int) (result []*models.ScanDevice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScanDeviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scanDeviceDo) Debug() IScanDeviceDo {
	return s.withDO(s.DO.Debug())
}

func (s scanDeviceDo) WithContext(ctx context.Context) IScanDeviceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scanDeviceDo) ReadDB() IScanDeviceDo {
	return s.Clauses(dbresolver.Read)
}

func (s scanDeviceDo) WriteDB() IScanDeviceDo {
	return s.Clauses(dbresolver.Write)
}

func (s scanDeviceDo) Session(config *gorm.Session) IScanDeviceDo {
	return s.withDO(s.DO.Session(config))
}

func (s scanDeviceDo) Clauses(conds ...clause.Expression) IScanDeviceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scanDeviceDo) Returning(value interface{}, columns ...string) IScanDeviceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scanDeviceDo) Not(conds ...gen.Condition) IScanDeviceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scanDeviceDo) Or(conds ...gen.Condition) IScanDeviceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scanDeviceDo) Select(conds ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scanDeviceDo) Where(conds ...gen.Condition) IScanDeviceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scanDeviceDo) Order(conds ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scanDeviceDo) Distinct(cols ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scanDeviceDo) Omit(cols ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scanDeviceDo) Join(table schema.Tabler, on ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scanDeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scanDeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scanDeviceDo) Group(cols ...field.Expr) IScanDeviceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scanDeviceDo) Having(conds ...gen.Condition) IScanDeviceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scanDeviceDo) Limit(limit int) IScanDeviceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scanDeviceDo) Offset(offset int) IScanDeviceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scanDeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScanDeviceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scanDeviceDo) Unscoped() IScanDeviceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scanDeviceDo) Create(values ...*models.ScanDevice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scanDeviceDo) CreateInBatches(values []*models.ScanDevice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scanDeviceDo) Save(values ...*models.ScanDevice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scanDeviceDo) First() (*models.ScanDevice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ScanDevice), nil
	}
}

func (s scanDeviceDo) Take() (*models.ScanDevice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ScanDevice), nil
	}
}

func (s scanDeviceDo) Last() (*models.ScanDevice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ScanDevice), nil
	}
}

func (s scanDeviceDo) Find() ([]*models.ScanDevice, error) {
	result, err := s.DO.Find()
	return result.([]*models.ScanDevice), err
}

func (s scanDeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ScanDevice, err error) {
	buf := make([]*models.ScanDevice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scanDeviceDo) FindInBatches(result *[]*models.ScanDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scanDeviceDo) Attrs(attrs ...field.AssignExpr) IScanDeviceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scanDeviceDo) Assign(attrs ...field.AssignExpr) IScanDeviceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scanDeviceDo) Joins(fields ...field.RelationField) IScanDeviceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scanDeviceDo) Preload(fields ...field.RelationField) IScanDeviceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scanDeviceDo) FirstOrInit() (*models.ScanDevice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ScanDevice), nil
	}
}

func (s scanDeviceDo) FirstOrCreate() (*models.ScanDevice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ScanDevice), nil
	}
}

func (s scanDeviceDo) FindByPage(offset int, limit int) (result []*models.ScanDevice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scanDeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scanDeviceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scanDeviceDo) Delete(models ...*models.ScanDevice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scanDeviceDo) withDO(do gen.Dao) *scanDeviceDo {
	s.DO = *do.(*gen.DO)
	return s
}

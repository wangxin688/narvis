// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newProvider(db *gorm.DB, opts ...gen.DOOption) provider {
	_provider := provider{}

	_provider.providerDo.UseDB(db, opts...)
	_provider.providerDo.UseModel(&models.Provider{})

	tableName := _provider.providerDo.TableName()
	_provider.ALL = field.NewAsterisk(tableName)
	_provider.Id = field.NewString(tableName, "id")
	_provider.CreatedAt = field.NewTime(tableName, "createdAt")
	_provider.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_provider.Name = field.NewString(tableName, "name")
	_provider.Icon = field.NewString(tableName, "icon")
	_provider.Description = field.NewString(tableName, "description")

	_provider.fillFieldMap()

	return _provider
}

type provider struct {
	providerDo

	ALL         field.Asterisk
	Id          field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Name        field.String
	Icon        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (p provider) Table(newTableName string) *provider {
	p.providerDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p provider) As(alias string) *provider {
	p.providerDo.DO = *(p.providerDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *provider) updateTableName(table string) *provider {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewString(table, "id")
	p.CreatedAt = field.NewTime(table, "createdAt")
	p.UpdatedAt = field.NewTime(table, "updatedAt")
	p.Name = field.NewString(table, "name")
	p.Icon = field.NewString(table, "icon")
	p.Description = field.NewString(table, "description")

	p.fillFieldMap()

	return p
}

func (p *provider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *provider) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.Id
	p.fieldMap["createdAt"] = p.CreatedAt
	p.fieldMap["updatedAt"] = p.UpdatedAt
	p.fieldMap["name"] = p.Name
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["description"] = p.Description
}

func (p provider) clone(db *gorm.DB) provider {
	p.providerDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p provider) replaceDB(db *gorm.DB) provider {
	p.providerDo.ReplaceDB(db)
	return p
}

type providerDo struct{ gen.DO }

type IProviderDo interface {
	gen.SubQuery
	Debug() IProviderDo
	WithContext(ctx context.Context) IProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProviderDo
	WriteDB() IProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProviderDo
	Not(conds ...gen.Condition) IProviderDo
	Or(conds ...gen.Condition) IProviderDo
	Select(conds ...field.Expr) IProviderDo
	Where(conds ...gen.Condition) IProviderDo
	Order(conds ...field.Expr) IProviderDo
	Distinct(cols ...field.Expr) IProviderDo
	Omit(cols ...field.Expr) IProviderDo
	Join(table schema.Tabler, on ...field.Expr) IProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProviderDo
	Group(cols ...field.Expr) IProviderDo
	Having(conds ...gen.Condition) IProviderDo
	Limit(limit int) IProviderDo
	Offset(offset int) IProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProviderDo
	Unscoped() IProviderDo
	Create(values ...*models.Provider) error
	CreateInBatches(values []*models.Provider, batchSize int) error
	Save(values ...*models.Provider) error
	First() (*models.Provider, error)
	Take() (*models.Provider, error)
	Last() (*models.Provider, error)
	Find() ([]*models.Provider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Provider, err error)
	FindInBatches(result *[]*models.Provider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Provider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProviderDo
	Assign(attrs ...field.AssignExpr) IProviderDo
	Joins(fields ...field.RelationField) IProviderDo
	Preload(fields ...field.RelationField) IProviderDo
	FirstOrInit() (*models.Provider, error)
	FirstOrCreate() (*models.Provider, error)
	FindByPage(offset int, limit int) (result []*models.Provider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p providerDo) Debug() IProviderDo {
	return p.withDO(p.DO.Debug())
}

func (p providerDo) WithContext(ctx context.Context) IProviderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p providerDo) ReadDB() IProviderDo {
	return p.Clauses(dbresolver.Read)
}

func (p providerDo) WriteDB() IProviderDo {
	return p.Clauses(dbresolver.Write)
}

func (p providerDo) Session(config *gorm.Session) IProviderDo {
	return p.withDO(p.DO.Session(config))
}

func (p providerDo) Clauses(conds ...clause.Expression) IProviderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p providerDo) Returning(value interface{}, columns ...string) IProviderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p providerDo) Not(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p providerDo) Or(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p providerDo) Select(conds ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p providerDo) Where(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p providerDo) Order(conds ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p providerDo) Distinct(cols ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p providerDo) Omit(cols ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p providerDo) Join(table schema.Tabler, on ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p providerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProviderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p providerDo) RightJoin(table schema.Tabler, on ...field.Expr) IProviderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p providerDo) Group(cols ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p providerDo) Having(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p providerDo) Limit(limit int) IProviderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p providerDo) Offset(offset int) IProviderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p providerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProviderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p providerDo) Unscoped() IProviderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p providerDo) Create(values ...*models.Provider) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p providerDo) CreateInBatches(values []*models.Provider, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p providerDo) Save(values ...*models.Provider) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p providerDo) First() (*models.Provider, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Provider), nil
	}
}

func (p providerDo) Take() (*models.Provider, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Provider), nil
	}
}

func (p providerDo) Last() (*models.Provider, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Provider), nil
	}
}

func (p providerDo) Find() ([]*models.Provider, error) {
	result, err := p.DO.Find()
	return result.([]*models.Provider), err
}

func (p providerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Provider, err error) {
	buf := make([]*models.Provider, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p providerDo) FindInBatches(result *[]*models.Provider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p providerDo) Attrs(attrs ...field.AssignExpr) IProviderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p providerDo) Assign(attrs ...field.AssignExpr) IProviderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p providerDo) Joins(fields ...field.RelationField) IProviderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p providerDo) Preload(fields ...field.RelationField) IProviderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p providerDo) FirstOrInit() (*models.Provider, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Provider), nil
	}
}

func (p providerDo) FirstOrCreate() (*models.Provider, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Provider), nil
	}
}

func (p providerDo) FindByPage(offset int, limit int) (result []*models.Provider, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p providerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p providerDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p providerDo) Delete(models ...*models.Provider) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *providerDo) withDO(do gen.Dao) *providerDo {
	p.DO = *do.(*gen.DO)
	return p
}

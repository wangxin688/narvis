// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newActionLog(db *gorm.DB, opts ...gen.DOOption) actionLog {
	_actionLog := actionLog{}

	_actionLog.actionLogDo.UseDB(db, opts...)
	_actionLog.actionLogDo.UseModel(&models.ActionLog{})

	tableName := _actionLog.actionLogDo.TableName()
	_actionLog.ALL = field.NewAsterisk(tableName)
	_actionLog.Id = field.NewString(tableName, "id")
	_actionLog.CreatedAt = field.NewTime(tableName, "created_at")
	_actionLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_actionLog.Acknowledged = field.NewBool(tableName, "acknowledged")
	_actionLog.Resolved = field.NewBool(tableName, "resolved")
	_actionLog.Suppressed = field.NewBool(tableName, "suppressed")
	_actionLog.Comment = field.NewString(tableName, "comment")
	_actionLog.AssignUserId = field.NewString(tableName, "assign_user_id")
	_actionLog.CreatedById = field.NewString(tableName, "created_by_id")
	_actionLog.AssignUser = actionLogBelongsToAssignUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AssignUser", "models.User"),
		Group: struct {
			field.RelationField
			Role struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("AssignUser.Group", "models.Group"),
			Role: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("AssignUser.Group.Role", "models.Role"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("AssignUser.Group.Role.Organization", "models.Organization"),
				},
				Menus: struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("AssignUser.Group.Role.Menus", "models.Menu"),
					Parent: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("AssignUser.Group.Role.Menus.Parent", "models.Menu"),
					},
					Permission: struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("AssignUser.Group.Role.Menus.Permission", "models.Permission"),
						Menu: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("AssignUser.Group.Role.Menus.Permission.Menu", "models.Menu"),
						},
					},
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("AssignUser.Group.Organization", "models.Organization"),
			},
		},
		Role: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AssignUser.Role", "models.Role"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AssignUser.Organization", "models.Organization"),
		},
	}

	_actionLog.CreatedBy = actionLogBelongsToCreatedBy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreatedBy", "models.User"),
	}

	_actionLog.Alert = actionLogManyToManyAlert{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Alert", "models.Alert"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Alert.User", "models.User"),
		},
		Site: struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Site", "models.Site"),
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Site.Organization", "models.Organization"),
			},
		},
		Device: struct {
			field.RelationField
			Rack struct {
				field.RelationField
				Location struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Site struct {
						field.RelationField
					}
					Organization struct {
						field.RelationField
					}
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}
			Location struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Device", "models.Device"),
			Rack: struct {
				field.RelationField
				Location struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Site struct {
						field.RelationField
					}
					Organization struct {
						field.RelationField
					}
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Alert.Device.Rack", "models.Rack"),
				Location: struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Site struct {
						field.RelationField
					}
					Organization struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Alert.Device.Rack.Location", "models.Location"),
					Parent: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Alert.Device.Rack.Location.Parent", "models.Location"),
					},
					Site: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Alert.Device.Rack.Location.Site", "models.Site"),
					},
					Organization: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Alert.Device.Rack.Location.Organization", "models.Organization"),
					},
				},
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Device.Rack.Site", "models.Site"),
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Device.Rack.Organization", "models.Organization"),
				},
			},
			Location: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Device.Location", "models.Location"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Device.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Device.Organization", "models.Organization"),
			},
		},
		Ap: struct {
			field.RelationField
			ActiveWac struct {
				field.RelationField
			}
			Location struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Ap", "models.AP"),
			ActiveWac: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Ap.ActiveWac", "models.Device"),
			},
			Location: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Ap.Location", "models.Location"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Ap.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Ap.Organization", "models.Organization"),
			},
		},
		Circuit: struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
			ASite struct {
				field.RelationField
			}
			ADevice struct {
				field.RelationField
			}
			AInterface struct {
				field.RelationField
				Device struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
			}
			ZSite struct {
				field.RelationField
			}
			ZDevice struct {
				field.RelationField
			}
			ZInterface struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Circuit", "models.Circuit"),
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.Provider", "models.Provider"),
			},
			ASite: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.ASite", "models.Site"),
			},
			ADevice: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.ADevice", "models.Device"),
			},
			AInterface: struct {
				field.RelationField
				Device struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Alert.Circuit.AInterface", "models.DeviceInterface"),
				Device: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Circuit.AInterface.Device", "models.Device"),
				},
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Circuit.AInterface.Site", "models.Site"),
				},
			},
			ZSite: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.ZSite", "models.Site"),
			},
			ZDevice: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.ZDevice", "models.Device"),
			},
			ZInterface: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.ZInterface", "models.DeviceInterface"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.Organization", "models.Organization"),
			},
		},
		DeviceInterface: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Alert.DeviceInterface", "models.DeviceInterface"),
		},
		Maintenance: struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
			Alert struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Maintenance", "models.Maintenance"),
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Maintenance.Organization", "models.Organization"),
			},
			Alert: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Maintenance.Alert", "models.Alert"),
			},
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Alert.Organization", "models.Organization"),
		},
	}

	_actionLog.AlertGroup = actionLogManyToManyAlertGroup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AlertGroup", "models.AlertGroup"),
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AlertGroup.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AlertGroup.Organization", "models.Organization"),
		},
	}

	_actionLog.fillFieldMap()

	return _actionLog
}

type actionLog struct {
	actionLogDo

	ALL          field.Asterisk
	Id           field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Acknowledged field.Bool
	Resolved     field.Bool
	Suppressed   field.Bool
	Comment      field.String
	AssignUserId field.String
	CreatedById  field.String
	AssignUser   actionLogBelongsToAssignUser

	CreatedBy actionLogBelongsToCreatedBy

	Alert actionLogManyToManyAlert

	AlertGroup actionLogManyToManyAlertGroup

	fieldMap map[string]field.Expr
}

func (a actionLog) Table(newTableName string) *actionLog {
	a.actionLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actionLog) As(alias string) *actionLog {
	a.actionLogDo.DO = *(a.actionLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *actionLog) updateTableName(table string) *actionLog {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewString(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.Acknowledged = field.NewBool(table, "acknowledged")
	a.Resolved = field.NewBool(table, "resolved")
	a.Suppressed = field.NewBool(table, "suppressed")
	a.Comment = field.NewString(table, "comment")
	a.AssignUserId = field.NewString(table, "assign_user_id")
	a.CreatedById = field.NewString(table, "created_by_id")

	a.fillFieldMap()

	return a
}

func (a *actionLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actionLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.Id
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["acknowledged"] = a.Acknowledged
	a.fieldMap["resolved"] = a.Resolved
	a.fieldMap["suppressed"] = a.Suppressed
	a.fieldMap["comment"] = a.Comment
	a.fieldMap["assign_user_id"] = a.AssignUserId
	a.fieldMap["created_by_id"] = a.CreatedById

}

func (a actionLog) clone(db *gorm.DB) actionLog {
	a.actionLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actionLog) replaceDB(db *gorm.DB) actionLog {
	a.actionLogDo.ReplaceDB(db)
	return a
}

type actionLogBelongsToAssignUser struct {
	db *gorm.DB

	field.RelationField

	Group struct {
		field.RelationField
		Role struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
			Menus struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Permission struct {
					field.RelationField
					Menu struct {
						field.RelationField
					}
				}
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Role struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a actionLogBelongsToAssignUser) Where(conds ...field.Expr) *actionLogBelongsToAssignUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a actionLogBelongsToAssignUser) WithContext(ctx context.Context) *actionLogBelongsToAssignUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a actionLogBelongsToAssignUser) Session(session *gorm.Session) *actionLogBelongsToAssignUser {
	a.db = a.db.Session(session)
	return &a
}

func (a actionLogBelongsToAssignUser) Model(m *models.ActionLog) *actionLogBelongsToAssignUserTx {
	return &actionLogBelongsToAssignUserTx{a.db.Model(m).Association(a.Name())}
}

type actionLogBelongsToAssignUserTx struct{ tx *gorm.Association }

func (a actionLogBelongsToAssignUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a actionLogBelongsToAssignUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a actionLogBelongsToAssignUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a actionLogBelongsToAssignUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a actionLogBelongsToAssignUserTx) Clear() error {
	return a.tx.Clear()
}

func (a actionLogBelongsToAssignUserTx) Count() int64 {
	return a.tx.Count()
}

type actionLogBelongsToCreatedBy struct {
	db *gorm.DB

	field.RelationField
}

func (a actionLogBelongsToCreatedBy) Where(conds ...field.Expr) *actionLogBelongsToCreatedBy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a actionLogBelongsToCreatedBy) WithContext(ctx context.Context) *actionLogBelongsToCreatedBy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a actionLogBelongsToCreatedBy) Session(session *gorm.Session) *actionLogBelongsToCreatedBy {
	a.db = a.db.Session(session)
	return &a
}

func (a actionLogBelongsToCreatedBy) Model(m *models.ActionLog) *actionLogBelongsToCreatedByTx {
	return &actionLogBelongsToCreatedByTx{a.db.Model(m).Association(a.Name())}
}

type actionLogBelongsToCreatedByTx struct{ tx *gorm.Association }

func (a actionLogBelongsToCreatedByTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a actionLogBelongsToCreatedByTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a actionLogBelongsToCreatedByTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a actionLogBelongsToCreatedByTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a actionLogBelongsToCreatedByTx) Clear() error {
	return a.tx.Clear()
}

func (a actionLogBelongsToCreatedByTx) Count() int64 {
	return a.tx.Count()
}

type actionLogManyToManyAlert struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
		Organization struct {
			field.RelationField
		}
	}
	Device struct {
		field.RelationField
		Rack struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}
		Location struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Ap struct {
		field.RelationField
		ActiveWac struct {
			field.RelationField
		}
		Location struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Circuit struct {
		field.RelationField
		Provider struct {
			field.RelationField
		}
		ASite struct {
			field.RelationField
		}
		ADevice struct {
			field.RelationField
		}
		AInterface struct {
			field.RelationField
			Device struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
		}
		ZSite struct {
			field.RelationField
		}
		ZDevice struct {
			field.RelationField
		}
		ZInterface struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	DeviceInterface struct {
		field.RelationField
	}
	Maintenance struct {
		field.RelationField
		Organization struct {
			field.RelationField
		}
		Alert struct {
			field.RelationField
		}
	}
	Organization struct {
		field.RelationField
	}
}

func (a actionLogManyToManyAlert) Where(conds ...field.Expr) *actionLogManyToManyAlert {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a actionLogManyToManyAlert) WithContext(ctx context.Context) *actionLogManyToManyAlert {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a actionLogManyToManyAlert) Session(session *gorm.Session) *actionLogManyToManyAlert {
	a.db = a.db.Session(session)
	return &a
}

func (a actionLogManyToManyAlert) Model(m *models.ActionLog) *actionLogManyToManyAlertTx {
	return &actionLogManyToManyAlertTx{a.db.Model(m).Association(a.Name())}
}

type actionLogManyToManyAlertTx struct{ tx *gorm.Association }

func (a actionLogManyToManyAlertTx) Find() (result []*models.Alert, err error) {
	return result, a.tx.Find(&result)
}

func (a actionLogManyToManyAlertTx) Append(values ...*models.Alert) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a actionLogManyToManyAlertTx) Replace(values ...*models.Alert) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a actionLogManyToManyAlertTx) Delete(values ...*models.Alert) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a actionLogManyToManyAlertTx) Clear() error {
	return a.tx.Clear()
}

func (a actionLogManyToManyAlertTx) Count() int64 {
	return a.tx.Count()
}

type actionLogManyToManyAlertGroup struct {
	db *gorm.DB

	field.RelationField

	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a actionLogManyToManyAlertGroup) Where(conds ...field.Expr) *actionLogManyToManyAlertGroup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a actionLogManyToManyAlertGroup) WithContext(ctx context.Context) *actionLogManyToManyAlertGroup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a actionLogManyToManyAlertGroup) Session(session *gorm.Session) *actionLogManyToManyAlertGroup {
	a.db = a.db.Session(session)
	return &a
}

func (a actionLogManyToManyAlertGroup) Model(m *models.ActionLog) *actionLogManyToManyAlertGroupTx {
	return &actionLogManyToManyAlertGroupTx{a.db.Model(m).Association(a.Name())}
}

type actionLogManyToManyAlertGroupTx struct{ tx *gorm.Association }

func (a actionLogManyToManyAlertGroupTx) Find() (result []*models.AlertGroup, err error) {
	return result, a.tx.Find(&result)
}

func (a actionLogManyToManyAlertGroupTx) Append(values ...*models.AlertGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a actionLogManyToManyAlertGroupTx) Replace(values ...*models.AlertGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a actionLogManyToManyAlertGroupTx) Delete(values ...*models.AlertGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a actionLogManyToManyAlertGroupTx) Clear() error {
	return a.tx.Clear()
}

func (a actionLogManyToManyAlertGroupTx) Count() int64 {
	return a.tx.Count()
}

type actionLogDo struct{ gen.DO }

type IActionLogDo interface {
	gen.SubQuery
	Debug() IActionLogDo
	WithContext(ctx context.Context) IActionLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActionLogDo
	WriteDB() IActionLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActionLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActionLogDo
	Not(conds ...gen.Condition) IActionLogDo
	Or(conds ...gen.Condition) IActionLogDo
	Select(conds ...field.Expr) IActionLogDo
	Where(conds ...gen.Condition) IActionLogDo
	Order(conds ...field.Expr) IActionLogDo
	Distinct(cols ...field.Expr) IActionLogDo
	Omit(cols ...field.Expr) IActionLogDo
	Join(table schema.Tabler, on ...field.Expr) IActionLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActionLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActionLogDo
	Group(cols ...field.Expr) IActionLogDo
	Having(conds ...gen.Condition) IActionLogDo
	Limit(limit int) IActionLogDo
	Offset(offset int) IActionLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActionLogDo
	Unscoped() IActionLogDo
	Create(values ...*models.ActionLog) error
	CreateInBatches(values []*models.ActionLog, batchSize int) error
	Save(values ...*models.ActionLog) error
	First() (*models.ActionLog, error)
	Take() (*models.ActionLog, error)
	Last() (*models.ActionLog, error)
	Find() ([]*models.ActionLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ActionLog, err error)
	FindInBatches(result *[]*models.ActionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ActionLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActionLogDo
	Assign(attrs ...field.AssignExpr) IActionLogDo
	Joins(fields ...field.RelationField) IActionLogDo
	Preload(fields ...field.RelationField) IActionLogDo
	FirstOrInit() (*models.ActionLog, error)
	FirstOrCreate() (*models.ActionLog, error)
	FindByPage(offset int, limit int) (result []*models.ActionLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActionLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actionLogDo) Debug() IActionLogDo {
	return a.withDO(a.DO.Debug())
}

func (a actionLogDo) WithContext(ctx context.Context) IActionLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actionLogDo) ReadDB() IActionLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a actionLogDo) WriteDB() IActionLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a actionLogDo) Session(config *gorm.Session) IActionLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a actionLogDo) Clauses(conds ...clause.Expression) IActionLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actionLogDo) Returning(value interface{}, columns ...string) IActionLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actionLogDo) Not(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actionLogDo) Or(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actionLogDo) Select(conds ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actionLogDo) Where(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actionLogDo) Order(conds ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actionLogDo) Distinct(cols ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actionLogDo) Omit(cols ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actionLogDo) Join(table schema.Tabler, on ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actionLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actionLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actionLogDo) Group(cols ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actionLogDo) Having(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actionLogDo) Limit(limit int) IActionLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actionLogDo) Offset(offset int) IActionLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actionLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActionLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actionLogDo) Unscoped() IActionLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actionLogDo) Create(values ...*models.ActionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actionLogDo) CreateInBatches(values []*models.ActionLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actionLogDo) Save(values ...*models.ActionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actionLogDo) First() (*models.ActionLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ActionLog), nil
	}
}

func (a actionLogDo) Take() (*models.ActionLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ActionLog), nil
	}
}

func (a actionLogDo) Last() (*models.ActionLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ActionLog), nil
	}
}

func (a actionLogDo) Find() ([]*models.ActionLog, error) {
	result, err := a.DO.Find()
	return result.([]*models.ActionLog), err
}

func (a actionLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ActionLog, err error) {
	buf := make([]*models.ActionLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actionLogDo) FindInBatches(result *[]*models.ActionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actionLogDo) Attrs(attrs ...field.AssignExpr) IActionLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actionLogDo) Assign(attrs ...field.AssignExpr) IActionLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actionLogDo) Joins(fields ...field.RelationField) IActionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actionLogDo) Preload(fields ...field.RelationField) IActionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actionLogDo) FirstOrInit() (*models.ActionLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ActionLog), nil
	}
}

func (a actionLogDo) FirstOrCreate() (*models.ActionLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ActionLog), nil
	}
}

func (a actionLogDo) FindByPage(offset int, limit int) (result []*models.ActionLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actionLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actionLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actionLogDo) Delete(models ...*models.ActionLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actionLogDo) withDO(do gen.Dao) *actionLogDo {
	a.DO = *do.(*gen.DO)
	return a
}

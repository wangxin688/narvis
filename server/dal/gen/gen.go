// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                        = new(Query)
	ActionLog                *actionLog
	Alert                    *alert
	AlertGroup               *alertGroup
	Block                    *block
	Circuit                  *circuit
	Device                   *device
	DeviceCliCredential      *deviceCliCredential
	DeviceConfig             *deviceConfig
	DeviceInterface          *deviceInterface
	DeviceRestconfCredential *deviceRestconfCredential
	DeviceSnmpV2Credential   *deviceSnmpV2Credential
	Group                    *group
	IpAddress                *ipAddress
	LLDPNeighbor             *lLDPNeighbor
	Location                 *location
	Maintenance              *maintenance
	Menu                     *menu
	Organization             *organization
	Permission               *permission
	Prefix                   *prefix
	Provider                 *provider
	Proxy                    *proxy
	Rack                     *rack
	Role                     *role
	RootCause                *rootCause
	Site                     *site
	Subscription             *subscription
	SubscriptionRecord       *subscriptionRecord
	Template                 *template
	User                     *user
	Vlan                     *vlan
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ActionLog = &Q.ActionLog
	Alert = &Q.Alert
	AlertGroup = &Q.AlertGroup
	Block = &Q.Block
	Circuit = &Q.Circuit
	Device = &Q.Device
	DeviceCliCredential = &Q.DeviceCliCredential
	DeviceConfig = &Q.DeviceConfig
	DeviceInterface = &Q.DeviceInterface
	DeviceRestconfCredential = &Q.DeviceRestconfCredential
	DeviceSnmpV2Credential = &Q.DeviceSnmpV2Credential
	Group = &Q.Group
	IpAddress = &Q.IpAddress
	LLDPNeighbor = &Q.LLDPNeighbor
	Location = &Q.Location
	Maintenance = &Q.Maintenance
	Menu = &Q.Menu
	Organization = &Q.Organization
	Permission = &Q.Permission
	Prefix = &Q.Prefix
	Provider = &Q.Provider
	Proxy = &Q.Proxy
	Rack = &Q.Rack
	Role = &Q.Role
	RootCause = &Q.RootCause
	Site = &Q.Site
	Subscription = &Q.Subscription
	SubscriptionRecord = &Q.SubscriptionRecord
	Template = &Q.Template
	User = &Q.User
	Vlan = &Q.Vlan
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                       db,
		ActionLog:                newActionLog(db, opts...),
		Alert:                    newAlert(db, opts...),
		AlertGroup:               newAlertGroup(db, opts...),
		Block:                    newBlock(db, opts...),
		Circuit:                  newCircuit(db, opts...),
		Device:                   newDevice(db, opts...),
		DeviceCliCredential:      newDeviceCliCredential(db, opts...),
		DeviceConfig:             newDeviceConfig(db, opts...),
		DeviceInterface:          newDeviceInterface(db, opts...),
		DeviceRestconfCredential: newDeviceRestconfCredential(db, opts...),
		DeviceSnmpV2Credential:   newDeviceSnmpV2Credential(db, opts...),
		Group:                    newGroup(db, opts...),
		IpAddress:                newIpAddress(db, opts...),
		LLDPNeighbor:             newLLDPNeighbor(db, opts...),
		Location:                 newLocation(db, opts...),
		Maintenance:              newMaintenance(db, opts...),
		Menu:                     newMenu(db, opts...),
		Organization:             newOrganization(db, opts...),
		Permission:               newPermission(db, opts...),
		Prefix:                   newPrefix(db, opts...),
		Provider:                 newProvider(db, opts...),
		Proxy:                    newProxy(db, opts...),
		Rack:                     newRack(db, opts...),
		Role:                     newRole(db, opts...),
		RootCause:                newRootCause(db, opts...),
		Site:                     newSite(db, opts...),
		Subscription:             newSubscription(db, opts...),
		SubscriptionRecord:       newSubscriptionRecord(db, opts...),
		Template:                 newTemplate(db, opts...),
		User:                     newUser(db, opts...),
		Vlan:                     newVlan(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActionLog                actionLog
	Alert                    alert
	AlertGroup               alertGroup
	Block                    block
	Circuit                  circuit
	Device                   device
	DeviceCliCredential      deviceCliCredential
	DeviceConfig             deviceConfig
	DeviceInterface          deviceInterface
	DeviceRestconfCredential deviceRestconfCredential
	DeviceSnmpV2Credential   deviceSnmpV2Credential
	Group                    group
	IpAddress                ipAddress
	LLDPNeighbor             lLDPNeighbor
	Location                 location
	Maintenance              maintenance
	Menu                     menu
	Organization             organization
	Permission               permission
	Prefix                   prefix
	Provider                 provider
	Proxy                    proxy
	Rack                     rack
	Role                     role
	RootCause                rootCause
	Site                     site
	Subscription             subscription
	SubscriptionRecord       subscriptionRecord
	Template                 template
	User                     user
	Vlan                     vlan
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                       db,
		ActionLog:                q.ActionLog.clone(db),
		Alert:                    q.Alert.clone(db),
		AlertGroup:               q.AlertGroup.clone(db),
		Block:                    q.Block.clone(db),
		Circuit:                  q.Circuit.clone(db),
		Device:                   q.Device.clone(db),
		DeviceCliCredential:      q.DeviceCliCredential.clone(db),
		DeviceConfig:             q.DeviceConfig.clone(db),
		DeviceInterface:          q.DeviceInterface.clone(db),
		DeviceRestconfCredential: q.DeviceRestconfCredential.clone(db),
		DeviceSnmpV2Credential:   q.DeviceSnmpV2Credential.clone(db),
		Group:                    q.Group.clone(db),
		IpAddress:                q.IpAddress.clone(db),
		LLDPNeighbor:             q.LLDPNeighbor.clone(db),
		Location:                 q.Location.clone(db),
		Maintenance:              q.Maintenance.clone(db),
		Menu:                     q.Menu.clone(db),
		Organization:             q.Organization.clone(db),
		Permission:               q.Permission.clone(db),
		Prefix:                   q.Prefix.clone(db),
		Provider:                 q.Provider.clone(db),
		Proxy:                    q.Proxy.clone(db),
		Rack:                     q.Rack.clone(db),
		Role:                     q.Role.clone(db),
		RootCause:                q.RootCause.clone(db),
		Site:                     q.Site.clone(db),
		Subscription:             q.Subscription.clone(db),
		SubscriptionRecord:       q.SubscriptionRecord.clone(db),
		Template:                 q.Template.clone(db),
		User:                     q.User.clone(db),
		Vlan:                     q.Vlan.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                       db,
		ActionLog:                q.ActionLog.replaceDB(db),
		Alert:                    q.Alert.replaceDB(db),
		AlertGroup:               q.AlertGroup.replaceDB(db),
		Block:                    q.Block.replaceDB(db),
		Circuit:                  q.Circuit.replaceDB(db),
		Device:                   q.Device.replaceDB(db),
		DeviceCliCredential:      q.DeviceCliCredential.replaceDB(db),
		DeviceConfig:             q.DeviceConfig.replaceDB(db),
		DeviceInterface:          q.DeviceInterface.replaceDB(db),
		DeviceRestconfCredential: q.DeviceRestconfCredential.replaceDB(db),
		DeviceSnmpV2Credential:   q.DeviceSnmpV2Credential.replaceDB(db),
		Group:                    q.Group.replaceDB(db),
		IpAddress:                q.IpAddress.replaceDB(db),
		LLDPNeighbor:             q.LLDPNeighbor.replaceDB(db),
		Location:                 q.Location.replaceDB(db),
		Maintenance:              q.Maintenance.replaceDB(db),
		Menu:                     q.Menu.replaceDB(db),
		Organization:             q.Organization.replaceDB(db),
		Permission:               q.Permission.replaceDB(db),
		Prefix:                   q.Prefix.replaceDB(db),
		Provider:                 q.Provider.replaceDB(db),
		Proxy:                    q.Proxy.replaceDB(db),
		Rack:                     q.Rack.replaceDB(db),
		Role:                     q.Role.replaceDB(db),
		RootCause:                q.RootCause.replaceDB(db),
		Site:                     q.Site.replaceDB(db),
		Subscription:             q.Subscription.replaceDB(db),
		SubscriptionRecord:       q.SubscriptionRecord.replaceDB(db),
		Template:                 q.Template.replaceDB(db),
		User:                     q.User.replaceDB(db),
		Vlan:                     q.Vlan.replaceDB(db),
	}
}

type queryCtx struct {
	ActionLog                IActionLogDo
	Alert                    IAlertDo
	AlertGroup               IAlertGroupDo
	Block                    IBlockDo
	Circuit                  ICircuitDo
	Device                   IDeviceDo
	DeviceCliCredential      IDeviceCliCredentialDo
	DeviceConfig             IDeviceConfigDo
	DeviceInterface          IDeviceInterfaceDo
	DeviceRestconfCredential IDeviceRestconfCredentialDo
	DeviceSnmpV2Credential   IDeviceSnmpV2CredentialDo
	Group                    IGroupDo
	IpAddress                IIpAddressDo
	LLDPNeighbor             ILLDPNeighborDo
	Location                 ILocationDo
	Maintenance              IMaintenanceDo
	Menu                     IMenuDo
	Organization             IOrganizationDo
	Permission               IPermissionDo
	Prefix                   IPrefixDo
	Provider                 IProviderDo
	Proxy                    IProxyDo
	Rack                     IRackDo
	Role                     IRoleDo
	RootCause                IRootCauseDo
	Site                     ISiteDo
	Subscription             ISubscriptionDo
	SubscriptionRecord       ISubscriptionRecordDo
	Template                 ITemplateDo
	User                     IUserDo
	Vlan                     IVlanDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ActionLog:                q.ActionLog.WithContext(ctx),
		Alert:                    q.Alert.WithContext(ctx),
		AlertGroup:               q.AlertGroup.WithContext(ctx),
		Block:                    q.Block.WithContext(ctx),
		Circuit:                  q.Circuit.WithContext(ctx),
		Device:                   q.Device.WithContext(ctx),
		DeviceCliCredential:      q.DeviceCliCredential.WithContext(ctx),
		DeviceConfig:             q.DeviceConfig.WithContext(ctx),
		DeviceInterface:          q.DeviceInterface.WithContext(ctx),
		DeviceRestconfCredential: q.DeviceRestconfCredential.WithContext(ctx),
		DeviceSnmpV2Credential:   q.DeviceSnmpV2Credential.WithContext(ctx),
		Group:                    q.Group.WithContext(ctx),
		IpAddress:                q.IpAddress.WithContext(ctx),
		LLDPNeighbor:             q.LLDPNeighbor.WithContext(ctx),
		Location:                 q.Location.WithContext(ctx),
		Maintenance:              q.Maintenance.WithContext(ctx),
		Menu:                     q.Menu.WithContext(ctx),
		Organization:             q.Organization.WithContext(ctx),
		Permission:               q.Permission.WithContext(ctx),
		Prefix:                   q.Prefix.WithContext(ctx),
		Provider:                 q.Provider.WithContext(ctx),
		Proxy:                    q.Proxy.WithContext(ctx),
		Rack:                     q.Rack.WithContext(ctx),
		Role:                     q.Role.WithContext(ctx),
		RootCause:                q.RootCause.WithContext(ctx),
		Site:                     q.Site.WithContext(ctx),
		Subscription:             q.Subscription.WithContext(ctx),
		SubscriptionRecord:       q.SubscriptionRecord.WithContext(ctx),
		Template:                 q.Template.WithContext(ctx),
		User:                     q.User.WithContext(ctx),
		Vlan:                     q.Vlan.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

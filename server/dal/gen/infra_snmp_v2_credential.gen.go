// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSnmpV2Credential(db *gorm.DB, opts ...gen.DOOption) snmpV2Credential {
	_snmpV2Credential := snmpV2Credential{}

	_snmpV2Credential.snmpV2CredentialDo.UseDB(db, opts...)
	_snmpV2Credential.snmpV2CredentialDo.UseModel(&models.SnmpV2Credential{})

	tableName := _snmpV2Credential.snmpV2CredentialDo.TableName()
	_snmpV2Credential.ALL = field.NewAsterisk(tableName)
	_snmpV2Credential.Id = field.NewString(tableName, "id")
	_snmpV2Credential.CreatedAt = field.NewTime(tableName, "createdAt")
	_snmpV2Credential.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_snmpV2Credential.Community = field.NewString(tableName, "community")
	_snmpV2Credential.MaxRepetitions = field.NewUint8(tableName, "maxRepetitions")
	_snmpV2Credential.Timeout = field.NewUint8(tableName, "timeout")
	_snmpV2Credential.Port = field.NewUint16(tableName, "port")
	_snmpV2Credential.DeviceId = field.NewString(tableName, "deviceId")
	_snmpV2Credential.GlobalMacroId = field.NewString(tableName, "globalMacroId")
	_snmpV2Credential.OrganizationId = field.NewString(tableName, "organizationId")
	_snmpV2Credential.Device = snmpV2CredentialBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "models.Device"),
		Rack: struct {
			field.RelationField
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Device.Rack", "models.Rack"),
			Site: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Device.Rack.Site", "models.Site"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Site.Organization", "models.Organization"),
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Organization", "models.Organization"),
			},
		},
		Template: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Template", "models.Template"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Organization", "models.Organization"),
		},
	}

	_snmpV2Credential.Organization = snmpV2CredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_snmpV2Credential.fillFieldMap()

	return _snmpV2Credential
}

type snmpV2Credential struct {
	snmpV2CredentialDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Community      field.String
	MaxRepetitions field.Uint8
	Timeout        field.Uint8
	Port           field.Uint16
	DeviceId       field.String
	GlobalMacroId  field.String
	OrganizationId field.String
	Device         snmpV2CredentialBelongsToDevice

	Organization snmpV2CredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (s snmpV2Credential) Table(newTableName string) *snmpV2Credential {
	s.snmpV2CredentialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s snmpV2Credential) As(alias string) *snmpV2Credential {
	s.snmpV2CredentialDo.DO = *(s.snmpV2CredentialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *snmpV2Credential) updateTableName(table string) *snmpV2Credential {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "createdAt")
	s.UpdatedAt = field.NewTime(table, "updatedAt")
	s.Community = field.NewString(table, "community")
	s.MaxRepetitions = field.NewUint8(table, "maxRepetitions")
	s.Timeout = field.NewUint8(table, "timeout")
	s.Port = field.NewUint16(table, "port")
	s.DeviceId = field.NewString(table, "deviceId")
	s.GlobalMacroId = field.NewString(table, "globalMacroId")
	s.OrganizationId = field.NewString(table, "organizationId")

	s.fillFieldMap()

	return s
}

func (s *snmpV2Credential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *snmpV2Credential) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.Id
	s.fieldMap["createdAt"] = s.CreatedAt
	s.fieldMap["updatedAt"] = s.UpdatedAt
	s.fieldMap["community"] = s.Community
	s.fieldMap["maxRepetitions"] = s.MaxRepetitions
	s.fieldMap["timeout"] = s.Timeout
	s.fieldMap["port"] = s.Port
	s.fieldMap["deviceId"] = s.DeviceId
	s.fieldMap["globalMacroId"] = s.GlobalMacroId
	s.fieldMap["organizationId"] = s.OrganizationId

}

func (s snmpV2Credential) clone(db *gorm.DB) snmpV2Credential {
	s.snmpV2CredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s snmpV2Credential) replaceDB(db *gorm.DB) snmpV2Credential {
	s.snmpV2CredentialDo.ReplaceDB(db)
	return s
}

type snmpV2CredentialBelongsToDevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Site struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Template struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a snmpV2CredentialBelongsToDevice) Where(conds ...field.Expr) *snmpV2CredentialBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a snmpV2CredentialBelongsToDevice) WithContext(ctx context.Context) *snmpV2CredentialBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a snmpV2CredentialBelongsToDevice) Session(session *gorm.Session) *snmpV2CredentialBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a snmpV2CredentialBelongsToDevice) Model(m *models.SnmpV2Credential) *snmpV2CredentialBelongsToDeviceTx {
	return &snmpV2CredentialBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

type snmpV2CredentialBelongsToDeviceTx struct{ tx *gorm.Association }

func (a snmpV2CredentialBelongsToDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a snmpV2CredentialBelongsToDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a snmpV2CredentialBelongsToDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a snmpV2CredentialBelongsToDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a snmpV2CredentialBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a snmpV2CredentialBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

type snmpV2CredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a snmpV2CredentialBelongsToOrganization) Where(conds ...field.Expr) *snmpV2CredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a snmpV2CredentialBelongsToOrganization) WithContext(ctx context.Context) *snmpV2CredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a snmpV2CredentialBelongsToOrganization) Session(session *gorm.Session) *snmpV2CredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a snmpV2CredentialBelongsToOrganization) Model(m *models.SnmpV2Credential) *snmpV2CredentialBelongsToOrganizationTx {
	return &snmpV2CredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type snmpV2CredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a snmpV2CredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a snmpV2CredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a snmpV2CredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a snmpV2CredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a snmpV2CredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a snmpV2CredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type snmpV2CredentialDo struct{ gen.DO }

type ISnmpV2CredentialDo interface {
	gen.SubQuery
	Debug() ISnmpV2CredentialDo
	WithContext(ctx context.Context) ISnmpV2CredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISnmpV2CredentialDo
	WriteDB() ISnmpV2CredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISnmpV2CredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISnmpV2CredentialDo
	Not(conds ...gen.Condition) ISnmpV2CredentialDo
	Or(conds ...gen.Condition) ISnmpV2CredentialDo
	Select(conds ...field.Expr) ISnmpV2CredentialDo
	Where(conds ...gen.Condition) ISnmpV2CredentialDo
	Order(conds ...field.Expr) ISnmpV2CredentialDo
	Distinct(cols ...field.Expr) ISnmpV2CredentialDo
	Omit(cols ...field.Expr) ISnmpV2CredentialDo
	Join(table schema.Tabler, on ...field.Expr) ISnmpV2CredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISnmpV2CredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISnmpV2CredentialDo
	Group(cols ...field.Expr) ISnmpV2CredentialDo
	Having(conds ...gen.Condition) ISnmpV2CredentialDo
	Limit(limit int) ISnmpV2CredentialDo
	Offset(offset int) ISnmpV2CredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISnmpV2CredentialDo
	Unscoped() ISnmpV2CredentialDo
	Create(values ...*models.SnmpV2Credential) error
	CreateInBatches(values []*models.SnmpV2Credential, batchSize int) error
	Save(values ...*models.SnmpV2Credential) error
	First() (*models.SnmpV2Credential, error)
	Take() (*models.SnmpV2Credential, error)
	Last() (*models.SnmpV2Credential, error)
	Find() ([]*models.SnmpV2Credential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SnmpV2Credential, err error)
	FindInBatches(result *[]*models.SnmpV2Credential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SnmpV2Credential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISnmpV2CredentialDo
	Assign(attrs ...field.AssignExpr) ISnmpV2CredentialDo
	Joins(fields ...field.RelationField) ISnmpV2CredentialDo
	Preload(fields ...field.RelationField) ISnmpV2CredentialDo
	FirstOrInit() (*models.SnmpV2Credential, error)
	FirstOrCreate() (*models.SnmpV2Credential, error)
	FindByPage(offset int, limit int) (result []*models.SnmpV2Credential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISnmpV2CredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s snmpV2CredentialDo) Debug() ISnmpV2CredentialDo {
	return s.withDO(s.DO.Debug())
}

func (s snmpV2CredentialDo) WithContext(ctx context.Context) ISnmpV2CredentialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s snmpV2CredentialDo) ReadDB() ISnmpV2CredentialDo {
	return s.Clauses(dbresolver.Read)
}

func (s snmpV2CredentialDo) WriteDB() ISnmpV2CredentialDo {
	return s.Clauses(dbresolver.Write)
}

func (s snmpV2CredentialDo) Session(config *gorm.Session) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Session(config))
}

func (s snmpV2CredentialDo) Clauses(conds ...clause.Expression) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s snmpV2CredentialDo) Returning(value interface{}, columns ...string) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s snmpV2CredentialDo) Not(conds ...gen.Condition) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s snmpV2CredentialDo) Or(conds ...gen.Condition) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s snmpV2CredentialDo) Select(conds ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s snmpV2CredentialDo) Where(conds ...gen.Condition) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s snmpV2CredentialDo) Order(conds ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s snmpV2CredentialDo) Distinct(cols ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s snmpV2CredentialDo) Omit(cols ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s snmpV2CredentialDo) Join(table schema.Tabler, on ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s snmpV2CredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s snmpV2CredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s snmpV2CredentialDo) Group(cols ...field.Expr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s snmpV2CredentialDo) Having(conds ...gen.Condition) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s snmpV2CredentialDo) Limit(limit int) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s snmpV2CredentialDo) Offset(offset int) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s snmpV2CredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s snmpV2CredentialDo) Unscoped() ISnmpV2CredentialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s snmpV2CredentialDo) Create(values ...*models.SnmpV2Credential) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s snmpV2CredentialDo) CreateInBatches(values []*models.SnmpV2Credential, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s snmpV2CredentialDo) Save(values ...*models.SnmpV2Credential) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s snmpV2CredentialDo) First() (*models.SnmpV2Credential, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SnmpV2Credential), nil
	}
}

func (s snmpV2CredentialDo) Take() (*models.SnmpV2Credential, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SnmpV2Credential), nil
	}
}

func (s snmpV2CredentialDo) Last() (*models.SnmpV2Credential, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SnmpV2Credential), nil
	}
}

func (s snmpV2CredentialDo) Find() ([]*models.SnmpV2Credential, error) {
	result, err := s.DO.Find()
	return result.([]*models.SnmpV2Credential), err
}

func (s snmpV2CredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SnmpV2Credential, err error) {
	buf := make([]*models.SnmpV2Credential, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s snmpV2CredentialDo) FindInBatches(result *[]*models.SnmpV2Credential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s snmpV2CredentialDo) Attrs(attrs ...field.AssignExpr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s snmpV2CredentialDo) Assign(attrs ...field.AssignExpr) ISnmpV2CredentialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s snmpV2CredentialDo) Joins(fields ...field.RelationField) ISnmpV2CredentialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s snmpV2CredentialDo) Preload(fields ...field.RelationField) ISnmpV2CredentialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s snmpV2CredentialDo) FirstOrInit() (*models.SnmpV2Credential, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SnmpV2Credential), nil
	}
}

func (s snmpV2CredentialDo) FirstOrCreate() (*models.SnmpV2Credential, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SnmpV2Credential), nil
	}
}

func (s snmpV2CredentialDo) FindByPage(offset int, limit int) (result []*models.SnmpV2Credential, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s snmpV2CredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s snmpV2CredentialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s snmpV2CredentialDo) Delete(models ...*models.SnmpV2Credential) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *snmpV2CredentialDo) withDO(do gen.Dao) *snmpV2CredentialDo {
	s.DO = *do.(*gen.DO)
	return s
}

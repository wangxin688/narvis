// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTaskResult(db *gorm.DB, opts ...gen.DOOption) taskResult {
	_taskResult := taskResult{}

	_taskResult.taskResultDo.UseDB(db, opts...)
	_taskResult.taskResultDo.UseModel(&models.TaskResult{})

	tableName := _taskResult.taskResultDo.TableName()
	_taskResult.ALL = field.NewAsterisk(tableName)
	_taskResult.Id = field.NewString(tableName, "id")
	_taskResult.CreatedAt = field.NewTime(tableName, "createdAt")
	_taskResult.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_taskResult.Name = field.NewString(tableName, "name")
	_taskResult.Status = field.NewString(tableName, "status")
	_taskResult.SubTaskId = field.NewString(tableName, "subTaskId")
	_taskResult.Result = field.NewField(tableName, "result")
	_taskResult.ProxyId = field.NewString(tableName, "proxyId")
	_taskResult.OrganizationId = field.NewString(tableName, "organizationId")
	_taskResult.Proxy = taskResultBelongsToProxy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Proxy", "models.Proxy"),
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Proxy.Organization", "models.Organization"),
		},
	}

	_taskResult.Organization = taskResultBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_taskResult.fillFieldMap()

	return _taskResult
}

type taskResult struct {
	taskResultDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Name           field.String
	Status         field.String
	SubTaskId      field.String
	Result         field.Field
	ProxyId        field.String
	OrganizationId field.String
	Proxy          taskResultBelongsToProxy

	Organization taskResultBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (t taskResult) Table(newTableName string) *taskResult {
	t.taskResultDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskResult) As(alias string) *taskResult {
	t.taskResultDo.DO = *(t.taskResultDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskResult) updateTableName(table string) *taskResult {
	t.ALL = field.NewAsterisk(table)
	t.Id = field.NewString(table, "id")
	t.CreatedAt = field.NewTime(table, "createdAt")
	t.UpdatedAt = field.NewTime(table, "updatedAt")
	t.Name = field.NewString(table, "name")
	t.Status = field.NewString(table, "status")
	t.SubTaskId = field.NewString(table, "subTaskId")
	t.Result = field.NewField(table, "result")
	t.ProxyId = field.NewString(table, "proxyId")
	t.OrganizationId = field.NewString(table, "organizationId")

	t.fillFieldMap()

	return t
}

func (t *taskResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskResult) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["createdAt"] = t.CreatedAt
	t.fieldMap["updatedAt"] = t.UpdatedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["status"] = t.Status
	t.fieldMap["subTaskId"] = t.SubTaskId
	t.fieldMap["result"] = t.Result
	t.fieldMap["proxyId"] = t.ProxyId
	t.fieldMap["organizationId"] = t.OrganizationId

}

func (t taskResult) clone(db *gorm.DB) taskResult {
	t.taskResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskResult) replaceDB(db *gorm.DB) taskResult {
	t.taskResultDo.ReplaceDB(db)
	return t
}

type taskResultBelongsToProxy struct {
	db *gorm.DB

	field.RelationField

	Organization struct {
		field.RelationField
	}
}

func (a taskResultBelongsToProxy) Where(conds ...field.Expr) *taskResultBelongsToProxy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskResultBelongsToProxy) WithContext(ctx context.Context) *taskResultBelongsToProxy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskResultBelongsToProxy) Session(session *gorm.Session) *taskResultBelongsToProxy {
	a.db = a.db.Session(session)
	return &a
}

func (a taskResultBelongsToProxy) Model(m *models.TaskResult) *taskResultBelongsToProxyTx {
	return &taskResultBelongsToProxyTx{a.db.Model(m).Association(a.Name())}
}

type taskResultBelongsToProxyTx struct{ tx *gorm.Association }

func (a taskResultBelongsToProxyTx) Find() (result *models.Proxy, err error) {
	return result, a.tx.Find(&result)
}

func (a taskResultBelongsToProxyTx) Append(values ...*models.Proxy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskResultBelongsToProxyTx) Replace(values ...*models.Proxy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskResultBelongsToProxyTx) Delete(values ...*models.Proxy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskResultBelongsToProxyTx) Clear() error {
	return a.tx.Clear()
}

func (a taskResultBelongsToProxyTx) Count() int64 {
	return a.tx.Count()
}

type taskResultBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a taskResultBelongsToOrganization) Where(conds ...field.Expr) *taskResultBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskResultBelongsToOrganization) WithContext(ctx context.Context) *taskResultBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskResultBelongsToOrganization) Session(session *gorm.Session) *taskResultBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a taskResultBelongsToOrganization) Model(m *models.TaskResult) *taskResultBelongsToOrganizationTx {
	return &taskResultBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type taskResultBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a taskResultBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a taskResultBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskResultBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskResultBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskResultBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a taskResultBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type taskResultDo struct{ gen.DO }

type ITaskResultDo interface {
	gen.SubQuery
	Debug() ITaskResultDo
	WithContext(ctx context.Context) ITaskResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskResultDo
	WriteDB() ITaskResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskResultDo
	Not(conds ...gen.Condition) ITaskResultDo
	Or(conds ...gen.Condition) ITaskResultDo
	Select(conds ...field.Expr) ITaskResultDo
	Where(conds ...gen.Condition) ITaskResultDo
	Order(conds ...field.Expr) ITaskResultDo
	Distinct(cols ...field.Expr) ITaskResultDo
	Omit(cols ...field.Expr) ITaskResultDo
	Join(table schema.Tabler, on ...field.Expr) ITaskResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskResultDo
	Group(cols ...field.Expr) ITaskResultDo
	Having(conds ...gen.Condition) ITaskResultDo
	Limit(limit int) ITaskResultDo
	Offset(offset int) ITaskResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskResultDo
	Unscoped() ITaskResultDo
	Create(values ...*models.TaskResult) error
	CreateInBatches(values []*models.TaskResult, batchSize int) error
	Save(values ...*models.TaskResult) error
	First() (*models.TaskResult, error)
	Take() (*models.TaskResult, error)
	Last() (*models.TaskResult, error)
	Find() ([]*models.TaskResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TaskResult, err error)
	FindInBatches(result *[]*models.TaskResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TaskResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskResultDo
	Assign(attrs ...field.AssignExpr) ITaskResultDo
	Joins(fields ...field.RelationField) ITaskResultDo
	Preload(fields ...field.RelationField) ITaskResultDo
	FirstOrInit() (*models.TaskResult, error)
	FirstOrCreate() (*models.TaskResult, error)
	FindByPage(offset int, limit int) (result []*models.TaskResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskResultDo) Debug() ITaskResultDo {
	return t.withDO(t.DO.Debug())
}

func (t taskResultDo) WithContext(ctx context.Context) ITaskResultDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskResultDo) ReadDB() ITaskResultDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskResultDo) WriteDB() ITaskResultDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskResultDo) Session(config *gorm.Session) ITaskResultDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskResultDo) Clauses(conds ...clause.Expression) ITaskResultDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskResultDo) Returning(value interface{}, columns ...string) ITaskResultDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskResultDo) Not(conds ...gen.Condition) ITaskResultDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskResultDo) Or(conds ...gen.Condition) ITaskResultDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskResultDo) Select(conds ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskResultDo) Where(conds ...gen.Condition) ITaskResultDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskResultDo) Order(conds ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskResultDo) Distinct(cols ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskResultDo) Omit(cols ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskResultDo) Join(table schema.Tabler, on ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskResultDo) Group(cols ...field.Expr) ITaskResultDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskResultDo) Having(conds ...gen.Condition) ITaskResultDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskResultDo) Limit(limit int) ITaskResultDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskResultDo) Offset(offset int) ITaskResultDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskResultDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskResultDo) Unscoped() ITaskResultDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskResultDo) Create(values ...*models.TaskResult) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskResultDo) CreateInBatches(values []*models.TaskResult, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskResultDo) Save(values ...*models.TaskResult) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskResultDo) First() (*models.TaskResult, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TaskResult), nil
	}
}

func (t taskResultDo) Take() (*models.TaskResult, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TaskResult), nil
	}
}

func (t taskResultDo) Last() (*models.TaskResult, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TaskResult), nil
	}
}

func (t taskResultDo) Find() ([]*models.TaskResult, error) {
	result, err := t.DO.Find()
	return result.([]*models.TaskResult), err
}

func (t taskResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TaskResult, err error) {
	buf := make([]*models.TaskResult, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskResultDo) FindInBatches(result *[]*models.TaskResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskResultDo) Attrs(attrs ...field.AssignExpr) ITaskResultDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskResultDo) Assign(attrs ...field.AssignExpr) ITaskResultDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskResultDo) Joins(fields ...field.RelationField) ITaskResultDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskResultDo) Preload(fields ...field.RelationField) ITaskResultDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskResultDo) FirstOrInit() (*models.TaskResult, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TaskResult), nil
	}
}

func (t taskResultDo) FirstOrCreate() (*models.TaskResult, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TaskResult), nil
	}
}

func (t taskResultDo) FindByPage(offset int, limit int) (result []*models.TaskResult, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskResultDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskResultDo) Delete(models ...*models.TaskResult) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskResultDo) withDO(do gen.Dao) *taskResultDo {
	t.DO = *do.(*gen.DO)
	return t
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSubscription(db *gorm.DB, opts ...gen.DOOption) subscription {
	_subscription := subscription{}

	_subscription.subscriptionDo.UseDB(db, opts...)
	_subscription.subscriptionDo.UseModel(&models.Subscription{})

	tableName := _subscription.subscriptionDo.TableName()
	_subscription.ALL = field.NewAsterisk(tableName)
	_subscription.Id = field.NewString(tableName, "id")
	_subscription.CreatedAt = field.NewTime(tableName, "created_at")
	_subscription.UpdatedAt = field.NewTime(tableName, "updated_at")
	_subscription.Name = field.NewString(tableName, "name")
	_subscription.Enabled = field.NewBool(tableName, "enabled")
	_subscription.Deduplication = field.NewBool(tableName, "deduplication")
	_subscription.Conditions = field.NewField(tableName, "conditions")
	_subscription.SendResolved = field.NewBool(tableName, "send_resolved")
	_subscription.RepeatInterval = field.NewInt(tableName, "repeat_interval")
	_subscription.ChannelType = field.NewUint8(tableName, "channel_type")
	_subscription.ChannelConfig = field.NewField(tableName, "channel_config")
	_subscription.CreatedById = field.NewString(tableName, "created_by_id")
	_subscription.OrganizationId = field.NewString(tableName, "organization_id")
	_subscription.CreatedBy = subscriptionBelongsToCreatedBy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreatedBy", "models.User"),
		Group: struct {
			field.RelationField
			Role struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("CreatedBy.Group", "models.Group"),
			Role: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("CreatedBy.Group.Role", "models.Role"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("CreatedBy.Group.Role.Organization", "models.Organization"),
				},
				Menus: struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("CreatedBy.Group.Role.Menus", "models.Menu"),
					Parent: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("CreatedBy.Group.Role.Menus.Parent", "models.Menu"),
					},
					Permission: struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("CreatedBy.Group.Role.Menus.Permission", "models.Permission"),
						Menu: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("CreatedBy.Group.Role.Menus.Permission.Menu", "models.Menu"),
						},
					},
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("CreatedBy.Group.Organization", "models.Organization"),
			},
		},
		Role: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreatedBy.Role", "models.Role"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("CreatedBy.Organization", "models.Organization"),
		},
	}

	_subscription.Organization = subscriptionBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_subscription.fillFieldMap()

	return _subscription
}

type subscription struct {
	subscriptionDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Name           field.String
	Enabled        field.Bool
	Deduplication  field.Bool
	Conditions     field.Field
	SendResolved   field.Bool
	RepeatInterval field.Int
	ChannelType    field.Uint8
	ChannelConfig  field.Field
	CreatedById    field.String
	OrganizationId field.String
	CreatedBy      subscriptionBelongsToCreatedBy

	Organization subscriptionBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (s subscription) Table(newTableName string) *subscription {
	s.subscriptionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscription) As(alias string) *subscription {
	s.subscriptionDo.DO = *(s.subscriptionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscription) updateTableName(table string) *subscription {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.Enabled = field.NewBool(table, "enabled")
	s.Deduplication = field.NewBool(table, "deduplication")
	s.Conditions = field.NewField(table, "conditions")
	s.SendResolved = field.NewBool(table, "send_resolved")
	s.RepeatInterval = field.NewInt(table, "repeat_interval")
	s.ChannelType = field.NewUint8(table, "channel_type")
	s.ChannelConfig = field.NewField(table, "channel_config")
	s.CreatedById = field.NewString(table, "created_by_id")
	s.OrganizationId = field.NewString(table, "organization_id")

	s.fillFieldMap()

	return s
}

func (s *subscription) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscription) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["id"] = s.Id
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["enabled"] = s.Enabled
	s.fieldMap["deduplication"] = s.Deduplication
	s.fieldMap["conditions"] = s.Conditions
	s.fieldMap["send_resolved"] = s.SendResolved
	s.fieldMap["repeat_interval"] = s.RepeatInterval
	s.fieldMap["channel_type"] = s.ChannelType
	s.fieldMap["channel_config"] = s.ChannelConfig
	s.fieldMap["created_by_id"] = s.CreatedById
	s.fieldMap["organization_id"] = s.OrganizationId

}

func (s subscription) clone(db *gorm.DB) subscription {
	s.subscriptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscription) replaceDB(db *gorm.DB) subscription {
	s.subscriptionDo.ReplaceDB(db)
	return s
}

type subscriptionBelongsToCreatedBy struct {
	db *gorm.DB

	field.RelationField

	Group struct {
		field.RelationField
		Role struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
			Menus struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Permission struct {
					field.RelationField
					Menu struct {
						field.RelationField
					}
				}
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Role struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a subscriptionBelongsToCreatedBy) Where(conds ...field.Expr) *subscriptionBelongsToCreatedBy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a subscriptionBelongsToCreatedBy) WithContext(ctx context.Context) *subscriptionBelongsToCreatedBy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a subscriptionBelongsToCreatedBy) Session(session *gorm.Session) *subscriptionBelongsToCreatedBy {
	a.db = a.db.Session(session)
	return &a
}

func (a subscriptionBelongsToCreatedBy) Model(m *models.Subscription) *subscriptionBelongsToCreatedByTx {
	return &subscriptionBelongsToCreatedByTx{a.db.Model(m).Association(a.Name())}
}

type subscriptionBelongsToCreatedByTx struct{ tx *gorm.Association }

func (a subscriptionBelongsToCreatedByTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a subscriptionBelongsToCreatedByTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a subscriptionBelongsToCreatedByTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a subscriptionBelongsToCreatedByTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a subscriptionBelongsToCreatedByTx) Clear() error {
	return a.tx.Clear()
}

func (a subscriptionBelongsToCreatedByTx) Count() int64 {
	return a.tx.Count()
}

type subscriptionBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a subscriptionBelongsToOrganization) Where(conds ...field.Expr) *subscriptionBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a subscriptionBelongsToOrganization) WithContext(ctx context.Context) *subscriptionBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a subscriptionBelongsToOrganization) Session(session *gorm.Session) *subscriptionBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a subscriptionBelongsToOrganization) Model(m *models.Subscription) *subscriptionBelongsToOrganizationTx {
	return &subscriptionBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type subscriptionBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a subscriptionBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a subscriptionBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a subscriptionBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a subscriptionBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a subscriptionBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a subscriptionBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type subscriptionDo struct{ gen.DO }

type ISubscriptionDo interface {
	gen.SubQuery
	Debug() ISubscriptionDo
	WithContext(ctx context.Context) ISubscriptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubscriptionDo
	WriteDB() ISubscriptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubscriptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubscriptionDo
	Not(conds ...gen.Condition) ISubscriptionDo
	Or(conds ...gen.Condition) ISubscriptionDo
	Select(conds ...field.Expr) ISubscriptionDo
	Where(conds ...gen.Condition) ISubscriptionDo
	Order(conds ...field.Expr) ISubscriptionDo
	Distinct(cols ...field.Expr) ISubscriptionDo
	Omit(cols ...field.Expr) ISubscriptionDo
	Join(table schema.Tabler, on ...field.Expr) ISubscriptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubscriptionDo
	Group(cols ...field.Expr) ISubscriptionDo
	Having(conds ...gen.Condition) ISubscriptionDo
	Limit(limit int) ISubscriptionDo
	Offset(offset int) ISubscriptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriptionDo
	Unscoped() ISubscriptionDo
	Create(values ...*models.Subscription) error
	CreateInBatches(values []*models.Subscription, batchSize int) error
	Save(values ...*models.Subscription) error
	First() (*models.Subscription, error)
	Take() (*models.Subscription, error)
	Last() (*models.Subscription, error)
	Find() ([]*models.Subscription, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Subscription, err error)
	FindInBatches(result *[]*models.Subscription, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Subscription) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubscriptionDo
	Assign(attrs ...field.AssignExpr) ISubscriptionDo
	Joins(fields ...field.RelationField) ISubscriptionDo
	Preload(fields ...field.RelationField) ISubscriptionDo
	FirstOrInit() (*models.Subscription, error)
	FirstOrCreate() (*models.Subscription, error)
	FindByPage(offset int, limit int) (result []*models.Subscription, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubscriptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subscriptionDo) Debug() ISubscriptionDo {
	return s.withDO(s.DO.Debug())
}

func (s subscriptionDo) WithContext(ctx context.Context) ISubscriptionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscriptionDo) ReadDB() ISubscriptionDo {
	return s.Clauses(dbresolver.Read)
}

func (s subscriptionDo) WriteDB() ISubscriptionDo {
	return s.Clauses(dbresolver.Write)
}

func (s subscriptionDo) Session(config *gorm.Session) ISubscriptionDo {
	return s.withDO(s.DO.Session(config))
}

func (s subscriptionDo) Clauses(conds ...clause.Expression) ISubscriptionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscriptionDo) Returning(value interface{}, columns ...string) ISubscriptionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscriptionDo) Not(conds ...gen.Condition) ISubscriptionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscriptionDo) Or(conds ...gen.Condition) ISubscriptionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscriptionDo) Select(conds ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscriptionDo) Where(conds ...gen.Condition) ISubscriptionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscriptionDo) Order(conds ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscriptionDo) Distinct(cols ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscriptionDo) Omit(cols ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscriptionDo) Join(table schema.Tabler, on ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscriptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscriptionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscriptionDo) Group(cols ...field.Expr) ISubscriptionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscriptionDo) Having(conds ...gen.Condition) ISubscriptionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscriptionDo) Limit(limit int) ISubscriptionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscriptionDo) Offset(offset int) ISubscriptionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscriptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriptionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscriptionDo) Unscoped() ISubscriptionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscriptionDo) Create(values ...*models.Subscription) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscriptionDo) CreateInBatches(values []*models.Subscription, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscriptionDo) Save(values ...*models.Subscription) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscriptionDo) First() (*models.Subscription, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Subscription), nil
	}
}

func (s subscriptionDo) Take() (*models.Subscription, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Subscription), nil
	}
}

func (s subscriptionDo) Last() (*models.Subscription, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Subscription), nil
	}
}

func (s subscriptionDo) Find() ([]*models.Subscription, error) {
	result, err := s.DO.Find()
	return result.([]*models.Subscription), err
}

func (s subscriptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Subscription, err error) {
	buf := make([]*models.Subscription, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscriptionDo) FindInBatches(result *[]*models.Subscription, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscriptionDo) Attrs(attrs ...field.AssignExpr) ISubscriptionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscriptionDo) Assign(attrs ...field.AssignExpr) ISubscriptionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscriptionDo) Joins(fields ...field.RelationField) ISubscriptionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscriptionDo) Preload(fields ...field.RelationField) ISubscriptionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscriptionDo) FirstOrInit() (*models.Subscription, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Subscription), nil
	}
}

func (s subscriptionDo) FirstOrCreate() (*models.Subscription, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Subscription), nil
	}
}

func (s subscriptionDo) FindByPage(offset int, limit int) (result []*models.Subscription, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscriptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscriptionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscriptionDo) Delete(models ...*models.Subscription) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscriptionDo) withDO(do gen.Dao) *subscriptionDo {
	s.DO = *do.(*gen.DO)
	return s
}

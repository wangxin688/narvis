// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDeviceCliCredential(db *gorm.DB, opts ...gen.DOOption) deviceCliCredential {
	_deviceCliCredential := deviceCliCredential{}

	_deviceCliCredential.deviceCliCredentialDo.UseDB(db, opts...)
	_deviceCliCredential.deviceCliCredentialDo.UseModel(&models.DeviceCliCredential{})

	tableName := _deviceCliCredential.deviceCliCredentialDo.TableName()
	_deviceCliCredential.ALL = field.NewAsterisk(tableName)
	_deviceCliCredential.Id = field.NewString(tableName, "id")
	_deviceCliCredential.CreatedAt = field.NewTime(tableName, "createdAt")
	_deviceCliCredential.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_deviceCliCredential.Username = field.NewString(tableName, "username")
	_deviceCliCredential.Password = field.NewString(tableName, "password")
	_deviceCliCredential.Port = field.NewUint16(tableName, "port")
	_deviceCliCredential.DeviceId = field.NewString(tableName, "deviceId")
	_deviceCliCredential.OrganizationId = field.NewString(tableName, "organizationId")
	_deviceCliCredential.Device = deviceCliCredentialBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "models.Device"),
		Rack: struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Device.Rack", "models.Rack"),
			Location: struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Device.Rack.Location", "models.Location"),
				Parent: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Parent", "models.Location"),
				},
				Site: struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Site", "models.Site"),
					Organization: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Device.Rack.Location.Site.Organization", "models.Organization"),
					},
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Organization", "models.Organization"),
				},
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Organization", "models.Organization"),
			},
		},
		Template: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Template", "models.Template"),
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Organization", "models.Organization"),
		},
	}

	_deviceCliCredential.Organization = deviceCliCredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_deviceCliCredential.fillFieldMap()

	return _deviceCliCredential
}

type deviceCliCredential struct {
	deviceCliCredentialDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Username       field.String
	Password       field.String
	Port           field.Uint16
	DeviceId       field.String
	OrganizationId field.String
	Device         deviceCliCredentialBelongsToDevice

	Organization deviceCliCredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (d deviceCliCredential) Table(newTableName string) *deviceCliCredential {
	d.deviceCliCredentialDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceCliCredential) As(alias string) *deviceCliCredential {
	d.deviceCliCredentialDo.DO = *(d.deviceCliCredentialDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceCliCredential) updateTableName(table string) *deviceCliCredential {
	d.ALL = field.NewAsterisk(table)
	d.Id = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "createdAt")
	d.UpdatedAt = field.NewTime(table, "updatedAt")
	d.Username = field.NewString(table, "username")
	d.Password = field.NewString(table, "password")
	d.Port = field.NewUint16(table, "port")
	d.DeviceId = field.NewString(table, "deviceId")
	d.OrganizationId = field.NewString(table, "organizationId")

	d.fillFieldMap()

	return d
}

func (d *deviceCliCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceCliCredential) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.Id
	d.fieldMap["createdAt"] = d.CreatedAt
	d.fieldMap["updatedAt"] = d.UpdatedAt
	d.fieldMap["username"] = d.Username
	d.fieldMap["password"] = d.Password
	d.fieldMap["port"] = d.Port
	d.fieldMap["deviceId"] = d.DeviceId
	d.fieldMap["organizationId"] = d.OrganizationId

}

func (d deviceCliCredential) clone(db *gorm.DB) deviceCliCredential {
	d.deviceCliCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceCliCredential) replaceDB(db *gorm.DB) deviceCliCredential {
	d.deviceCliCredentialDo.ReplaceDB(db)
	return d
}

type deviceCliCredentialBelongsToDevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Location struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Template struct {
		field.RelationField
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a deviceCliCredentialBelongsToDevice) Where(conds ...field.Expr) *deviceCliCredentialBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deviceCliCredentialBelongsToDevice) WithContext(ctx context.Context) *deviceCliCredentialBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deviceCliCredentialBelongsToDevice) Session(session *gorm.Session) *deviceCliCredentialBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a deviceCliCredentialBelongsToDevice) Model(m *models.DeviceCliCredential) *deviceCliCredentialBelongsToDeviceTx {
	return &deviceCliCredentialBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

type deviceCliCredentialBelongsToDeviceTx struct{ tx *gorm.Association }

func (a deviceCliCredentialBelongsToDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a deviceCliCredentialBelongsToDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deviceCliCredentialBelongsToDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deviceCliCredentialBelongsToDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deviceCliCredentialBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a deviceCliCredentialBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

type deviceCliCredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a deviceCliCredentialBelongsToOrganization) Where(conds ...field.Expr) *deviceCliCredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deviceCliCredentialBelongsToOrganization) WithContext(ctx context.Context) *deviceCliCredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deviceCliCredentialBelongsToOrganization) Session(session *gorm.Session) *deviceCliCredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a deviceCliCredentialBelongsToOrganization) Model(m *models.DeviceCliCredential) *deviceCliCredentialBelongsToOrganizationTx {
	return &deviceCliCredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type deviceCliCredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a deviceCliCredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a deviceCliCredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deviceCliCredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deviceCliCredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deviceCliCredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a deviceCliCredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type deviceCliCredentialDo struct{ gen.DO }

type IDeviceCliCredentialDo interface {
	gen.SubQuery
	Debug() IDeviceCliCredentialDo
	WithContext(ctx context.Context) IDeviceCliCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceCliCredentialDo
	WriteDB() IDeviceCliCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceCliCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceCliCredentialDo
	Not(conds ...gen.Condition) IDeviceCliCredentialDo
	Or(conds ...gen.Condition) IDeviceCliCredentialDo
	Select(conds ...field.Expr) IDeviceCliCredentialDo
	Where(conds ...gen.Condition) IDeviceCliCredentialDo
	Order(conds ...field.Expr) IDeviceCliCredentialDo
	Distinct(cols ...field.Expr) IDeviceCliCredentialDo
	Omit(cols ...field.Expr) IDeviceCliCredentialDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceCliCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceCliCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceCliCredentialDo
	Group(cols ...field.Expr) IDeviceCliCredentialDo
	Having(conds ...gen.Condition) IDeviceCliCredentialDo
	Limit(limit int) IDeviceCliCredentialDo
	Offset(offset int) IDeviceCliCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceCliCredentialDo
	Unscoped() IDeviceCliCredentialDo
	Create(values ...*models.DeviceCliCredential) error
	CreateInBatches(values []*models.DeviceCliCredential, batchSize int) error
	Save(values ...*models.DeviceCliCredential) error
	First() (*models.DeviceCliCredential, error)
	Take() (*models.DeviceCliCredential, error)
	Last() (*models.DeviceCliCredential, error)
	Find() ([]*models.DeviceCliCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DeviceCliCredential, err error)
	FindInBatches(result *[]*models.DeviceCliCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DeviceCliCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceCliCredentialDo
	Assign(attrs ...field.AssignExpr) IDeviceCliCredentialDo
	Joins(fields ...field.RelationField) IDeviceCliCredentialDo
	Preload(fields ...field.RelationField) IDeviceCliCredentialDo
	FirstOrInit() (*models.DeviceCliCredential, error)
	FirstOrCreate() (*models.DeviceCliCredential, error)
	FindByPage(offset int, limit int) (result []*models.DeviceCliCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceCliCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceCliCredentialDo) Debug() IDeviceCliCredentialDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceCliCredentialDo) WithContext(ctx context.Context) IDeviceCliCredentialDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceCliCredentialDo) ReadDB() IDeviceCliCredentialDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceCliCredentialDo) WriteDB() IDeviceCliCredentialDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceCliCredentialDo) Session(config *gorm.Session) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceCliCredentialDo) Clauses(conds ...clause.Expression) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceCliCredentialDo) Returning(value interface{}, columns ...string) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceCliCredentialDo) Not(conds ...gen.Condition) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceCliCredentialDo) Or(conds ...gen.Condition) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceCliCredentialDo) Select(conds ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceCliCredentialDo) Where(conds ...gen.Condition) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceCliCredentialDo) Order(conds ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceCliCredentialDo) Distinct(cols ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceCliCredentialDo) Omit(cols ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceCliCredentialDo) Join(table schema.Tabler, on ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceCliCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceCliCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceCliCredentialDo) Group(cols ...field.Expr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceCliCredentialDo) Having(conds ...gen.Condition) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceCliCredentialDo) Limit(limit int) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceCliCredentialDo) Offset(offset int) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceCliCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceCliCredentialDo) Unscoped() IDeviceCliCredentialDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceCliCredentialDo) Create(values ...*models.DeviceCliCredential) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceCliCredentialDo) CreateInBatches(values []*models.DeviceCliCredential, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceCliCredentialDo) Save(values ...*models.DeviceCliCredential) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceCliCredentialDo) First() (*models.DeviceCliCredential, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceCliCredential), nil
	}
}

func (d deviceCliCredentialDo) Take() (*models.DeviceCliCredential, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceCliCredential), nil
	}
}

func (d deviceCliCredentialDo) Last() (*models.DeviceCliCredential, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceCliCredential), nil
	}
}

func (d deviceCliCredentialDo) Find() ([]*models.DeviceCliCredential, error) {
	result, err := d.DO.Find()
	return result.([]*models.DeviceCliCredential), err
}

func (d deviceCliCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DeviceCliCredential, err error) {
	buf := make([]*models.DeviceCliCredential, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceCliCredentialDo) FindInBatches(result *[]*models.DeviceCliCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceCliCredentialDo) Attrs(attrs ...field.AssignExpr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceCliCredentialDo) Assign(attrs ...field.AssignExpr) IDeviceCliCredentialDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceCliCredentialDo) Joins(fields ...field.RelationField) IDeviceCliCredentialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceCliCredentialDo) Preload(fields ...field.RelationField) IDeviceCliCredentialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceCliCredentialDo) FirstOrInit() (*models.DeviceCliCredential, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceCliCredential), nil
	}
}

func (d deviceCliCredentialDo) FirstOrCreate() (*models.DeviceCliCredential, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceCliCredential), nil
	}
}

func (d deviceCliCredentialDo) FindByPage(offset int, limit int) (result []*models.DeviceCliCredential, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceCliCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceCliCredentialDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceCliCredentialDo) Delete(models ...*models.DeviceCliCredential) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceCliCredentialDo) withDO(do gen.Dao) *deviceCliCredentialDo {
	d.DO = *do.(*gen.DO)
	return d
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMacAddress(db *gorm.DB, opts ...gen.DOOption) macAddress {
	_macAddress := macAddress{}

	_macAddress.macAddressDo.UseDB(db, opts...)
	_macAddress.macAddressDo.UseModel(&models.MacAddress{})

	tableName := _macAddress.macAddressDo.TableName()
	_macAddress.ALL = field.NewAsterisk(tableName)
	_macAddress.ID = field.NewString(tableName, "id")
	_macAddress.MacOUI = field.NewString(tableName, "mac_oui")
	_macAddress.ShortName = field.NewString(tableName, "short_name")
	_macAddress.LongName = field.NewString(tableName, "long_name")

	_macAddress.fillFieldMap()

	return _macAddress
}

type macAddress struct {
	macAddressDo

	ALL       field.Asterisk
	ID        field.String
	MacOUI    field.String
	ShortName field.String
	LongName  field.String

	fieldMap map[string]field.Expr
}

func (m macAddress) Table(newTableName string) *macAddress {
	m.macAddressDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m macAddress) As(alias string) *macAddress {
	m.macAddressDo.DO = *(m.macAddressDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *macAddress) updateTableName(table string) *macAddress {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.MacOUI = field.NewString(table, "mac_oui")
	m.ShortName = field.NewString(table, "short_name")
	m.LongName = field.NewString(table, "long_name")

	m.fillFieldMap()

	return m
}

func (m *macAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *macAddress) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["mac_oui"] = m.MacOUI
	m.fieldMap["short_name"] = m.ShortName
	m.fieldMap["long_name"] = m.LongName
}

func (m macAddress) clone(db *gorm.DB) macAddress {
	m.macAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m macAddress) replaceDB(db *gorm.DB) macAddress {
	m.macAddressDo.ReplaceDB(db)
	return m
}

type macAddressDo struct{ gen.DO }

type IMacAddressDo interface {
	gen.SubQuery
	Debug() IMacAddressDo
	WithContext(ctx context.Context) IMacAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMacAddressDo
	WriteDB() IMacAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMacAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMacAddressDo
	Not(conds ...gen.Condition) IMacAddressDo
	Or(conds ...gen.Condition) IMacAddressDo
	Select(conds ...field.Expr) IMacAddressDo
	Where(conds ...gen.Condition) IMacAddressDo
	Order(conds ...field.Expr) IMacAddressDo
	Distinct(cols ...field.Expr) IMacAddressDo
	Omit(cols ...field.Expr) IMacAddressDo
	Join(table schema.Tabler, on ...field.Expr) IMacAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMacAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMacAddressDo
	Group(cols ...field.Expr) IMacAddressDo
	Having(conds ...gen.Condition) IMacAddressDo
	Limit(limit int) IMacAddressDo
	Offset(offset int) IMacAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMacAddressDo
	Unscoped() IMacAddressDo
	Create(values ...*models.MacAddress) error
	CreateInBatches(values []*models.MacAddress, batchSize int) error
	Save(values ...*models.MacAddress) error
	First() (*models.MacAddress, error)
	Take() (*models.MacAddress, error)
	Last() (*models.MacAddress, error)
	Find() ([]*models.MacAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MacAddress, err error)
	FindInBatches(result *[]*models.MacAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MacAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMacAddressDo
	Assign(attrs ...field.AssignExpr) IMacAddressDo
	Joins(fields ...field.RelationField) IMacAddressDo
	Preload(fields ...field.RelationField) IMacAddressDo
	FirstOrInit() (*models.MacAddress, error)
	FirstOrCreate() (*models.MacAddress, error)
	FindByPage(offset int, limit int) (result []*models.MacAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMacAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m macAddressDo) Debug() IMacAddressDo {
	return m.withDO(m.DO.Debug())
}

func (m macAddressDo) WithContext(ctx context.Context) IMacAddressDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m macAddressDo) ReadDB() IMacAddressDo {
	return m.Clauses(dbresolver.Read)
}

func (m macAddressDo) WriteDB() IMacAddressDo {
	return m.Clauses(dbresolver.Write)
}

func (m macAddressDo) Session(config *gorm.Session) IMacAddressDo {
	return m.withDO(m.DO.Session(config))
}

func (m macAddressDo) Clauses(conds ...clause.Expression) IMacAddressDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m macAddressDo) Returning(value interface{}, columns ...string) IMacAddressDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m macAddressDo) Not(conds ...gen.Condition) IMacAddressDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m macAddressDo) Or(conds ...gen.Condition) IMacAddressDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m macAddressDo) Select(conds ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m macAddressDo) Where(conds ...gen.Condition) IMacAddressDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m macAddressDo) Order(conds ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m macAddressDo) Distinct(cols ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m macAddressDo) Omit(cols ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m macAddressDo) Join(table schema.Tabler, on ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m macAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m macAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m macAddressDo) Group(cols ...field.Expr) IMacAddressDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m macAddressDo) Having(conds ...gen.Condition) IMacAddressDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m macAddressDo) Limit(limit int) IMacAddressDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m macAddressDo) Offset(offset int) IMacAddressDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m macAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMacAddressDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m macAddressDo) Unscoped() IMacAddressDo {
	return m.withDO(m.DO.Unscoped())
}

func (m macAddressDo) Create(values ...*models.MacAddress) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m macAddressDo) CreateInBatches(values []*models.MacAddress, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m macAddressDo) Save(values ...*models.MacAddress) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m macAddressDo) First() (*models.MacAddress, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MacAddress), nil
	}
}

func (m macAddressDo) Take() (*models.MacAddress, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MacAddress), nil
	}
}

func (m macAddressDo) Last() (*models.MacAddress, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MacAddress), nil
	}
}

func (m macAddressDo) Find() ([]*models.MacAddress, error) {
	result, err := m.DO.Find()
	return result.([]*models.MacAddress), err
}

func (m macAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MacAddress, err error) {
	buf := make([]*models.MacAddress, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m macAddressDo) FindInBatches(result *[]*models.MacAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m macAddressDo) Attrs(attrs ...field.AssignExpr) IMacAddressDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m macAddressDo) Assign(attrs ...field.AssignExpr) IMacAddressDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m macAddressDo) Joins(fields ...field.RelationField) IMacAddressDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m macAddressDo) Preload(fields ...field.RelationField) IMacAddressDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m macAddressDo) FirstOrInit() (*models.MacAddress, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MacAddress), nil
	}
}

func (m macAddressDo) FirstOrCreate() (*models.MacAddress, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MacAddress), nil
	}
}

func (m macAddressDo) FindByPage(offset int, limit int) (result []*models.MacAddress, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m macAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m macAddressDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m macAddressDo) Delete(models ...*models.MacAddress) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *macAddressDo) withDO(do gen.Dao) *macAddressDo {
	m.DO = *do.(*gen.DO)
	return m
}

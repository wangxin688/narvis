// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDeviceSnmpV2Credential(db *gorm.DB, opts ...gen.DOOption) deviceSnmpV2Credential {
	_deviceSnmpV2Credential := deviceSnmpV2Credential{}

	_deviceSnmpV2Credential.deviceSnmpV2CredentialDo.UseDB(db, opts...)
	_deviceSnmpV2Credential.deviceSnmpV2CredentialDo.UseModel(&models.DeviceSnmpV2Credential{})

	tableName := _deviceSnmpV2Credential.deviceSnmpV2CredentialDo.TableName()
	_deviceSnmpV2Credential.ALL = field.NewAsterisk(tableName)
	_deviceSnmpV2Credential.ID = field.NewString(tableName, "id")
	_deviceSnmpV2Credential.CreatedAt = field.NewTime(tableName, "created_at")
	_deviceSnmpV2Credential.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deviceSnmpV2Credential.Community = field.NewString(tableName, "community")
	_deviceSnmpV2Credential.MaxRepetitions = field.NewUint8(tableName, "max_repetitions")
	_deviceSnmpV2Credential.Timeout = field.NewUint8(tableName, "timeout")
	_deviceSnmpV2Credential.DeviceID = field.NewString(tableName, "device_id")
	_deviceSnmpV2Credential.OrganizationID = field.NewString(tableName, "organization_id")
	_deviceSnmpV2Credential.Device = deviceSnmpV2CredentialBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "models.Device"),
		Rack: struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Device.Rack", "models.Rack"),
			Location: struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Device.Rack.Location", "models.Location"),
				Parent: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Parent", "models.Location"),
				},
				Site: struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Site", "models.Site"),
					Organization: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Device.Rack.Location.Site.Organization", "models.Organization"),
					},
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Organization", "models.Organization"),
				},
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Organization", "models.Organization"),
			},
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Organization", "models.Organization"),
		},
	}

	_deviceSnmpV2Credential.Organization = deviceSnmpV2CredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_deviceSnmpV2Credential.fillFieldMap()

	return _deviceSnmpV2Credential
}

type deviceSnmpV2Credential struct {
	deviceSnmpV2CredentialDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Community      field.String
	MaxRepetitions field.Uint8
	Timeout        field.Uint8
	DeviceID       field.String
	OrganizationID field.String
	Device         deviceSnmpV2CredentialBelongsToDevice

	Organization deviceSnmpV2CredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (d deviceSnmpV2Credential) Table(newTableName string) *deviceSnmpV2Credential {
	d.deviceSnmpV2CredentialDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceSnmpV2Credential) As(alias string) *deviceSnmpV2Credential {
	d.deviceSnmpV2CredentialDo.DO = *(d.deviceSnmpV2CredentialDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceSnmpV2Credential) updateTableName(table string) *deviceSnmpV2Credential {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Community = field.NewString(table, "community")
	d.MaxRepetitions = field.NewUint8(table, "max_repetitions")
	d.Timeout = field.NewUint8(table, "timeout")
	d.DeviceID = field.NewString(table, "device_id")
	d.OrganizationID = field.NewString(table, "organization_id")

	d.fillFieldMap()

	return d
}

func (d *deviceSnmpV2Credential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceSnmpV2Credential) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["community"] = d.Community
	d.fieldMap["max_repetitions"] = d.MaxRepetitions
	d.fieldMap["timeout"] = d.Timeout
	d.fieldMap["device_id"] = d.DeviceID
	d.fieldMap["organization_id"] = d.OrganizationID

}

func (d deviceSnmpV2Credential) clone(db *gorm.DB) deviceSnmpV2Credential {
	d.deviceSnmpV2CredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceSnmpV2Credential) replaceDB(db *gorm.DB) deviceSnmpV2Credential {
	d.deviceSnmpV2CredentialDo.ReplaceDB(db)
	return d
}

type deviceSnmpV2CredentialBelongsToDevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Location struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a deviceSnmpV2CredentialBelongsToDevice) Where(conds ...field.Expr) *deviceSnmpV2CredentialBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deviceSnmpV2CredentialBelongsToDevice) WithContext(ctx context.Context) *deviceSnmpV2CredentialBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deviceSnmpV2CredentialBelongsToDevice) Session(session *gorm.Session) *deviceSnmpV2CredentialBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a deviceSnmpV2CredentialBelongsToDevice) Model(m *models.DeviceSnmpV2Credential) *deviceSnmpV2CredentialBelongsToDeviceTx {
	return &deviceSnmpV2CredentialBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

type deviceSnmpV2CredentialBelongsToDeviceTx struct{ tx *gorm.Association }

func (a deviceSnmpV2CredentialBelongsToDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a deviceSnmpV2CredentialBelongsToDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deviceSnmpV2CredentialBelongsToDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deviceSnmpV2CredentialBelongsToDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deviceSnmpV2CredentialBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a deviceSnmpV2CredentialBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

type deviceSnmpV2CredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a deviceSnmpV2CredentialBelongsToOrganization) Where(conds ...field.Expr) *deviceSnmpV2CredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deviceSnmpV2CredentialBelongsToOrganization) WithContext(ctx context.Context) *deviceSnmpV2CredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deviceSnmpV2CredentialBelongsToOrganization) Session(session *gorm.Session) *deviceSnmpV2CredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a deviceSnmpV2CredentialBelongsToOrganization) Model(m *models.DeviceSnmpV2Credential) *deviceSnmpV2CredentialBelongsToOrganizationTx {
	return &deviceSnmpV2CredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type deviceSnmpV2CredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a deviceSnmpV2CredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a deviceSnmpV2CredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deviceSnmpV2CredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deviceSnmpV2CredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deviceSnmpV2CredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a deviceSnmpV2CredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type deviceSnmpV2CredentialDo struct{ gen.DO }

type IDeviceSnmpV2CredentialDo interface {
	gen.SubQuery
	Debug() IDeviceSnmpV2CredentialDo
	WithContext(ctx context.Context) IDeviceSnmpV2CredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceSnmpV2CredentialDo
	WriteDB() IDeviceSnmpV2CredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceSnmpV2CredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceSnmpV2CredentialDo
	Not(conds ...gen.Condition) IDeviceSnmpV2CredentialDo
	Or(conds ...gen.Condition) IDeviceSnmpV2CredentialDo
	Select(conds ...field.Expr) IDeviceSnmpV2CredentialDo
	Where(conds ...gen.Condition) IDeviceSnmpV2CredentialDo
	Order(conds ...field.Expr) IDeviceSnmpV2CredentialDo
	Distinct(cols ...field.Expr) IDeviceSnmpV2CredentialDo
	Omit(cols ...field.Expr) IDeviceSnmpV2CredentialDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceSnmpV2CredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceSnmpV2CredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceSnmpV2CredentialDo
	Group(cols ...field.Expr) IDeviceSnmpV2CredentialDo
	Having(conds ...gen.Condition) IDeviceSnmpV2CredentialDo
	Limit(limit int) IDeviceSnmpV2CredentialDo
	Offset(offset int) IDeviceSnmpV2CredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceSnmpV2CredentialDo
	Unscoped() IDeviceSnmpV2CredentialDo
	Create(values ...*models.DeviceSnmpV2Credential) error
	CreateInBatches(values []*models.DeviceSnmpV2Credential, batchSize int) error
	Save(values ...*models.DeviceSnmpV2Credential) error
	First() (*models.DeviceSnmpV2Credential, error)
	Take() (*models.DeviceSnmpV2Credential, error)
	Last() (*models.DeviceSnmpV2Credential, error)
	Find() ([]*models.DeviceSnmpV2Credential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DeviceSnmpV2Credential, err error)
	FindInBatches(result *[]*models.DeviceSnmpV2Credential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DeviceSnmpV2Credential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceSnmpV2CredentialDo
	Assign(attrs ...field.AssignExpr) IDeviceSnmpV2CredentialDo
	Joins(fields ...field.RelationField) IDeviceSnmpV2CredentialDo
	Preload(fields ...field.RelationField) IDeviceSnmpV2CredentialDo
	FirstOrInit() (*models.DeviceSnmpV2Credential, error)
	FirstOrCreate() (*models.DeviceSnmpV2Credential, error)
	FindByPage(offset int, limit int) (result []*models.DeviceSnmpV2Credential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceSnmpV2CredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceSnmpV2CredentialDo) Debug() IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceSnmpV2CredentialDo) WithContext(ctx context.Context) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceSnmpV2CredentialDo) ReadDB() IDeviceSnmpV2CredentialDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceSnmpV2CredentialDo) WriteDB() IDeviceSnmpV2CredentialDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceSnmpV2CredentialDo) Session(config *gorm.Session) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceSnmpV2CredentialDo) Clauses(conds ...clause.Expression) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceSnmpV2CredentialDo) Returning(value interface{}, columns ...string) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceSnmpV2CredentialDo) Not(conds ...gen.Condition) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceSnmpV2CredentialDo) Or(conds ...gen.Condition) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceSnmpV2CredentialDo) Select(conds ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceSnmpV2CredentialDo) Where(conds ...gen.Condition) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceSnmpV2CredentialDo) Order(conds ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceSnmpV2CredentialDo) Distinct(cols ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceSnmpV2CredentialDo) Omit(cols ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceSnmpV2CredentialDo) Join(table schema.Tabler, on ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceSnmpV2CredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceSnmpV2CredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceSnmpV2CredentialDo) Group(cols ...field.Expr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceSnmpV2CredentialDo) Having(conds ...gen.Condition) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceSnmpV2CredentialDo) Limit(limit int) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceSnmpV2CredentialDo) Offset(offset int) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceSnmpV2CredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceSnmpV2CredentialDo) Unscoped() IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceSnmpV2CredentialDo) Create(values ...*models.DeviceSnmpV2Credential) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceSnmpV2CredentialDo) CreateInBatches(values []*models.DeviceSnmpV2Credential, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceSnmpV2CredentialDo) Save(values ...*models.DeviceSnmpV2Credential) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceSnmpV2CredentialDo) First() (*models.DeviceSnmpV2Credential, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceSnmpV2Credential), nil
	}
}

func (d deviceSnmpV2CredentialDo) Take() (*models.DeviceSnmpV2Credential, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceSnmpV2Credential), nil
	}
}

func (d deviceSnmpV2CredentialDo) Last() (*models.DeviceSnmpV2Credential, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceSnmpV2Credential), nil
	}
}

func (d deviceSnmpV2CredentialDo) Find() ([]*models.DeviceSnmpV2Credential, error) {
	result, err := d.DO.Find()
	return result.([]*models.DeviceSnmpV2Credential), err
}

func (d deviceSnmpV2CredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DeviceSnmpV2Credential, err error) {
	buf := make([]*models.DeviceSnmpV2Credential, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceSnmpV2CredentialDo) FindInBatches(result *[]*models.DeviceSnmpV2Credential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceSnmpV2CredentialDo) Attrs(attrs ...field.AssignExpr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceSnmpV2CredentialDo) Assign(attrs ...field.AssignExpr) IDeviceSnmpV2CredentialDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceSnmpV2CredentialDo) Joins(fields ...field.RelationField) IDeviceSnmpV2CredentialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceSnmpV2CredentialDo) Preload(fields ...field.RelationField) IDeviceSnmpV2CredentialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceSnmpV2CredentialDo) FirstOrInit() (*models.DeviceSnmpV2Credential, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceSnmpV2Credential), nil
	}
}

func (d deviceSnmpV2CredentialDo) FirstOrCreate() (*models.DeviceSnmpV2Credential, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceSnmpV2Credential), nil
	}
}

func (d deviceSnmpV2CredentialDo) FindByPage(offset int, limit int) (result []*models.DeviceSnmpV2Credential, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceSnmpV2CredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceSnmpV2CredentialDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceSnmpV2CredentialDo) Delete(models ...*models.DeviceSnmpV2Credential) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceSnmpV2CredentialDo) withDO(do gen.Dao) *deviceSnmpV2CredentialDo {
	d.DO = *do.(*gen.DO)
	return d
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCliCredential(db *gorm.DB, opts ...gen.DOOption) cliCredential {
	_cliCredential := cliCredential{}

	_cliCredential.cliCredentialDo.UseDB(db, opts...)
	_cliCredential.cliCredentialDo.UseModel(&models.CliCredential{})

	tableName := _cliCredential.cliCredentialDo.TableName()
	_cliCredential.ALL = field.NewAsterisk(tableName)
	_cliCredential.Id = field.NewString(tableName, "id")
	_cliCredential.CreatedAt = field.NewTime(tableName, "createdAt")
	_cliCredential.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_cliCredential.Username = field.NewString(tableName, "username")
	_cliCredential.Password = field.NewString(tableName, "password")
	_cliCredential.Port = field.NewUint16(tableName, "port")
	_cliCredential.DeviceId = field.NewString(tableName, "deviceId")
	_cliCredential.OrganizationId = field.NewString(tableName, "organizationId")
	_cliCredential.Device = cliCredentialBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "models.Device"),
		Rack: struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Device.Rack", "models.Rack"),
			Location: struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Device.Rack.Location", "models.Location"),
				Parent: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Parent", "models.Location"),
				},
				Site: struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Site", "models.Site"),
					Organization: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Device.Rack.Location.Site.Organization", "models.Organization"),
					},
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Organization", "models.Organization"),
				},
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Organization", "models.Organization"),
			},
		},
		Template: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Template", "models.Template"),
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Organization", "models.Organization"),
		},
	}

	_cliCredential.Organization = cliCredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_cliCredential.fillFieldMap()

	return _cliCredential
}

type cliCredential struct {
	cliCredentialDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Username       field.String
	Password       field.String
	Port           field.Uint16
	DeviceId       field.String
	OrganizationId field.String
	Device         cliCredentialBelongsToDevice

	Organization cliCredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (c cliCredential) Table(newTableName string) *cliCredential {
	c.cliCredentialDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cliCredential) As(alias string) *cliCredential {
	c.cliCredentialDo.DO = *(c.cliCredentialDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cliCredential) updateTableName(table string) *cliCredential {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewString(table, "id")
	c.CreatedAt = field.NewTime(table, "createdAt")
	c.UpdatedAt = field.NewTime(table, "updatedAt")
	c.Username = field.NewString(table, "username")
	c.Password = field.NewString(table, "password")
	c.Port = field.NewUint16(table, "port")
	c.DeviceId = field.NewString(table, "deviceId")
	c.OrganizationId = field.NewString(table, "organizationId")

	c.fillFieldMap()

	return c
}

func (c *cliCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cliCredential) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.Id
	c.fieldMap["createdAt"] = c.CreatedAt
	c.fieldMap["updatedAt"] = c.UpdatedAt
	c.fieldMap["username"] = c.Username
	c.fieldMap["password"] = c.Password
	c.fieldMap["port"] = c.Port
	c.fieldMap["deviceId"] = c.DeviceId
	c.fieldMap["organizationId"] = c.OrganizationId

}

func (c cliCredential) clone(db *gorm.DB) cliCredential {
	c.cliCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cliCredential) replaceDB(db *gorm.DB) cliCredential {
	c.cliCredentialDo.ReplaceDB(db)
	return c
}

type cliCredentialBelongsToDevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Location struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Template struct {
		field.RelationField
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a cliCredentialBelongsToDevice) Where(conds ...field.Expr) *cliCredentialBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cliCredentialBelongsToDevice) WithContext(ctx context.Context) *cliCredentialBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cliCredentialBelongsToDevice) Session(session *gorm.Session) *cliCredentialBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a cliCredentialBelongsToDevice) Model(m *models.CliCredential) *cliCredentialBelongsToDeviceTx {
	return &cliCredentialBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

type cliCredentialBelongsToDeviceTx struct{ tx *gorm.Association }

func (a cliCredentialBelongsToDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a cliCredentialBelongsToDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cliCredentialBelongsToDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cliCredentialBelongsToDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cliCredentialBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a cliCredentialBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

type cliCredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a cliCredentialBelongsToOrganization) Where(conds ...field.Expr) *cliCredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cliCredentialBelongsToOrganization) WithContext(ctx context.Context) *cliCredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cliCredentialBelongsToOrganization) Session(session *gorm.Session) *cliCredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a cliCredentialBelongsToOrganization) Model(m *models.CliCredential) *cliCredentialBelongsToOrganizationTx {
	return &cliCredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type cliCredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a cliCredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a cliCredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cliCredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cliCredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cliCredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a cliCredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type cliCredentialDo struct{ gen.DO }

type ICliCredentialDo interface {
	gen.SubQuery
	Debug() ICliCredentialDo
	WithContext(ctx context.Context) ICliCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICliCredentialDo
	WriteDB() ICliCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICliCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICliCredentialDo
	Not(conds ...gen.Condition) ICliCredentialDo
	Or(conds ...gen.Condition) ICliCredentialDo
	Select(conds ...field.Expr) ICliCredentialDo
	Where(conds ...gen.Condition) ICliCredentialDo
	Order(conds ...field.Expr) ICliCredentialDo
	Distinct(cols ...field.Expr) ICliCredentialDo
	Omit(cols ...field.Expr) ICliCredentialDo
	Join(table schema.Tabler, on ...field.Expr) ICliCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICliCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICliCredentialDo
	Group(cols ...field.Expr) ICliCredentialDo
	Having(conds ...gen.Condition) ICliCredentialDo
	Limit(limit int) ICliCredentialDo
	Offset(offset int) ICliCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICliCredentialDo
	Unscoped() ICliCredentialDo
	Create(values ...*models.CliCredential) error
	CreateInBatches(values []*models.CliCredential, batchSize int) error
	Save(values ...*models.CliCredential) error
	First() (*models.CliCredential, error)
	Take() (*models.CliCredential, error)
	Last() (*models.CliCredential, error)
	Find() ([]*models.CliCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CliCredential, err error)
	FindInBatches(result *[]*models.CliCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.CliCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICliCredentialDo
	Assign(attrs ...field.AssignExpr) ICliCredentialDo
	Joins(fields ...field.RelationField) ICliCredentialDo
	Preload(fields ...field.RelationField) ICliCredentialDo
	FirstOrInit() (*models.CliCredential, error)
	FirstOrCreate() (*models.CliCredential, error)
	FindByPage(offset int, limit int) (result []*models.CliCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICliCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cliCredentialDo) Debug() ICliCredentialDo {
	return c.withDO(c.DO.Debug())
}

func (c cliCredentialDo) WithContext(ctx context.Context) ICliCredentialDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cliCredentialDo) ReadDB() ICliCredentialDo {
	return c.Clauses(dbresolver.Read)
}

func (c cliCredentialDo) WriteDB() ICliCredentialDo {
	return c.Clauses(dbresolver.Write)
}

func (c cliCredentialDo) Session(config *gorm.Session) ICliCredentialDo {
	return c.withDO(c.DO.Session(config))
}

func (c cliCredentialDo) Clauses(conds ...clause.Expression) ICliCredentialDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cliCredentialDo) Returning(value interface{}, columns ...string) ICliCredentialDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cliCredentialDo) Not(conds ...gen.Condition) ICliCredentialDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cliCredentialDo) Or(conds ...gen.Condition) ICliCredentialDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cliCredentialDo) Select(conds ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cliCredentialDo) Where(conds ...gen.Condition) ICliCredentialDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cliCredentialDo) Order(conds ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cliCredentialDo) Distinct(cols ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cliCredentialDo) Omit(cols ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cliCredentialDo) Join(table schema.Tabler, on ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cliCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cliCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cliCredentialDo) Group(cols ...field.Expr) ICliCredentialDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cliCredentialDo) Having(conds ...gen.Condition) ICliCredentialDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cliCredentialDo) Limit(limit int) ICliCredentialDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cliCredentialDo) Offset(offset int) ICliCredentialDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cliCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICliCredentialDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cliCredentialDo) Unscoped() ICliCredentialDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cliCredentialDo) Create(values ...*models.CliCredential) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cliCredentialDo) CreateInBatches(values []*models.CliCredential, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cliCredentialDo) Save(values ...*models.CliCredential) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cliCredentialDo) First() (*models.CliCredential, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.CliCredential), nil
	}
}

func (c cliCredentialDo) Take() (*models.CliCredential, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.CliCredential), nil
	}
}

func (c cliCredentialDo) Last() (*models.CliCredential, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.CliCredential), nil
	}
}

func (c cliCredentialDo) Find() ([]*models.CliCredential, error) {
	result, err := c.DO.Find()
	return result.([]*models.CliCredential), err
}

func (c cliCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CliCredential, err error) {
	buf := make([]*models.CliCredential, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cliCredentialDo) FindInBatches(result *[]*models.CliCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cliCredentialDo) Attrs(attrs ...field.AssignExpr) ICliCredentialDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cliCredentialDo) Assign(attrs ...field.AssignExpr) ICliCredentialDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cliCredentialDo) Joins(fields ...field.RelationField) ICliCredentialDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cliCredentialDo) Preload(fields ...field.RelationField) ICliCredentialDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cliCredentialDo) FirstOrInit() (*models.CliCredential, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.CliCredential), nil
	}
}

func (c cliCredentialDo) FirstOrCreate() (*models.CliCredential, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.CliCredential), nil
	}
}

func (c cliCredentialDo) FindByPage(offset int, limit int) (result []*models.CliCredential, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cliCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cliCredentialDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cliCredentialDo) Delete(models ...*models.CliCredential) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cliCredentialDo) withDO(do gen.Dao) *cliCredentialDo {
	c.DO = *do.(*gen.DO)
	return c
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRack(db *gorm.DB, opts ...gen.DOOption) rack {
	_rack := rack{}

	_rack.rackDo.UseDB(db, opts...)
	_rack.rackDo.UseModel(&models.Rack{})

	tableName := _rack.rackDo.TableName()
	_rack.ALL = field.NewAsterisk(tableName)
	_rack.ID = field.NewString(tableName, "id")
	_rack.CreatedAt = field.NewTime(tableName, "created_at")
	_rack.UpdatedAt = field.NewTime(tableName, "updated_at")
	_rack.Name = field.NewString(tableName, "name")
	_rack.AssetTag = field.NewString(tableName, "asset_tag")
	_rack.SerialNumber = field.NewString(tableName, "serial_number")
	_rack.UHeight = field.NewUint8(tableName, "u_height")
	_rack.Height = field.NewFloat32(tableName, "height")
	_rack.Width = field.NewFloat32(tableName, "width")
	_rack.Depth = field.NewFloat32(tableName, "depth")
	_rack.StartingUnit = field.NewUint8(tableName, "starting_unit")
	_rack.DescUnit = field.NewBool(tableName, "desc_unit")
	_rack.LocationID = field.NewString(tableName, "location_id")
	_rack.SiteID = field.NewString(tableName, "site_id")
	_rack.OrganizationID = field.NewString(tableName, "organization_id")
	_rack.Location = rackBelongsToLocation{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Location", "models.Location"),
		Parent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Location.Parent", "models.Location"),
		},
		Site: struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Location.Site", "models.Site"),
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Location.Site.Organization", "models.Organization"),
			},
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Location.Organization", "models.Organization"),
		},
	}

	_rack.Site = rackBelongsToSite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Site", "models.Site"),
	}

	_rack.Organization = rackBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_rack.fillFieldMap()

	return _rack
}

type rack struct {
	rackDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Name           field.String
	AssetTag       field.String
	SerialNumber   field.String
	UHeight        field.Uint8
	Height         field.Float32
	Width          field.Float32
	Depth          field.Float32
	StartingUnit   field.Uint8
	DescUnit       field.Bool
	LocationID     field.String
	SiteID         field.String
	OrganizationID field.String
	Location       rackBelongsToLocation

	Site rackBelongsToSite

	Organization rackBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (r rack) Table(newTableName string) *rack {
	r.rackDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rack) As(alias string) *rack {
	r.rackDo.DO = *(r.rackDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rack) updateTableName(table string) *rack {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.Name = field.NewString(table, "name")
	r.AssetTag = field.NewString(table, "asset_tag")
	r.SerialNumber = field.NewString(table, "serial_number")
	r.UHeight = field.NewUint8(table, "u_height")
	r.Height = field.NewFloat32(table, "height")
	r.Width = field.NewFloat32(table, "width")
	r.Depth = field.NewFloat32(table, "depth")
	r.StartingUnit = field.NewUint8(table, "starting_unit")
	r.DescUnit = field.NewBool(table, "desc_unit")
	r.LocationID = field.NewString(table, "location_id")
	r.SiteID = field.NewString(table, "site_id")
	r.OrganizationID = field.NewString(table, "organization_id")

	r.fillFieldMap()

	return r
}

func (r *rack) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rack) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 18)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["name"] = r.Name
	r.fieldMap["asset_tag"] = r.AssetTag
	r.fieldMap["serial_number"] = r.SerialNumber
	r.fieldMap["u_height"] = r.UHeight
	r.fieldMap["height"] = r.Height
	r.fieldMap["width"] = r.Width
	r.fieldMap["depth"] = r.Depth
	r.fieldMap["starting_unit"] = r.StartingUnit
	r.fieldMap["desc_unit"] = r.DescUnit
	r.fieldMap["location_id"] = r.LocationID
	r.fieldMap["site_id"] = r.SiteID
	r.fieldMap["organization_id"] = r.OrganizationID

}

func (r rack) clone(db *gorm.DB) rack {
	r.rackDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rack) replaceDB(db *gorm.DB) rack {
	r.rackDo.ReplaceDB(db)
	return r
}

type rackBelongsToLocation struct {
	db *gorm.DB

	field.RelationField

	Parent struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
		Organization struct {
			field.RelationField
		}
	}
	Organization struct {
		field.RelationField
	}
}

func (a rackBelongsToLocation) Where(conds ...field.Expr) *rackBelongsToLocation {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a rackBelongsToLocation) WithContext(ctx context.Context) *rackBelongsToLocation {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a rackBelongsToLocation) Session(session *gorm.Session) *rackBelongsToLocation {
	a.db = a.db.Session(session)
	return &a
}

func (a rackBelongsToLocation) Model(m *models.Rack) *rackBelongsToLocationTx {
	return &rackBelongsToLocationTx{a.db.Model(m).Association(a.Name())}
}

type rackBelongsToLocationTx struct{ tx *gorm.Association }

func (a rackBelongsToLocationTx) Find() (result *models.Location, err error) {
	return result, a.tx.Find(&result)
}

func (a rackBelongsToLocationTx) Append(values ...*models.Location) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a rackBelongsToLocationTx) Replace(values ...*models.Location) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a rackBelongsToLocationTx) Delete(values ...*models.Location) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a rackBelongsToLocationTx) Clear() error {
	return a.tx.Clear()
}

func (a rackBelongsToLocationTx) Count() int64 {
	return a.tx.Count()
}

type rackBelongsToSite struct {
	db *gorm.DB

	field.RelationField
}

func (a rackBelongsToSite) Where(conds ...field.Expr) *rackBelongsToSite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a rackBelongsToSite) WithContext(ctx context.Context) *rackBelongsToSite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a rackBelongsToSite) Session(session *gorm.Session) *rackBelongsToSite {
	a.db = a.db.Session(session)
	return &a
}

func (a rackBelongsToSite) Model(m *models.Rack) *rackBelongsToSiteTx {
	return &rackBelongsToSiteTx{a.db.Model(m).Association(a.Name())}
}

type rackBelongsToSiteTx struct{ tx *gorm.Association }

func (a rackBelongsToSiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a rackBelongsToSiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a rackBelongsToSiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a rackBelongsToSiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a rackBelongsToSiteTx) Clear() error {
	return a.tx.Clear()
}

func (a rackBelongsToSiteTx) Count() int64 {
	return a.tx.Count()
}

type rackBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a rackBelongsToOrganization) Where(conds ...field.Expr) *rackBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a rackBelongsToOrganization) WithContext(ctx context.Context) *rackBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a rackBelongsToOrganization) Session(session *gorm.Session) *rackBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a rackBelongsToOrganization) Model(m *models.Rack) *rackBelongsToOrganizationTx {
	return &rackBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type rackBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a rackBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a rackBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a rackBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a rackBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a rackBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a rackBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type rackDo struct{ gen.DO }

type IRackDo interface {
	gen.SubQuery
	Debug() IRackDo
	WithContext(ctx context.Context) IRackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRackDo
	WriteDB() IRackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRackDo
	Not(conds ...gen.Condition) IRackDo
	Or(conds ...gen.Condition) IRackDo
	Select(conds ...field.Expr) IRackDo
	Where(conds ...gen.Condition) IRackDo
	Order(conds ...field.Expr) IRackDo
	Distinct(cols ...field.Expr) IRackDo
	Omit(cols ...field.Expr) IRackDo
	Join(table schema.Tabler, on ...field.Expr) IRackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRackDo
	Group(cols ...field.Expr) IRackDo
	Having(conds ...gen.Condition) IRackDo
	Limit(limit int) IRackDo
	Offset(offset int) IRackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRackDo
	Unscoped() IRackDo
	Create(values ...*models.Rack) error
	CreateInBatches(values []*models.Rack, batchSize int) error
	Save(values ...*models.Rack) error
	First() (*models.Rack, error)
	Take() (*models.Rack, error)
	Last() (*models.Rack, error)
	Find() ([]*models.Rack, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Rack, err error)
	FindInBatches(result *[]*models.Rack, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Rack) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRackDo
	Assign(attrs ...field.AssignExpr) IRackDo
	Joins(fields ...field.RelationField) IRackDo
	Preload(fields ...field.RelationField) IRackDo
	FirstOrInit() (*models.Rack, error)
	FirstOrCreate() (*models.Rack, error)
	FindByPage(offset int, limit int) (result []*models.Rack, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rackDo) Debug() IRackDo {
	return r.withDO(r.DO.Debug())
}

func (r rackDo) WithContext(ctx context.Context) IRackDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rackDo) ReadDB() IRackDo {
	return r.Clauses(dbresolver.Read)
}

func (r rackDo) WriteDB() IRackDo {
	return r.Clauses(dbresolver.Write)
}

func (r rackDo) Session(config *gorm.Session) IRackDo {
	return r.withDO(r.DO.Session(config))
}

func (r rackDo) Clauses(conds ...clause.Expression) IRackDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rackDo) Returning(value interface{}, columns ...string) IRackDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rackDo) Not(conds ...gen.Condition) IRackDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rackDo) Or(conds ...gen.Condition) IRackDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rackDo) Select(conds ...field.Expr) IRackDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rackDo) Where(conds ...gen.Condition) IRackDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rackDo) Order(conds ...field.Expr) IRackDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rackDo) Distinct(cols ...field.Expr) IRackDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rackDo) Omit(cols ...field.Expr) IRackDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rackDo) Join(table schema.Tabler, on ...field.Expr) IRackDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRackDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rackDo) RightJoin(table schema.Tabler, on ...field.Expr) IRackDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rackDo) Group(cols ...field.Expr) IRackDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rackDo) Having(conds ...gen.Condition) IRackDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rackDo) Limit(limit int) IRackDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rackDo) Offset(offset int) IRackDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRackDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rackDo) Unscoped() IRackDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rackDo) Create(values ...*models.Rack) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rackDo) CreateInBatches(values []*models.Rack, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rackDo) Save(values ...*models.Rack) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rackDo) First() (*models.Rack, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Rack), nil
	}
}

func (r rackDo) Take() (*models.Rack, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Rack), nil
	}
}

func (r rackDo) Last() (*models.Rack, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Rack), nil
	}
}

func (r rackDo) Find() ([]*models.Rack, error) {
	result, err := r.DO.Find()
	return result.([]*models.Rack), err
}

func (r rackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Rack, err error) {
	buf := make([]*models.Rack, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rackDo) FindInBatches(result *[]*models.Rack, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rackDo) Attrs(attrs ...field.AssignExpr) IRackDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rackDo) Assign(attrs ...field.AssignExpr) IRackDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rackDo) Joins(fields ...field.RelationField) IRackDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rackDo) Preload(fields ...field.RelationField) IRackDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rackDo) FirstOrInit() (*models.Rack, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Rack), nil
	}
}

func (r rackDo) FirstOrCreate() (*models.Rack, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Rack), nil
	}
}

func (r rackDo) FindByPage(offset int, limit int) (result []*models.Rack, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rackDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rackDo) Delete(models ...*models.Rack) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rackDo) withDO(do gen.Dao) *rackDo {
	r.DO = *do.(*gen.DO)
	return r
}

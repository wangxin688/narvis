// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWlanStation(db *gorm.DB, opts ...gen.DOOption) wlanStation {
	_wlanStation := wlanStation{}

	_wlanStation.wlanStationDo.UseDB(db, opts...)
	_wlanStation.wlanStationDo.UseModel(&models.WlanStation{})

	tableName := _wlanStation.wlanStationDo.TableName()
	_wlanStation.ALL = field.NewAsterisk(tableName)
	_wlanStation.Time = field.NewTime(tableName, "time")
	_wlanStation.OrganizationId = field.NewString(tableName, "organizationId")
	_wlanStation.SiteId = field.NewString(tableName, "siteId")
	_wlanStation.StationMac = field.NewString(tableName, "stationMac")
	_wlanStation.StationIp = field.NewString(tableName, "stationIp")
	_wlanStation.StationUsername = field.NewString(tableName, "stationUsername")
	_wlanStation.StationApMac = field.NewString(tableName, "stationApMac")
	_wlanStation.StationApName = field.NewString(tableName, "stationApName")
	_wlanStation.StationESSID = field.NewString(tableName, "stationESSID")
	_wlanStation.StationVlan = field.NewUint64(tableName, "stationVlan")
	_wlanStation.StationChannel = field.NewUint64(tableName, "stationChannel")
	_wlanStation.StationChanBandWidth = field.NewString(tableName, "stationChanBandWidth")
	_wlanStation.StationRadioType = field.NewString(tableName, "stationRadioType")
	_wlanStation.StationSNR = field.NewUint64(tableName, "stationSNR")
	_wlanStation.StationRSSI = field.NewUint64(tableName, "stationRSSI")
	_wlanStation.StationRxBits = field.NewUint64(tableName, "stationRxBits")
	_wlanStation.StationTxBits = field.NewUint64(tableName, "stationTxBits")
	_wlanStation.StationMaxSpeed = field.NewUint64(tableName, "stationMaxSpeed")
	_wlanStation.StationOnlineTime = field.NewUint64(tableName, "stationOnlineTime")

	_wlanStation.fillFieldMap()

	return _wlanStation
}

type wlanStation struct {
	wlanStationDo

	ALL                  field.Asterisk
	Time                 field.Time
	OrganizationId       field.String
	SiteId               field.String
	StationMac           field.String
	StationIp            field.String
	StationUsername      field.String
	StationApMac         field.String
	StationApName        field.String
	StationESSID         field.String
	StationVlan          field.Uint64
	StationChannel       field.Uint64
	StationChanBandWidth field.String
	StationRadioType     field.String
	StationSNR           field.Uint64
	StationRSSI          field.Uint64
	StationRxBits        field.Uint64
	StationTxBits        field.Uint64
	StationMaxSpeed      field.Uint64
	StationOnlineTime    field.Uint64

	fieldMap map[string]field.Expr
}

func (w wlanStation) Table(newTableName string) *wlanStation {
	w.wlanStationDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wlanStation) As(alias string) *wlanStation {
	w.wlanStationDo.DO = *(w.wlanStationDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wlanStation) updateTableName(table string) *wlanStation {
	w.ALL = field.NewAsterisk(table)
	w.Time = field.NewTime(table, "time")
	w.OrganizationId = field.NewString(table, "organizationId")
	w.SiteId = field.NewString(table, "siteId")
	w.StationMac = field.NewString(table, "stationMac")
	w.StationIp = field.NewString(table, "stationIp")
	w.StationUsername = field.NewString(table, "stationUsername")
	w.StationApMac = field.NewString(table, "stationApMac")
	w.StationApName = field.NewString(table, "stationApName")
	w.StationESSID = field.NewString(table, "stationESSID")
	w.StationVlan = field.NewUint64(table, "stationVlan")
	w.StationChannel = field.NewUint64(table, "stationChannel")
	w.StationChanBandWidth = field.NewString(table, "stationChanBandWidth")
	w.StationRadioType = field.NewString(table, "stationRadioType")
	w.StationSNR = field.NewUint64(table, "stationSNR")
	w.StationRSSI = field.NewUint64(table, "stationRSSI")
	w.StationRxBits = field.NewUint64(table, "stationRxBits")
	w.StationTxBits = field.NewUint64(table, "stationTxBits")
	w.StationMaxSpeed = field.NewUint64(table, "stationMaxSpeed")
	w.StationOnlineTime = field.NewUint64(table, "stationOnlineTime")

	w.fillFieldMap()

	return w
}

func (w *wlanStation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wlanStation) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 19)
	w.fieldMap["time"] = w.Time
	w.fieldMap["organizationId"] = w.OrganizationId
	w.fieldMap["siteId"] = w.SiteId
	w.fieldMap["stationMac"] = w.StationMac
	w.fieldMap["stationIp"] = w.StationIp
	w.fieldMap["stationUsername"] = w.StationUsername
	w.fieldMap["stationApMac"] = w.StationApMac
	w.fieldMap["stationApName"] = w.StationApName
	w.fieldMap["stationESSID"] = w.StationESSID
	w.fieldMap["stationVlan"] = w.StationVlan
	w.fieldMap["stationChannel"] = w.StationChannel
	w.fieldMap["stationChanBandWidth"] = w.StationChanBandWidth
	w.fieldMap["stationRadioType"] = w.StationRadioType
	w.fieldMap["stationSNR"] = w.StationSNR
	w.fieldMap["stationRSSI"] = w.StationRSSI
	w.fieldMap["stationRxBits"] = w.StationRxBits
	w.fieldMap["stationTxBits"] = w.StationTxBits
	w.fieldMap["stationMaxSpeed"] = w.StationMaxSpeed
	w.fieldMap["stationOnlineTime"] = w.StationOnlineTime
}

func (w wlanStation) clone(db *gorm.DB) wlanStation {
	w.wlanStationDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wlanStation) replaceDB(db *gorm.DB) wlanStation {
	w.wlanStationDo.ReplaceDB(db)
	return w
}

type wlanStationDo struct{ gen.DO }

type IWlanStationDo interface {
	gen.SubQuery
	Debug() IWlanStationDo
	WithContext(ctx context.Context) IWlanStationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWlanStationDo
	WriteDB() IWlanStationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWlanStationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWlanStationDo
	Not(conds ...gen.Condition) IWlanStationDo
	Or(conds ...gen.Condition) IWlanStationDo
	Select(conds ...field.Expr) IWlanStationDo
	Where(conds ...gen.Condition) IWlanStationDo
	Order(conds ...field.Expr) IWlanStationDo
	Distinct(cols ...field.Expr) IWlanStationDo
	Omit(cols ...field.Expr) IWlanStationDo
	Join(table schema.Tabler, on ...field.Expr) IWlanStationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWlanStationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWlanStationDo
	Group(cols ...field.Expr) IWlanStationDo
	Having(conds ...gen.Condition) IWlanStationDo
	Limit(limit int) IWlanStationDo
	Offset(offset int) IWlanStationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWlanStationDo
	Unscoped() IWlanStationDo
	Create(values ...*models.WlanStation) error
	CreateInBatches(values []*models.WlanStation, batchSize int) error
	Save(values ...*models.WlanStation) error
	First() (*models.WlanStation, error)
	Take() (*models.WlanStation, error)
	Last() (*models.WlanStation, error)
	Find() ([]*models.WlanStation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WlanStation, err error)
	FindInBatches(result *[]*models.WlanStation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.WlanStation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWlanStationDo
	Assign(attrs ...field.AssignExpr) IWlanStationDo
	Joins(fields ...field.RelationField) IWlanStationDo
	Preload(fields ...field.RelationField) IWlanStationDo
	FirstOrInit() (*models.WlanStation, error)
	FirstOrCreate() (*models.WlanStation, error)
	FindByPage(offset int, limit int) (result []*models.WlanStation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWlanStationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wlanStationDo) Debug() IWlanStationDo {
	return w.withDO(w.DO.Debug())
}

func (w wlanStationDo) WithContext(ctx context.Context) IWlanStationDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wlanStationDo) ReadDB() IWlanStationDo {
	return w.Clauses(dbresolver.Read)
}

func (w wlanStationDo) WriteDB() IWlanStationDo {
	return w.Clauses(dbresolver.Write)
}

func (w wlanStationDo) Session(config *gorm.Session) IWlanStationDo {
	return w.withDO(w.DO.Session(config))
}

func (w wlanStationDo) Clauses(conds ...clause.Expression) IWlanStationDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wlanStationDo) Returning(value interface{}, columns ...string) IWlanStationDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wlanStationDo) Not(conds ...gen.Condition) IWlanStationDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wlanStationDo) Or(conds ...gen.Condition) IWlanStationDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wlanStationDo) Select(conds ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wlanStationDo) Where(conds ...gen.Condition) IWlanStationDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wlanStationDo) Order(conds ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wlanStationDo) Distinct(cols ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wlanStationDo) Omit(cols ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wlanStationDo) Join(table schema.Tabler, on ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wlanStationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wlanStationDo) RightJoin(table schema.Tabler, on ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wlanStationDo) Group(cols ...field.Expr) IWlanStationDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wlanStationDo) Having(conds ...gen.Condition) IWlanStationDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wlanStationDo) Limit(limit int) IWlanStationDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wlanStationDo) Offset(offset int) IWlanStationDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wlanStationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWlanStationDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wlanStationDo) Unscoped() IWlanStationDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wlanStationDo) Create(values ...*models.WlanStation) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wlanStationDo) CreateInBatches(values []*models.WlanStation, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wlanStationDo) Save(values ...*models.WlanStation) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wlanStationDo) First() (*models.WlanStation, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.WlanStation), nil
	}
}

func (w wlanStationDo) Take() (*models.WlanStation, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.WlanStation), nil
	}
}

func (w wlanStationDo) Last() (*models.WlanStation, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.WlanStation), nil
	}
}

func (w wlanStationDo) Find() ([]*models.WlanStation, error) {
	result, err := w.DO.Find()
	return result.([]*models.WlanStation), err
}

func (w wlanStationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WlanStation, err error) {
	buf := make([]*models.WlanStation, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wlanStationDo) FindInBatches(result *[]*models.WlanStation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wlanStationDo) Attrs(attrs ...field.AssignExpr) IWlanStationDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wlanStationDo) Assign(attrs ...field.AssignExpr) IWlanStationDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wlanStationDo) Joins(fields ...field.RelationField) IWlanStationDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wlanStationDo) Preload(fields ...field.RelationField) IWlanStationDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wlanStationDo) FirstOrInit() (*models.WlanStation, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.WlanStation), nil
	}
}

func (w wlanStationDo) FirstOrCreate() (*models.WlanStation, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.WlanStation), nil
	}
}

func (w wlanStationDo) FindByPage(offset int, limit int) (result []*models.WlanStation, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wlanStationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wlanStationDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wlanStationDo) Delete(models ...*models.WlanStation) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wlanStationDo) withDO(do gen.Dao) *wlanStationDo {
	w.DO = *do.(*gen.DO)
	return w
}

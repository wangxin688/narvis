// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAlertGroup(db *gorm.DB, opts ...gen.DOOption) alertGroup {
	_alertGroup := alertGroup{}

	_alertGroup.alertGroupDo.UseDB(db, opts...)
	_alertGroup.alertGroupDo.UseModel(&models.AlertGroup{})

	tableName := _alertGroup.alertGroupDo.TableName()
	_alertGroup.ALL = field.NewAsterisk(tableName)
	_alertGroup.Id = field.NewString(tableName, "Id")
	_alertGroup.Status = field.NewUint8(tableName, "status")
	_alertGroup.StartedAt = field.NewTime(tableName, "startedAt")
	_alertGroup.ResolvedAt = field.NewTime(tableName, "resolvedAt")
	_alertGroup.Acknowledged = field.NewBool(tableName, "acknowledged")
	_alertGroup.Suppressed = field.NewBool(tableName, "suppressed")
	_alertGroup.Severity = field.NewString(tableName, "severity")
	_alertGroup.AlertName = field.NewString(tableName, "alertName")
	_alertGroup.GroupKey = field.NewString(tableName, "groupKey")
	_alertGroup.HashKey = field.NewString(tableName, "hashKey")
	_alertGroup.SiteId = field.NewString(tableName, "siteId")
	_alertGroup.OrganizationId = field.NewString(tableName, "organizationId")
	_alertGroup.Site = alertGroupBelongsToSite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Site", "models.Site"),
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Site.Organization", "models.Organization"),
		},
	}

	_alertGroup.Organization = alertGroupBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_alertGroup.fillFieldMap()

	return _alertGroup
}

type alertGroup struct {
	alertGroupDo

	ALL            field.Asterisk
	Id             field.String
	Status         field.Uint8
	StartedAt      field.Time
	ResolvedAt     field.Time
	Acknowledged   field.Bool
	Suppressed     field.Bool
	Severity       field.String
	AlertName      field.String
	GroupKey       field.String
	HashKey        field.String
	SiteId         field.String
	OrganizationId field.String
	Site           alertGroupBelongsToSite

	Organization alertGroupBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (a alertGroup) Table(newTableName string) *alertGroup {
	a.alertGroupDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alertGroup) As(alias string) *alertGroup {
	a.alertGroupDo.DO = *(a.alertGroupDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alertGroup) updateTableName(table string) *alertGroup {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewString(table, "Id")
	a.Status = field.NewUint8(table, "status")
	a.StartedAt = field.NewTime(table, "startedAt")
	a.ResolvedAt = field.NewTime(table, "resolvedAt")
	a.Acknowledged = field.NewBool(table, "acknowledged")
	a.Suppressed = field.NewBool(table, "suppressed")
	a.Severity = field.NewString(table, "severity")
	a.AlertName = field.NewString(table, "alertName")
	a.GroupKey = field.NewString(table, "groupKey")
	a.HashKey = field.NewString(table, "hashKey")
	a.SiteId = field.NewString(table, "siteId")
	a.OrganizationId = field.NewString(table, "organizationId")

	a.fillFieldMap()

	return a
}

func (a *alertGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alertGroup) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["Id"] = a.Id
	a.fieldMap["status"] = a.Status
	a.fieldMap["startedAt"] = a.StartedAt
	a.fieldMap["resolvedAt"] = a.ResolvedAt
	a.fieldMap["acknowledged"] = a.Acknowledged
	a.fieldMap["suppressed"] = a.Suppressed
	a.fieldMap["severity"] = a.Severity
	a.fieldMap["alertName"] = a.AlertName
	a.fieldMap["groupKey"] = a.GroupKey
	a.fieldMap["hashKey"] = a.HashKey
	a.fieldMap["siteId"] = a.SiteId
	a.fieldMap["organizationId"] = a.OrganizationId

}

func (a alertGroup) clone(db *gorm.DB) alertGroup {
	a.alertGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alertGroup) replaceDB(db *gorm.DB) alertGroup {
	a.alertGroupDo.ReplaceDB(db)
	return a
}

type alertGroupBelongsToSite struct {
	db *gorm.DB

	field.RelationField

	Organization struct {
		field.RelationField
	}
}

func (a alertGroupBelongsToSite) Where(conds ...field.Expr) *alertGroupBelongsToSite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertGroupBelongsToSite) WithContext(ctx context.Context) *alertGroupBelongsToSite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertGroupBelongsToSite) Session(session *gorm.Session) *alertGroupBelongsToSite {
	a.db = a.db.Session(session)
	return &a
}

func (a alertGroupBelongsToSite) Model(m *models.AlertGroup) *alertGroupBelongsToSiteTx {
	return &alertGroupBelongsToSiteTx{a.db.Model(m).Association(a.Name())}
}

type alertGroupBelongsToSiteTx struct{ tx *gorm.Association }

func (a alertGroupBelongsToSiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a alertGroupBelongsToSiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertGroupBelongsToSiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertGroupBelongsToSiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertGroupBelongsToSiteTx) Clear() error {
	return a.tx.Clear()
}

func (a alertGroupBelongsToSiteTx) Count() int64 {
	return a.tx.Count()
}

type alertGroupBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a alertGroupBelongsToOrganization) Where(conds ...field.Expr) *alertGroupBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertGroupBelongsToOrganization) WithContext(ctx context.Context) *alertGroupBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertGroupBelongsToOrganization) Session(session *gorm.Session) *alertGroupBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a alertGroupBelongsToOrganization) Model(m *models.AlertGroup) *alertGroupBelongsToOrganizationTx {
	return &alertGroupBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type alertGroupBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a alertGroupBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a alertGroupBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertGroupBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertGroupBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertGroupBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a alertGroupBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type alertGroupDo struct{ gen.DO }

type IAlertGroupDo interface {
	gen.SubQuery
	Debug() IAlertGroupDo
	WithContext(ctx context.Context) IAlertGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlertGroupDo
	WriteDB() IAlertGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlertGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlertGroupDo
	Not(conds ...gen.Condition) IAlertGroupDo
	Or(conds ...gen.Condition) IAlertGroupDo
	Select(conds ...field.Expr) IAlertGroupDo
	Where(conds ...gen.Condition) IAlertGroupDo
	Order(conds ...field.Expr) IAlertGroupDo
	Distinct(cols ...field.Expr) IAlertGroupDo
	Omit(cols ...field.Expr) IAlertGroupDo
	Join(table schema.Tabler, on ...field.Expr) IAlertGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlertGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlertGroupDo
	Group(cols ...field.Expr) IAlertGroupDo
	Having(conds ...gen.Condition) IAlertGroupDo
	Limit(limit int) IAlertGroupDo
	Offset(offset int) IAlertGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertGroupDo
	Unscoped() IAlertGroupDo
	Create(values ...*models.AlertGroup) error
	CreateInBatches(values []*models.AlertGroup, batchSize int) error
	Save(values ...*models.AlertGroup) error
	First() (*models.AlertGroup, error)
	Take() (*models.AlertGroup, error)
	Last() (*models.AlertGroup, error)
	Find() ([]*models.AlertGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AlertGroup, err error)
	FindInBatches(result *[]*models.AlertGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AlertGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlertGroupDo
	Assign(attrs ...field.AssignExpr) IAlertGroupDo
	Joins(fields ...field.RelationField) IAlertGroupDo
	Preload(fields ...field.RelationField) IAlertGroupDo
	FirstOrInit() (*models.AlertGroup, error)
	FirstOrCreate() (*models.AlertGroup, error)
	FindByPage(offset int, limit int) (result []*models.AlertGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlertGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alertGroupDo) Debug() IAlertGroupDo {
	return a.withDO(a.DO.Debug())
}

func (a alertGroupDo) WithContext(ctx context.Context) IAlertGroupDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alertGroupDo) ReadDB() IAlertGroupDo {
	return a.Clauses(dbresolver.Read)
}

func (a alertGroupDo) WriteDB() IAlertGroupDo {
	return a.Clauses(dbresolver.Write)
}

func (a alertGroupDo) Session(config *gorm.Session) IAlertGroupDo {
	return a.withDO(a.DO.Session(config))
}

func (a alertGroupDo) Clauses(conds ...clause.Expression) IAlertGroupDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alertGroupDo) Returning(value interface{}, columns ...string) IAlertGroupDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alertGroupDo) Not(conds ...gen.Condition) IAlertGroupDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alertGroupDo) Or(conds ...gen.Condition) IAlertGroupDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alertGroupDo) Select(conds ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alertGroupDo) Where(conds ...gen.Condition) IAlertGroupDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alertGroupDo) Order(conds ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alertGroupDo) Distinct(cols ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alertGroupDo) Omit(cols ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alertGroupDo) Join(table schema.Tabler, on ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alertGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alertGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alertGroupDo) Group(cols ...field.Expr) IAlertGroupDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alertGroupDo) Having(conds ...gen.Condition) IAlertGroupDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alertGroupDo) Limit(limit int) IAlertGroupDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alertGroupDo) Offset(offset int) IAlertGroupDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alertGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertGroupDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alertGroupDo) Unscoped() IAlertGroupDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alertGroupDo) Create(values ...*models.AlertGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alertGroupDo) CreateInBatches(values []*models.AlertGroup, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alertGroupDo) Save(values ...*models.AlertGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alertGroupDo) First() (*models.AlertGroup, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlertGroup), nil
	}
}

func (a alertGroupDo) Take() (*models.AlertGroup, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlertGroup), nil
	}
}

func (a alertGroupDo) Last() (*models.AlertGroup, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlertGroup), nil
	}
}

func (a alertGroupDo) Find() ([]*models.AlertGroup, error) {
	result, err := a.DO.Find()
	return result.([]*models.AlertGroup), err
}

func (a alertGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AlertGroup, err error) {
	buf := make([]*models.AlertGroup, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alertGroupDo) FindInBatches(result *[]*models.AlertGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alertGroupDo) Attrs(attrs ...field.AssignExpr) IAlertGroupDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alertGroupDo) Assign(attrs ...field.AssignExpr) IAlertGroupDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alertGroupDo) Joins(fields ...field.RelationField) IAlertGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alertGroupDo) Preload(fields ...field.RelationField) IAlertGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alertGroupDo) FirstOrInit() (*models.AlertGroup, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlertGroup), nil
	}
}

func (a alertGroupDo) FirstOrCreate() (*models.AlertGroup, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AlertGroup), nil
	}
}

func (a alertGroupDo) FindByPage(offset int, limit int) (result []*models.AlertGroup, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alertGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alertGroupDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alertGroupDo) Delete(models ...*models.AlertGroup) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alertGroupDo) withDO(do gen.Dao) *alertGroupDo {
	a.DO = *do.(*gen.DO)
	return a
}

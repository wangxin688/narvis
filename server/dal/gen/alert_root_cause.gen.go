// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRootCause(db *gorm.DB, opts ...gen.DOOption) rootCause {
	_rootCause := rootCause{}

	_rootCause.rootCauseDo.UseDB(db, opts...)
	_rootCause.rootCauseDo.UseModel(&models.RootCause{})

	tableName := _rootCause.rootCauseDo.TableName()
	_rootCause.ALL = field.NewAsterisk(tableName)
	_rootCause.ID = field.NewString(tableName, "id")
	_rootCause.CreatedAt = field.NewTime(tableName, "created_at")
	_rootCause.UpdatedAt = field.NewTime(tableName, "updated_at")
	_rootCause.Name = field.NewString(tableName, "name")
	_rootCause.Description = field.NewString(tableName, "description")
	_rootCause.Category = field.NewString(tableName, "category")
	_rootCause.OrganizationID = field.NewString(tableName, "organization_id")
	_rootCause.Organization = rootCauseBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_rootCause.fillFieldMap()

	return _rootCause
}

type rootCause struct {
	rootCauseDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Name           field.String
	Description    field.String
	Category       field.String
	OrganizationID field.String
	Organization   rootCauseBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (r rootCause) Table(newTableName string) *rootCause {
	r.rootCauseDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rootCause) As(alias string) *rootCause {
	r.rootCauseDo.DO = *(r.rootCauseDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rootCause) updateTableName(table string) *rootCause {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.Name = field.NewString(table, "name")
	r.Description = field.NewString(table, "description")
	r.Category = field.NewString(table, "category")
	r.OrganizationID = field.NewString(table, "organization_id")

	r.fillFieldMap()

	return r
}

func (r *rootCause) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rootCause) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["name"] = r.Name
	r.fieldMap["description"] = r.Description
	r.fieldMap["category"] = r.Category
	r.fieldMap["organization_id"] = r.OrganizationID

}

func (r rootCause) clone(db *gorm.DB) rootCause {
	r.rootCauseDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rootCause) replaceDB(db *gorm.DB) rootCause {
	r.rootCauseDo.ReplaceDB(db)
	return r
}

type rootCauseBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a rootCauseBelongsToOrganization) Where(conds ...field.Expr) *rootCauseBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a rootCauseBelongsToOrganization) WithContext(ctx context.Context) *rootCauseBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a rootCauseBelongsToOrganization) Session(session *gorm.Session) *rootCauseBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a rootCauseBelongsToOrganization) Model(m *models.RootCause) *rootCauseBelongsToOrganizationTx {
	return &rootCauseBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type rootCauseBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a rootCauseBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a rootCauseBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a rootCauseBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a rootCauseBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a rootCauseBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a rootCauseBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type rootCauseDo struct{ gen.DO }

type IRootCauseDo interface {
	gen.SubQuery
	Debug() IRootCauseDo
	WithContext(ctx context.Context) IRootCauseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRootCauseDo
	WriteDB() IRootCauseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRootCauseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRootCauseDo
	Not(conds ...gen.Condition) IRootCauseDo
	Or(conds ...gen.Condition) IRootCauseDo
	Select(conds ...field.Expr) IRootCauseDo
	Where(conds ...gen.Condition) IRootCauseDo
	Order(conds ...field.Expr) IRootCauseDo
	Distinct(cols ...field.Expr) IRootCauseDo
	Omit(cols ...field.Expr) IRootCauseDo
	Join(table schema.Tabler, on ...field.Expr) IRootCauseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRootCauseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRootCauseDo
	Group(cols ...field.Expr) IRootCauseDo
	Having(conds ...gen.Condition) IRootCauseDo
	Limit(limit int) IRootCauseDo
	Offset(offset int) IRootCauseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRootCauseDo
	Unscoped() IRootCauseDo
	Create(values ...*models.RootCause) error
	CreateInBatches(values []*models.RootCause, batchSize int) error
	Save(values ...*models.RootCause) error
	First() (*models.RootCause, error)
	Take() (*models.RootCause, error)
	Last() (*models.RootCause, error)
	Find() ([]*models.RootCause, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RootCause, err error)
	FindInBatches(result *[]*models.RootCause, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RootCause) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRootCauseDo
	Assign(attrs ...field.AssignExpr) IRootCauseDo
	Joins(fields ...field.RelationField) IRootCauseDo
	Preload(fields ...field.RelationField) IRootCauseDo
	FirstOrInit() (*models.RootCause, error)
	FirstOrCreate() (*models.RootCause, error)
	FindByPage(offset int, limit int) (result []*models.RootCause, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRootCauseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rootCauseDo) Debug() IRootCauseDo {
	return r.withDO(r.DO.Debug())
}

func (r rootCauseDo) WithContext(ctx context.Context) IRootCauseDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rootCauseDo) ReadDB() IRootCauseDo {
	return r.Clauses(dbresolver.Read)
}

func (r rootCauseDo) WriteDB() IRootCauseDo {
	return r.Clauses(dbresolver.Write)
}

func (r rootCauseDo) Session(config *gorm.Session) IRootCauseDo {
	return r.withDO(r.DO.Session(config))
}

func (r rootCauseDo) Clauses(conds ...clause.Expression) IRootCauseDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rootCauseDo) Returning(value interface{}, columns ...string) IRootCauseDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rootCauseDo) Not(conds ...gen.Condition) IRootCauseDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rootCauseDo) Or(conds ...gen.Condition) IRootCauseDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rootCauseDo) Select(conds ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rootCauseDo) Where(conds ...gen.Condition) IRootCauseDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rootCauseDo) Order(conds ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rootCauseDo) Distinct(cols ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rootCauseDo) Omit(cols ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rootCauseDo) Join(table schema.Tabler, on ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rootCauseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rootCauseDo) RightJoin(table schema.Tabler, on ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rootCauseDo) Group(cols ...field.Expr) IRootCauseDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rootCauseDo) Having(conds ...gen.Condition) IRootCauseDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rootCauseDo) Limit(limit int) IRootCauseDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rootCauseDo) Offset(offset int) IRootCauseDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rootCauseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRootCauseDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rootCauseDo) Unscoped() IRootCauseDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rootCauseDo) Create(values ...*models.RootCause) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rootCauseDo) CreateInBatches(values []*models.RootCause, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rootCauseDo) Save(values ...*models.RootCause) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rootCauseDo) First() (*models.RootCause, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RootCause), nil
	}
}

func (r rootCauseDo) Take() (*models.RootCause, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RootCause), nil
	}
}

func (r rootCauseDo) Last() (*models.RootCause, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RootCause), nil
	}
}

func (r rootCauseDo) Find() ([]*models.RootCause, error) {
	result, err := r.DO.Find()
	return result.([]*models.RootCause), err
}

func (r rootCauseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RootCause, err error) {
	buf := make([]*models.RootCause, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rootCauseDo) FindInBatches(result *[]*models.RootCause, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rootCauseDo) Attrs(attrs ...field.AssignExpr) IRootCauseDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rootCauseDo) Assign(attrs ...field.AssignExpr) IRootCauseDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rootCauseDo) Joins(fields ...field.RelationField) IRootCauseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rootCauseDo) Preload(fields ...field.RelationField) IRootCauseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rootCauseDo) FirstOrInit() (*models.RootCause, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RootCause), nil
	}
}

func (r rootCauseDo) FirstOrCreate() (*models.RootCause, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RootCause), nil
	}
}

func (r rootCauseDo) FindByPage(offset int, limit int) (result []*models.RootCause, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rootCauseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rootCauseDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rootCauseDo) Delete(models ...*models.RootCause) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rootCauseDo) withDO(do gen.Dao) *rootCauseDo {
	r.DO = *do.(*gen.DO)
	return r
}

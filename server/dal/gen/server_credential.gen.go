// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newServerCredential(db *gorm.DB, opts ...gen.DOOption) serverCredential {
	_serverCredential := serverCredential{}

	_serverCredential.serverCredentialDo.UseDB(db, opts...)
	_serverCredential.serverCredentialDo.UseModel(&models.ServerCredential{})

	tableName := _serverCredential.serverCredentialDo.TableName()
	_serverCredential.ALL = field.NewAsterisk(tableName)
	_serverCredential.Id = field.NewString(tableName, "id")
	_serverCredential.CreatedAt = field.NewTime(tableName, "createdAt")
	_serverCredential.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_serverCredential.Username = field.NewString(tableName, "username")
	_serverCredential.Password = field.NewString(tableName, "password")
	_serverCredential.Port = field.NewUint16(tableName, "port")
	_serverCredential.ServerId = field.NewString(tableName, "serverId")
	_serverCredential.OrganizationId = field.NewString(tableName, "organizationId")
	_serverCredential.Server = serverCredentialBelongsToServer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Server", "models.Server"),
		Rack: struct {
			field.RelationField
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Server.Rack", "models.Rack"),
			Site: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Server.Rack.Site", "models.Site"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Server.Rack.Site.Organization", "models.Organization"),
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Server.Rack.Organization", "models.Organization"),
			},
		},
		Template: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Server.Template", "models.Template"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Server.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Server.Organization", "models.Organization"),
		},
	}

	_serverCredential.Organization = serverCredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_serverCredential.fillFieldMap()

	return _serverCredential
}

type serverCredential struct {
	serverCredentialDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Username       field.String
	Password       field.String
	Port           field.Uint16
	ServerId       field.String
	OrganizationId field.String
	Server         serverCredentialBelongsToServer

	Organization serverCredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (s serverCredential) Table(newTableName string) *serverCredential {
	s.serverCredentialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverCredential) As(alias string) *serverCredential {
	s.serverCredentialDo.DO = *(s.serverCredentialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverCredential) updateTableName(table string) *serverCredential {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "createdAt")
	s.UpdatedAt = field.NewTime(table, "updatedAt")
	s.Username = field.NewString(table, "username")
	s.Password = field.NewString(table, "password")
	s.Port = field.NewUint16(table, "port")
	s.ServerId = field.NewString(table, "serverId")
	s.OrganizationId = field.NewString(table, "organizationId")

	s.fillFieldMap()

	return s
}

func (s *serverCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverCredential) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.Id
	s.fieldMap["createdAt"] = s.CreatedAt
	s.fieldMap["updatedAt"] = s.UpdatedAt
	s.fieldMap["username"] = s.Username
	s.fieldMap["password"] = s.Password
	s.fieldMap["port"] = s.Port
	s.fieldMap["serverId"] = s.ServerId
	s.fieldMap["organizationId"] = s.OrganizationId

}

func (s serverCredential) clone(db *gorm.DB) serverCredential {
	s.serverCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverCredential) replaceDB(db *gorm.DB) serverCredential {
	s.serverCredentialDo.ReplaceDB(db)
	return s
}

type serverCredentialBelongsToServer struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Site struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Template struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a serverCredentialBelongsToServer) Where(conds ...field.Expr) *serverCredentialBelongsToServer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serverCredentialBelongsToServer) WithContext(ctx context.Context) *serverCredentialBelongsToServer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serverCredentialBelongsToServer) Session(session *gorm.Session) *serverCredentialBelongsToServer {
	a.db = a.db.Session(session)
	return &a
}

func (a serverCredentialBelongsToServer) Model(m *models.ServerCredential) *serverCredentialBelongsToServerTx {
	return &serverCredentialBelongsToServerTx{a.db.Model(m).Association(a.Name())}
}

type serverCredentialBelongsToServerTx struct{ tx *gorm.Association }

func (a serverCredentialBelongsToServerTx) Find() (result *models.Server, err error) {
	return result, a.tx.Find(&result)
}

func (a serverCredentialBelongsToServerTx) Append(values ...*models.Server) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serverCredentialBelongsToServerTx) Replace(values ...*models.Server) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serverCredentialBelongsToServerTx) Delete(values ...*models.Server) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serverCredentialBelongsToServerTx) Clear() error {
	return a.tx.Clear()
}

func (a serverCredentialBelongsToServerTx) Count() int64 {
	return a.tx.Count()
}

type serverCredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a serverCredentialBelongsToOrganization) Where(conds ...field.Expr) *serverCredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serverCredentialBelongsToOrganization) WithContext(ctx context.Context) *serverCredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serverCredentialBelongsToOrganization) Session(session *gorm.Session) *serverCredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a serverCredentialBelongsToOrganization) Model(m *models.ServerCredential) *serverCredentialBelongsToOrganizationTx {
	return &serverCredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type serverCredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a serverCredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a serverCredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serverCredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serverCredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serverCredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a serverCredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type serverCredentialDo struct{ gen.DO }

type IServerCredentialDo interface {
	gen.SubQuery
	Debug() IServerCredentialDo
	WithContext(ctx context.Context) IServerCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerCredentialDo
	WriteDB() IServerCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerCredentialDo
	Not(conds ...gen.Condition) IServerCredentialDo
	Or(conds ...gen.Condition) IServerCredentialDo
	Select(conds ...field.Expr) IServerCredentialDo
	Where(conds ...gen.Condition) IServerCredentialDo
	Order(conds ...field.Expr) IServerCredentialDo
	Distinct(cols ...field.Expr) IServerCredentialDo
	Omit(cols ...field.Expr) IServerCredentialDo
	Join(table schema.Tabler, on ...field.Expr) IServerCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerCredentialDo
	Group(cols ...field.Expr) IServerCredentialDo
	Having(conds ...gen.Condition) IServerCredentialDo
	Limit(limit int) IServerCredentialDo
	Offset(offset int) IServerCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerCredentialDo
	Unscoped() IServerCredentialDo
	Create(values ...*models.ServerCredential) error
	CreateInBatches(values []*models.ServerCredential, batchSize int) error
	Save(values ...*models.ServerCredential) error
	First() (*models.ServerCredential, error)
	Take() (*models.ServerCredential, error)
	Last() (*models.ServerCredential, error)
	Find() ([]*models.ServerCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServerCredential, err error)
	FindInBatches(result *[]*models.ServerCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ServerCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerCredentialDo
	Assign(attrs ...field.AssignExpr) IServerCredentialDo
	Joins(fields ...field.RelationField) IServerCredentialDo
	Preload(fields ...field.RelationField) IServerCredentialDo
	FirstOrInit() (*models.ServerCredential, error)
	FirstOrCreate() (*models.ServerCredential, error)
	FindByPage(offset int, limit int) (result []*models.ServerCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverCredentialDo) Debug() IServerCredentialDo {
	return s.withDO(s.DO.Debug())
}

func (s serverCredentialDo) WithContext(ctx context.Context) IServerCredentialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverCredentialDo) ReadDB() IServerCredentialDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverCredentialDo) WriteDB() IServerCredentialDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverCredentialDo) Session(config *gorm.Session) IServerCredentialDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverCredentialDo) Clauses(conds ...clause.Expression) IServerCredentialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverCredentialDo) Returning(value interface{}, columns ...string) IServerCredentialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverCredentialDo) Not(conds ...gen.Condition) IServerCredentialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverCredentialDo) Or(conds ...gen.Condition) IServerCredentialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverCredentialDo) Select(conds ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverCredentialDo) Where(conds ...gen.Condition) IServerCredentialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverCredentialDo) Order(conds ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverCredentialDo) Distinct(cols ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverCredentialDo) Omit(cols ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverCredentialDo) Join(table schema.Tabler, on ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverCredentialDo) Group(cols ...field.Expr) IServerCredentialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverCredentialDo) Having(conds ...gen.Condition) IServerCredentialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverCredentialDo) Limit(limit int) IServerCredentialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverCredentialDo) Offset(offset int) IServerCredentialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerCredentialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverCredentialDo) Unscoped() IServerCredentialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverCredentialDo) Create(values ...*models.ServerCredential) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverCredentialDo) CreateInBatches(values []*models.ServerCredential, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverCredentialDo) Save(values ...*models.ServerCredential) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverCredentialDo) First() (*models.ServerCredential, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerCredential), nil
	}
}

func (s serverCredentialDo) Take() (*models.ServerCredential, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerCredential), nil
	}
}

func (s serverCredentialDo) Last() (*models.ServerCredential, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerCredential), nil
	}
}

func (s serverCredentialDo) Find() ([]*models.ServerCredential, error) {
	result, err := s.DO.Find()
	return result.([]*models.ServerCredential), err
}

func (s serverCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServerCredential, err error) {
	buf := make([]*models.ServerCredential, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverCredentialDo) FindInBatches(result *[]*models.ServerCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverCredentialDo) Attrs(attrs ...field.AssignExpr) IServerCredentialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverCredentialDo) Assign(attrs ...field.AssignExpr) IServerCredentialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverCredentialDo) Joins(fields ...field.RelationField) IServerCredentialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverCredentialDo) Preload(fields ...field.RelationField) IServerCredentialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverCredentialDo) FirstOrInit() (*models.ServerCredential, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerCredential), nil
	}
}

func (s serverCredentialDo) FirstOrCreate() (*models.ServerCredential, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerCredential), nil
	}
}

func (s serverCredentialDo) FindByPage(offset int, limit int) (result []*models.ServerCredential, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverCredentialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverCredentialDo) Delete(models ...*models.ServerCredential) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverCredentialDo) withDO(do gen.Dao) *serverCredentialDo {
	s.DO = *do.(*gen.DO)
	return s
}

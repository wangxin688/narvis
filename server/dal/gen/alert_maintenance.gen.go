// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMaintenance(db *gorm.DB, opts ...gen.DOOption) maintenance {
	_maintenance := maintenance{}

	_maintenance.maintenanceDo.UseDB(db, opts...)
	_maintenance.maintenanceDo.UseModel(&models.Maintenance{})

	tableName := _maintenance.maintenanceDo.TableName()
	_maintenance.ALL = field.NewAsterisk(tableName)
	_maintenance.Id = field.NewString(tableName, "id")
	_maintenance.CreatedAt = field.NewTime(tableName, "createdAt")
	_maintenance.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_maintenance.Name = field.NewString(tableName, "Name")
	_maintenance.StartedAt = field.NewTime(tableName, "startedAt")
	_maintenance.EndedAt = field.NewTime(tableName, "endedAt")
	_maintenance.MaintenanceType = field.NewString(tableName, "maintenanceType")
	_maintenance.Conditions = field.NewField(tableName, "conditions")
	_maintenance.Description = field.NewString(tableName, "description")
	_maintenance.CreatedById = field.NewString(tableName, "createdById")
	_maintenance.UpdatedById = field.NewString(tableName, "updatedById")
	_maintenance.OrganizationId = field.NewString(tableName, "organizationId")
	_maintenance.Alert = maintenanceHasManyAlert{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Alert", "models.Alert"),
		User: struct {
			field.RelationField
			Role struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.User", "models.User"),
			Role: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("Alert.User.Role", "models.Role"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.User.Role.Organization", "models.Organization"),
				},
				Menus: struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("Alert.User.Role.Menus", "models.Menu"),
					Parent: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Alert.User.Role.Menus.Parent", "models.Menu"),
					},
					Permission: struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Alert.User.Role.Menus.Permission", "models.Permission"),
						Menu: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Alert.User.Role.Menus.Permission.Menu", "models.Menu"),
						},
					},
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.User.Organization", "models.Organization"),
			},
		},
		Site: struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Site", "models.Site"),
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Site.Organization", "models.Organization"),
			},
		},
		Device: struct {
			field.RelationField
			Rack struct {
				field.RelationField
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}
			Template struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Device", "models.Device"),
			Rack: struct {
				field.RelationField
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Alert.Device.Rack", "models.Rack"),
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Device.Rack.Site", "models.Site"),
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Device.Rack.Organization", "models.Organization"),
				},
			},
			Template: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Device.Template", "models.Template"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Device.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Device.Organization", "models.Organization"),
			},
		},
		Ap: struct {
			field.RelationField
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Ap", "models.AP"),
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Ap.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Ap.Organization", "models.Organization"),
			},
		},
		Circuit: struct {
			field.RelationField
			Site struct {
				field.RelationField
			}
			Device struct {
				field.RelationField
			}
			DeviceInterface struct {
				field.RelationField
				Device struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Circuit", "models.Circuit"),
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.Site", "models.Site"),
			},
			Device: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.Device", "models.Device"),
			},
			DeviceInterface: struct {
				field.RelationField
				Device struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Alert.Circuit.DeviceInterface", "models.DeviceInterface"),
				Device: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Circuit.DeviceInterface.Device", "models.Device"),
				},
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Alert.Circuit.DeviceInterface.Site", "models.Site"),
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Circuit.Organization", "models.Organization"),
			},
		},
		Server: struct {
			field.RelationField
			Rack struct {
				field.RelationField
			}
			Template struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Server", "models.Server"),
			Rack: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Server.Rack", "models.Rack"),
			},
			Template: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Server.Template", "models.Template"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Server.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Server.Organization", "models.Organization"),
			},
		},
		RootCause: struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.RootCause", "models.RootCause"),
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.RootCause.Organization", "models.Organization"),
			},
		},
		AlertGroup: struct {
			field.RelationField
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.AlertGroup", "models.AlertGroup"),
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.AlertGroup.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.AlertGroup.Organization", "models.Organization"),
			},
		},
		DeviceInterface: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Alert.DeviceInterface", "models.DeviceInterface"),
		},
		Maintenance: struct {
			field.RelationField
			CreatedBy struct {
				field.RelationField
			}
			UpdatedBy struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
			Alert struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.Maintenance", "models.Maintenance"),
			CreatedBy: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Maintenance.CreatedBy", "models.User"),
			},
			UpdatedBy: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Maintenance.UpdatedBy", "models.User"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Maintenance.Organization", "models.Organization"),
			},
			Alert: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.Maintenance.Alert", "models.Alert"),
			},
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Alert.Organization", "models.Organization"),
		},
		ActionLog: struct {
			field.RelationField
			AssignUser struct {
				field.RelationField
			}
			RootCause struct {
				field.RelationField
			}
			CreatedBy struct {
				field.RelationField
			}
			Alert struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Alert.ActionLog", "models.AlertActionLog"),
			AssignUser: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.ActionLog.AssignUser", "models.User"),
			},
			RootCause: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.ActionLog.RootCause", "models.RootCause"),
			},
			CreatedBy: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.ActionLog.CreatedBy", "models.User"),
			},
			Alert: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Alert.ActionLog.Alert", "models.Alert"),
			},
		},
	}

	_maintenance.CreatedBy = maintenanceBelongsToCreatedBy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CreatedBy", "models.User"),
	}

	_maintenance.UpdatedBy = maintenanceBelongsToUpdatedBy{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UpdatedBy", "models.User"),
	}

	_maintenance.Organization = maintenanceBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_maintenance.fillFieldMap()

	return _maintenance
}

type maintenance struct {
	maintenanceDo

	ALL             field.Asterisk
	Id              field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	Name            field.String
	StartedAt       field.Time
	EndedAt         field.Time
	MaintenanceType field.String
	Conditions      field.Field
	Description     field.String
	CreatedById     field.String
	UpdatedById     field.String
	OrganizationId  field.String
	Alert           maintenanceHasManyAlert

	CreatedBy maintenanceBelongsToCreatedBy

	UpdatedBy maintenanceBelongsToUpdatedBy

	Organization maintenanceBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (m maintenance) Table(newTableName string) *maintenance {
	m.maintenanceDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m maintenance) As(alias string) *maintenance {
	m.maintenanceDo.DO = *(m.maintenanceDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *maintenance) updateTableName(table string) *maintenance {
	m.ALL = field.NewAsterisk(table)
	m.Id = field.NewString(table, "id")
	m.CreatedAt = field.NewTime(table, "createdAt")
	m.UpdatedAt = field.NewTime(table, "updatedAt")
	m.Name = field.NewString(table, "Name")
	m.StartedAt = field.NewTime(table, "startedAt")
	m.EndedAt = field.NewTime(table, "endedAt")
	m.MaintenanceType = field.NewString(table, "maintenanceType")
	m.Conditions = field.NewField(table, "conditions")
	m.Description = field.NewString(table, "description")
	m.CreatedById = field.NewString(table, "createdById")
	m.UpdatedById = field.NewString(table, "updatedById")
	m.OrganizationId = field.NewString(table, "organizationId")

	m.fillFieldMap()

	return m
}

func (m *maintenance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *maintenance) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 16)
	m.fieldMap["id"] = m.Id
	m.fieldMap["createdAt"] = m.CreatedAt
	m.fieldMap["updatedAt"] = m.UpdatedAt
	m.fieldMap["Name"] = m.Name
	m.fieldMap["startedAt"] = m.StartedAt
	m.fieldMap["endedAt"] = m.EndedAt
	m.fieldMap["maintenanceType"] = m.MaintenanceType
	m.fieldMap["conditions"] = m.Conditions
	m.fieldMap["description"] = m.Description
	m.fieldMap["createdById"] = m.CreatedById
	m.fieldMap["updatedById"] = m.UpdatedById
	m.fieldMap["organizationId"] = m.OrganizationId

}

func (m maintenance) clone(db *gorm.DB) maintenance {
	m.maintenanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m maintenance) replaceDB(db *gorm.DB) maintenance {
	m.maintenanceDo.ReplaceDB(db)
	return m
}

type maintenanceHasManyAlert struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		Role struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
			Menus struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Permission struct {
					field.RelationField
					Menu struct {
						field.RelationField
					}
				}
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Site struct {
		field.RelationField
		Organization struct {
			field.RelationField
		}
	}
	Device struct {
		field.RelationField
		Rack struct {
			field.RelationField
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}
		Template struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Ap struct {
		field.RelationField
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Circuit struct {
		field.RelationField
		Site struct {
			field.RelationField
		}
		Device struct {
			field.RelationField
		}
		DeviceInterface struct {
			field.RelationField
			Device struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Server struct {
		field.RelationField
		Rack struct {
			field.RelationField
		}
		Template struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	RootCause struct {
		field.RelationField
		Organization struct {
			field.RelationField
		}
	}
	AlertGroup struct {
		field.RelationField
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	DeviceInterface struct {
		field.RelationField
	}
	Maintenance struct {
		field.RelationField
		CreatedBy struct {
			field.RelationField
		}
		UpdatedBy struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
		Alert struct {
			field.RelationField
		}
	}
	Organization struct {
		field.RelationField
	}
	ActionLog struct {
		field.RelationField
		AssignUser struct {
			field.RelationField
		}
		RootCause struct {
			field.RelationField
		}
		CreatedBy struct {
			field.RelationField
		}
		Alert struct {
			field.RelationField
		}
	}
}

func (a maintenanceHasManyAlert) Where(conds ...field.Expr) *maintenanceHasManyAlert {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a maintenanceHasManyAlert) WithContext(ctx context.Context) *maintenanceHasManyAlert {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a maintenanceHasManyAlert) Session(session *gorm.Session) *maintenanceHasManyAlert {
	a.db = a.db.Session(session)
	return &a
}

func (a maintenanceHasManyAlert) Model(m *models.Maintenance) *maintenanceHasManyAlertTx {
	return &maintenanceHasManyAlertTx{a.db.Model(m).Association(a.Name())}
}

type maintenanceHasManyAlertTx struct{ tx *gorm.Association }

func (a maintenanceHasManyAlertTx) Find() (result []*models.Alert, err error) {
	return result, a.tx.Find(&result)
}

func (a maintenanceHasManyAlertTx) Append(values ...*models.Alert) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a maintenanceHasManyAlertTx) Replace(values ...*models.Alert) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a maintenanceHasManyAlertTx) Delete(values ...*models.Alert) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a maintenanceHasManyAlertTx) Clear() error {
	return a.tx.Clear()
}

func (a maintenanceHasManyAlertTx) Count() int64 {
	return a.tx.Count()
}

type maintenanceBelongsToCreatedBy struct {
	db *gorm.DB

	field.RelationField
}

func (a maintenanceBelongsToCreatedBy) Where(conds ...field.Expr) *maintenanceBelongsToCreatedBy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a maintenanceBelongsToCreatedBy) WithContext(ctx context.Context) *maintenanceBelongsToCreatedBy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a maintenanceBelongsToCreatedBy) Session(session *gorm.Session) *maintenanceBelongsToCreatedBy {
	a.db = a.db.Session(session)
	return &a
}

func (a maintenanceBelongsToCreatedBy) Model(m *models.Maintenance) *maintenanceBelongsToCreatedByTx {
	return &maintenanceBelongsToCreatedByTx{a.db.Model(m).Association(a.Name())}
}

type maintenanceBelongsToCreatedByTx struct{ tx *gorm.Association }

func (a maintenanceBelongsToCreatedByTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a maintenanceBelongsToCreatedByTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a maintenanceBelongsToCreatedByTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a maintenanceBelongsToCreatedByTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a maintenanceBelongsToCreatedByTx) Clear() error {
	return a.tx.Clear()
}

func (a maintenanceBelongsToCreatedByTx) Count() int64 {
	return a.tx.Count()
}

type maintenanceBelongsToUpdatedBy struct {
	db *gorm.DB

	field.RelationField
}

func (a maintenanceBelongsToUpdatedBy) Where(conds ...field.Expr) *maintenanceBelongsToUpdatedBy {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a maintenanceBelongsToUpdatedBy) WithContext(ctx context.Context) *maintenanceBelongsToUpdatedBy {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a maintenanceBelongsToUpdatedBy) Session(session *gorm.Session) *maintenanceBelongsToUpdatedBy {
	a.db = a.db.Session(session)
	return &a
}

func (a maintenanceBelongsToUpdatedBy) Model(m *models.Maintenance) *maintenanceBelongsToUpdatedByTx {
	return &maintenanceBelongsToUpdatedByTx{a.db.Model(m).Association(a.Name())}
}

type maintenanceBelongsToUpdatedByTx struct{ tx *gorm.Association }

func (a maintenanceBelongsToUpdatedByTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a maintenanceBelongsToUpdatedByTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a maintenanceBelongsToUpdatedByTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a maintenanceBelongsToUpdatedByTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a maintenanceBelongsToUpdatedByTx) Clear() error {
	return a.tx.Clear()
}

func (a maintenanceBelongsToUpdatedByTx) Count() int64 {
	return a.tx.Count()
}

type maintenanceBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a maintenanceBelongsToOrganization) Where(conds ...field.Expr) *maintenanceBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a maintenanceBelongsToOrganization) WithContext(ctx context.Context) *maintenanceBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a maintenanceBelongsToOrganization) Session(session *gorm.Session) *maintenanceBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a maintenanceBelongsToOrganization) Model(m *models.Maintenance) *maintenanceBelongsToOrganizationTx {
	return &maintenanceBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type maintenanceBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a maintenanceBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a maintenanceBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a maintenanceBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a maintenanceBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a maintenanceBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a maintenanceBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type maintenanceDo struct{ gen.DO }

type IMaintenanceDo interface {
	gen.SubQuery
	Debug() IMaintenanceDo
	WithContext(ctx context.Context) IMaintenanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMaintenanceDo
	WriteDB() IMaintenanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMaintenanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMaintenanceDo
	Not(conds ...gen.Condition) IMaintenanceDo
	Or(conds ...gen.Condition) IMaintenanceDo
	Select(conds ...field.Expr) IMaintenanceDo
	Where(conds ...gen.Condition) IMaintenanceDo
	Order(conds ...field.Expr) IMaintenanceDo
	Distinct(cols ...field.Expr) IMaintenanceDo
	Omit(cols ...field.Expr) IMaintenanceDo
	Join(table schema.Tabler, on ...field.Expr) IMaintenanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMaintenanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMaintenanceDo
	Group(cols ...field.Expr) IMaintenanceDo
	Having(conds ...gen.Condition) IMaintenanceDo
	Limit(limit int) IMaintenanceDo
	Offset(offset int) IMaintenanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMaintenanceDo
	Unscoped() IMaintenanceDo
	Create(values ...*models.Maintenance) error
	CreateInBatches(values []*models.Maintenance, batchSize int) error
	Save(values ...*models.Maintenance) error
	First() (*models.Maintenance, error)
	Take() (*models.Maintenance, error)
	Last() (*models.Maintenance, error)
	Find() ([]*models.Maintenance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Maintenance, err error)
	FindInBatches(result *[]*models.Maintenance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Maintenance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMaintenanceDo
	Assign(attrs ...field.AssignExpr) IMaintenanceDo
	Joins(fields ...field.RelationField) IMaintenanceDo
	Preload(fields ...field.RelationField) IMaintenanceDo
	FirstOrInit() (*models.Maintenance, error)
	FirstOrCreate() (*models.Maintenance, error)
	FindByPage(offset int, limit int) (result []*models.Maintenance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMaintenanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithColumn(column string, value string) (result models.Maintenance, err error)
	FilterWithColumnIn(column string, values []string) (result models.Maintenance, err error)
	FilterWithColumnNotIn(column string, values []string) (result models.Maintenance, err error)
	FilterWithColumnIsNotNull(column string) (result models.Maintenance, err error)
	FilterWithColumnIsNull(column string) (result models.Maintenance, err error)
}

// SELECT * FROM @@table WHERE @column = @value
func (m maintenanceDo) FilterWithColumn(column string, value string) (result models.Maintenance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, column)
	params = append(params, value)
	generateSQL.WriteString("SELECT * FROM alert_maintenance WHERE ? = ? ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE @column IN (@values)
func (m maintenanceDo) FilterWithColumnIn(column string, values []string) (result models.Maintenance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, column)
	params = append(params, values)
	generateSQL.WriteString("SELECT * FROM alert_maintenance WHERE ? IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE @column NOT IN (@values)
func (m maintenanceDo) FilterWithColumnNotIn(column string, values []string) (result models.Maintenance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, column)
	params = append(params, values)
	generateSQL.WriteString("SELECT * FROM alert_maintenance WHERE ? NOT IN (?) ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE @column IS NOT NULL
func (m maintenanceDo) FilterWithColumnIsNotNull(column string) (result models.Maintenance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, column)
	generateSQL.WriteString("SELECT * FROM alert_maintenance WHERE ? IS NOT NULL ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE @column IS NULL
func (m maintenanceDo) FilterWithColumnIsNull(column string) (result models.Maintenance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, column)
	generateSQL.WriteString("SELECT * FROM alert_maintenance WHERE ? IS NULL ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m maintenanceDo) Debug() IMaintenanceDo {
	return m.withDO(m.DO.Debug())
}

func (m maintenanceDo) WithContext(ctx context.Context) IMaintenanceDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m maintenanceDo) ReadDB() IMaintenanceDo {
	return m.Clauses(dbresolver.Read)
}

func (m maintenanceDo) WriteDB() IMaintenanceDo {
	return m.Clauses(dbresolver.Write)
}

func (m maintenanceDo) Session(config *gorm.Session) IMaintenanceDo {
	return m.withDO(m.DO.Session(config))
}

func (m maintenanceDo) Clauses(conds ...clause.Expression) IMaintenanceDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m maintenanceDo) Returning(value interface{}, columns ...string) IMaintenanceDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m maintenanceDo) Not(conds ...gen.Condition) IMaintenanceDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m maintenanceDo) Or(conds ...gen.Condition) IMaintenanceDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m maintenanceDo) Select(conds ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m maintenanceDo) Where(conds ...gen.Condition) IMaintenanceDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m maintenanceDo) Order(conds ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m maintenanceDo) Distinct(cols ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m maintenanceDo) Omit(cols ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m maintenanceDo) Join(table schema.Tabler, on ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m maintenanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m maintenanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m maintenanceDo) Group(cols ...field.Expr) IMaintenanceDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m maintenanceDo) Having(conds ...gen.Condition) IMaintenanceDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m maintenanceDo) Limit(limit int) IMaintenanceDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m maintenanceDo) Offset(offset int) IMaintenanceDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m maintenanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMaintenanceDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m maintenanceDo) Unscoped() IMaintenanceDo {
	return m.withDO(m.DO.Unscoped())
}

func (m maintenanceDo) Create(values ...*models.Maintenance) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m maintenanceDo) CreateInBatches(values []*models.Maintenance, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m maintenanceDo) Save(values ...*models.Maintenance) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m maintenanceDo) First() (*models.Maintenance, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Maintenance), nil
	}
}

func (m maintenanceDo) Take() (*models.Maintenance, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Maintenance), nil
	}
}

func (m maintenanceDo) Last() (*models.Maintenance, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Maintenance), nil
	}
}

func (m maintenanceDo) Find() ([]*models.Maintenance, error) {
	result, err := m.DO.Find()
	return result.([]*models.Maintenance), err
}

func (m maintenanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Maintenance, err error) {
	buf := make([]*models.Maintenance, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m maintenanceDo) FindInBatches(result *[]*models.Maintenance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m maintenanceDo) Attrs(attrs ...field.AssignExpr) IMaintenanceDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m maintenanceDo) Assign(attrs ...field.AssignExpr) IMaintenanceDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m maintenanceDo) Joins(fields ...field.RelationField) IMaintenanceDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m maintenanceDo) Preload(fields ...field.RelationField) IMaintenanceDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m maintenanceDo) FirstOrInit() (*models.Maintenance, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Maintenance), nil
	}
}

func (m maintenanceDo) FirstOrCreate() (*models.Maintenance, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Maintenance), nil
	}
}

func (m maintenanceDo) FindByPage(offset int, limit int) (result []*models.Maintenance, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m maintenanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m maintenanceDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m maintenanceDo) Delete(models ...*models.Maintenance) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *maintenanceDo) withDO(do gen.Dao) *maintenanceDo {
	m.DO = *do.(*gen.DO)
	return m
}

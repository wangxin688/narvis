// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCircuit(db *gorm.DB, opts ...gen.DOOption) circuit {
	_circuit := circuit{}

	_circuit.circuitDo.UseDB(db, opts...)
	_circuit.circuitDo.UseModel(&models.Circuit{})

	tableName := _circuit.circuitDo.TableName()
	_circuit.ALL = field.NewAsterisk(tableName)
	_circuit.Id = field.NewString(tableName, "id")
	_circuit.CreatedAt = field.NewTime(tableName, "createdAt")
	_circuit.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_circuit.Name = field.NewString(tableName, "name")
	_circuit.CId = field.NewString(tableName, "cId")
	_circuit.Status = field.NewString(tableName, "status")
	_circuit.CircuitType = field.NewString(tableName, "circuitType")
	_circuit.BandWidth = field.NewUint32(tableName, "bandWidth")
	_circuit.IpAddress = field.NewString(tableName, "ipAddress")
	_circuit.Description = field.NewString(tableName, "description")
	_circuit.ProviderId = field.NewString(tableName, "providerId")
	_circuit.ASiteId = field.NewString(tableName, "aSiteId")
	_circuit.ADeviceId = field.NewString(tableName, "aDeviceId")
	_circuit.AInterfaceId = field.NewString(tableName, "aInterfaceId")
	_circuit.ZSiteId = field.NewString(tableName, "zSiteId")
	_circuit.ZDeviceId = field.NewString(tableName, "zDeviceId")
	_circuit.ZInterfaceId = field.NewString(tableName, "zInterfaceId")
	_circuit.MonitorId = field.NewString(tableName, "monitorId")
	_circuit.OrganizationId = field.NewString(tableName, "organizationId")
	_circuit.Provider = circuitBelongsToProvider{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Provider", "models.Provider"),
	}

	_circuit.ASite = circuitBelongsToASite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ASite", "models.Site"),
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ASite.Organization", "models.Organization"),
		},
	}

	_circuit.ADevice = circuitBelongsToADevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ADevice", "models.Device"),
		Rack: struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("ADevice.Rack", "models.Rack"),
			Location: struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("ADevice.Rack.Location", "models.Location"),
				Parent: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ADevice.Rack.Location.Parent", "models.Location"),
				},
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ADevice.Rack.Location.Site", "models.Site"),
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ADevice.Rack.Location.Organization", "models.Organization"),
				},
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ADevice.Rack.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ADevice.Rack.Organization", "models.Organization"),
			},
		},
		Template: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ADevice.Template", "models.Template"),
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ADevice.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ADevice.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("ADevice.Organization", "models.Organization"),
		},
	}

	_circuit.AInterface = circuitBelongsToAInterface{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AInterface", "models.DeviceInterface"),
		Device: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AInterface.Device", "models.Device"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AInterface.Site", "models.Site"),
		},
	}

	_circuit.ZSite = circuitBelongsToZSite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ZSite", "models.Site"),
	}

	_circuit.ZDevice = circuitBelongsToZDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ZDevice", "models.Device"),
	}

	_circuit.ZInterface = circuitBelongsToZInterface{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ZInterface", "models.DeviceInterface"),
	}

	_circuit.Organization = circuitBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_circuit.fillFieldMap()

	return _circuit
}

type circuit struct {
	circuitDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Name           field.String
	CId            field.String
	Status         field.String
	CircuitType    field.String
	BandWidth      field.Uint32
	IpAddress      field.String
	Description    field.String
	ProviderId     field.String
	ASiteId        field.String
	ADeviceId      field.String
	AInterfaceId   field.String
	ZSiteId        field.String
	ZDeviceId      field.String
	ZInterfaceId   field.String
	MonitorId      field.String
	OrganizationId field.String
	Provider       circuitBelongsToProvider

	ASite circuitBelongsToASite

	ADevice circuitBelongsToADevice

	AInterface circuitBelongsToAInterface

	ZSite circuitBelongsToZSite

	ZDevice circuitBelongsToZDevice

	ZInterface circuitBelongsToZInterface

	Organization circuitBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (c circuit) Table(newTableName string) *circuit {
	c.circuitDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c circuit) As(alias string) *circuit {
	c.circuitDo.DO = *(c.circuitDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *circuit) updateTableName(table string) *circuit {
	c.ALL = field.NewAsterisk(table)
	c.Id = field.NewString(table, "id")
	c.CreatedAt = field.NewTime(table, "createdAt")
	c.UpdatedAt = field.NewTime(table, "updatedAt")
	c.Name = field.NewString(table, "name")
	c.CId = field.NewString(table, "cId")
	c.Status = field.NewString(table, "status")
	c.CircuitType = field.NewString(table, "circuitType")
	c.BandWidth = field.NewUint32(table, "bandWidth")
	c.IpAddress = field.NewString(table, "ipAddress")
	c.Description = field.NewString(table, "description")
	c.ProviderId = field.NewString(table, "providerId")
	c.ASiteId = field.NewString(table, "aSiteId")
	c.ADeviceId = field.NewString(table, "aDeviceId")
	c.AInterfaceId = field.NewString(table, "aInterfaceId")
	c.ZSiteId = field.NewString(table, "zSiteId")
	c.ZDeviceId = field.NewString(table, "zDeviceId")
	c.ZInterfaceId = field.NewString(table, "zInterfaceId")
	c.MonitorId = field.NewString(table, "monitorId")
	c.OrganizationId = field.NewString(table, "organizationId")

	c.fillFieldMap()

	return c
}

func (c *circuit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *circuit) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 27)
	c.fieldMap["id"] = c.Id
	c.fieldMap["createdAt"] = c.CreatedAt
	c.fieldMap["updatedAt"] = c.UpdatedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["cId"] = c.CId
	c.fieldMap["status"] = c.Status
	c.fieldMap["circuitType"] = c.CircuitType
	c.fieldMap["bandWidth"] = c.BandWidth
	c.fieldMap["ipAddress"] = c.IpAddress
	c.fieldMap["description"] = c.Description
	c.fieldMap["providerId"] = c.ProviderId
	c.fieldMap["aSiteId"] = c.ASiteId
	c.fieldMap["aDeviceId"] = c.ADeviceId
	c.fieldMap["aInterfaceId"] = c.AInterfaceId
	c.fieldMap["zSiteId"] = c.ZSiteId
	c.fieldMap["zDeviceId"] = c.ZDeviceId
	c.fieldMap["zInterfaceId"] = c.ZInterfaceId
	c.fieldMap["monitorId"] = c.MonitorId
	c.fieldMap["organizationId"] = c.OrganizationId

}

func (c circuit) clone(db *gorm.DB) circuit {
	c.circuitDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c circuit) replaceDB(db *gorm.DB) circuit {
	c.circuitDo.ReplaceDB(db)
	return c
}

type circuitBelongsToProvider struct {
	db *gorm.DB

	field.RelationField
}

func (a circuitBelongsToProvider) Where(conds ...field.Expr) *circuitBelongsToProvider {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToProvider) WithContext(ctx context.Context) *circuitBelongsToProvider {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToProvider) Session(session *gorm.Session) *circuitBelongsToProvider {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToProvider) Model(m *models.Circuit) *circuitBelongsToProviderTx {
	return &circuitBelongsToProviderTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToProviderTx struct{ tx *gorm.Association }

func (a circuitBelongsToProviderTx) Find() (result *models.Provider, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToProviderTx) Append(values ...*models.Provider) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToProviderTx) Replace(values ...*models.Provider) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToProviderTx) Delete(values ...*models.Provider) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToProviderTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToProviderTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToASite struct {
	db *gorm.DB

	field.RelationField

	Organization struct {
		field.RelationField
	}
}

func (a circuitBelongsToASite) Where(conds ...field.Expr) *circuitBelongsToASite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToASite) WithContext(ctx context.Context) *circuitBelongsToASite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToASite) Session(session *gorm.Session) *circuitBelongsToASite {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToASite) Model(m *models.Circuit) *circuitBelongsToASiteTx {
	return &circuitBelongsToASiteTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToASiteTx struct{ tx *gorm.Association }

func (a circuitBelongsToASiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToASiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToASiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToASiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToASiteTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToASiteTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToADevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Location struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Template struct {
		field.RelationField
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a circuitBelongsToADevice) Where(conds ...field.Expr) *circuitBelongsToADevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToADevice) WithContext(ctx context.Context) *circuitBelongsToADevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToADevice) Session(session *gorm.Session) *circuitBelongsToADevice {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToADevice) Model(m *models.Circuit) *circuitBelongsToADeviceTx {
	return &circuitBelongsToADeviceTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToADeviceTx struct{ tx *gorm.Association }

func (a circuitBelongsToADeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToADeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToADeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToADeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToADeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToADeviceTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToAInterface struct {
	db *gorm.DB

	field.RelationField

	Device struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
}

func (a circuitBelongsToAInterface) Where(conds ...field.Expr) *circuitBelongsToAInterface {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToAInterface) WithContext(ctx context.Context) *circuitBelongsToAInterface {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToAInterface) Session(session *gorm.Session) *circuitBelongsToAInterface {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToAInterface) Model(m *models.Circuit) *circuitBelongsToAInterfaceTx {
	return &circuitBelongsToAInterfaceTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToAInterfaceTx struct{ tx *gorm.Association }

func (a circuitBelongsToAInterfaceTx) Find() (result *models.DeviceInterface, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToAInterfaceTx) Append(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToAInterfaceTx) Replace(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToAInterfaceTx) Delete(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToAInterfaceTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToAInterfaceTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToZSite struct {
	db *gorm.DB

	field.RelationField
}

func (a circuitBelongsToZSite) Where(conds ...field.Expr) *circuitBelongsToZSite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToZSite) WithContext(ctx context.Context) *circuitBelongsToZSite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToZSite) Session(session *gorm.Session) *circuitBelongsToZSite {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToZSite) Model(m *models.Circuit) *circuitBelongsToZSiteTx {
	return &circuitBelongsToZSiteTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToZSiteTx struct{ tx *gorm.Association }

func (a circuitBelongsToZSiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToZSiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToZSiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToZSiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToZSiteTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToZSiteTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToZDevice struct {
	db *gorm.DB

	field.RelationField
}

func (a circuitBelongsToZDevice) Where(conds ...field.Expr) *circuitBelongsToZDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToZDevice) WithContext(ctx context.Context) *circuitBelongsToZDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToZDevice) Session(session *gorm.Session) *circuitBelongsToZDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToZDevice) Model(m *models.Circuit) *circuitBelongsToZDeviceTx {
	return &circuitBelongsToZDeviceTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToZDeviceTx struct{ tx *gorm.Association }

func (a circuitBelongsToZDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToZDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToZDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToZDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToZDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToZDeviceTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToZInterface struct {
	db *gorm.DB

	field.RelationField
}

func (a circuitBelongsToZInterface) Where(conds ...field.Expr) *circuitBelongsToZInterface {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToZInterface) WithContext(ctx context.Context) *circuitBelongsToZInterface {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToZInterface) Session(session *gorm.Session) *circuitBelongsToZInterface {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToZInterface) Model(m *models.Circuit) *circuitBelongsToZInterfaceTx {
	return &circuitBelongsToZInterfaceTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToZInterfaceTx struct{ tx *gorm.Association }

func (a circuitBelongsToZInterfaceTx) Find() (result *models.DeviceInterface, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToZInterfaceTx) Append(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToZInterfaceTx) Replace(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToZInterfaceTx) Delete(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToZInterfaceTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToZInterfaceTx) Count() int64 {
	return a.tx.Count()
}

type circuitBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a circuitBelongsToOrganization) Where(conds ...field.Expr) *circuitBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a circuitBelongsToOrganization) WithContext(ctx context.Context) *circuitBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a circuitBelongsToOrganization) Session(session *gorm.Session) *circuitBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a circuitBelongsToOrganization) Model(m *models.Circuit) *circuitBelongsToOrganizationTx {
	return &circuitBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type circuitBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a circuitBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a circuitBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a circuitBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a circuitBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a circuitBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a circuitBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type circuitDo struct{ gen.DO }

type ICircuitDo interface {
	gen.SubQuery
	Debug() ICircuitDo
	WithContext(ctx context.Context) ICircuitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICircuitDo
	WriteDB() ICircuitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICircuitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICircuitDo
	Not(conds ...gen.Condition) ICircuitDo
	Or(conds ...gen.Condition) ICircuitDo
	Select(conds ...field.Expr) ICircuitDo
	Where(conds ...gen.Condition) ICircuitDo
	Order(conds ...field.Expr) ICircuitDo
	Distinct(cols ...field.Expr) ICircuitDo
	Omit(cols ...field.Expr) ICircuitDo
	Join(table schema.Tabler, on ...field.Expr) ICircuitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICircuitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICircuitDo
	Group(cols ...field.Expr) ICircuitDo
	Having(conds ...gen.Condition) ICircuitDo
	Limit(limit int) ICircuitDo
	Offset(offset int) ICircuitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICircuitDo
	Unscoped() ICircuitDo
	Create(values ...*models.Circuit) error
	CreateInBatches(values []*models.Circuit, batchSize int) error
	Save(values ...*models.Circuit) error
	First() (*models.Circuit, error)
	Take() (*models.Circuit, error)
	Last() (*models.Circuit, error)
	Find() ([]*models.Circuit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Circuit, err error)
	FindInBatches(result *[]*models.Circuit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Circuit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICircuitDo
	Assign(attrs ...field.AssignExpr) ICircuitDo
	Joins(fields ...field.RelationField) ICircuitDo
	Preload(fields ...field.RelationField) ICircuitDo
	FirstOrInit() (*models.Circuit, error)
	FirstOrCreate() (*models.Circuit, error)
	FindByPage(offset int, limit int) (result []*models.Circuit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICircuitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c circuitDo) Debug() ICircuitDo {
	return c.withDO(c.DO.Debug())
}

func (c circuitDo) WithContext(ctx context.Context) ICircuitDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c circuitDo) ReadDB() ICircuitDo {
	return c.Clauses(dbresolver.Read)
}

func (c circuitDo) WriteDB() ICircuitDo {
	return c.Clauses(dbresolver.Write)
}

func (c circuitDo) Session(config *gorm.Session) ICircuitDo {
	return c.withDO(c.DO.Session(config))
}

func (c circuitDo) Clauses(conds ...clause.Expression) ICircuitDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c circuitDo) Returning(value interface{}, columns ...string) ICircuitDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c circuitDo) Not(conds ...gen.Condition) ICircuitDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c circuitDo) Or(conds ...gen.Condition) ICircuitDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c circuitDo) Select(conds ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c circuitDo) Where(conds ...gen.Condition) ICircuitDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c circuitDo) Order(conds ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c circuitDo) Distinct(cols ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c circuitDo) Omit(cols ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c circuitDo) Join(table schema.Tabler, on ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c circuitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c circuitDo) RightJoin(table schema.Tabler, on ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c circuitDo) Group(cols ...field.Expr) ICircuitDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c circuitDo) Having(conds ...gen.Condition) ICircuitDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c circuitDo) Limit(limit int) ICircuitDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c circuitDo) Offset(offset int) ICircuitDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c circuitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICircuitDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c circuitDo) Unscoped() ICircuitDo {
	return c.withDO(c.DO.Unscoped())
}

func (c circuitDo) Create(values ...*models.Circuit) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c circuitDo) CreateInBatches(values []*models.Circuit, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c circuitDo) Save(values ...*models.Circuit) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c circuitDo) First() (*models.Circuit, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Circuit), nil
	}
}

func (c circuitDo) Take() (*models.Circuit, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Circuit), nil
	}
}

func (c circuitDo) Last() (*models.Circuit, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Circuit), nil
	}
}

func (c circuitDo) Find() ([]*models.Circuit, error) {
	result, err := c.DO.Find()
	return result.([]*models.Circuit), err
}

func (c circuitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Circuit, err error) {
	buf := make([]*models.Circuit, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c circuitDo) FindInBatches(result *[]*models.Circuit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c circuitDo) Attrs(attrs ...field.AssignExpr) ICircuitDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c circuitDo) Assign(attrs ...field.AssignExpr) ICircuitDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c circuitDo) Joins(fields ...field.RelationField) ICircuitDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c circuitDo) Preload(fields ...field.RelationField) ICircuitDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c circuitDo) FirstOrInit() (*models.Circuit, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Circuit), nil
	}
}

func (c circuitDo) FirstOrCreate() (*models.Circuit, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Circuit), nil
	}
}

func (c circuitDo) FindByPage(offset int, limit int) (result []*models.Circuit, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c circuitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c circuitDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c circuitDo) Delete(models ...*models.Circuit) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *circuitDo) withDO(do gen.Dao) *circuitDo {
	c.DO = *do.(*gen.DO)
	return c
}

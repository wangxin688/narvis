// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newServerSnmpCredential(db *gorm.DB, opts ...gen.DOOption) serverSnmpCredential {
	_serverSnmpCredential := serverSnmpCredential{}

	_serverSnmpCredential.serverSnmpCredentialDo.UseDB(db, opts...)
	_serverSnmpCredential.serverSnmpCredentialDo.UseModel(&models.ServerSnmpCredential{})

	tableName := _serverSnmpCredential.serverSnmpCredentialDo.TableName()
	_serverSnmpCredential.ALL = field.NewAsterisk(tableName)
	_serverSnmpCredential.Id = field.NewString(tableName, "id")
	_serverSnmpCredential.CreatedAt = field.NewTime(tableName, "createdAt")
	_serverSnmpCredential.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_serverSnmpCredential.Community = field.NewString(tableName, "community")
	_serverSnmpCredential.MaxRepetitions = field.NewUint8(tableName, "maxRepetitions")
	_serverSnmpCredential.Timeout = field.NewUint8(tableName, "timeout")
	_serverSnmpCredential.Port = field.NewUint16(tableName, "port")
	_serverSnmpCredential.ServerId = field.NewString(tableName, "serverId")
	_serverSnmpCredential.OrganizationId = field.NewString(tableName, "organizationId")
	_serverSnmpCredential.Server = serverSnmpCredentialBelongsToServer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Server", "models.Server"),
		Rack: struct {
			field.RelationField
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Server.Rack", "models.Rack"),
			Site: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Server.Rack.Site", "models.Site"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Server.Rack.Site.Organization", "models.Organization"),
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Server.Rack.Organization", "models.Organization"),
			},
		},
		Template: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Server.Template", "models.Template"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Server.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Server.Organization", "models.Organization"),
		},
	}

	_serverSnmpCredential.Organization = serverSnmpCredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_serverSnmpCredential.fillFieldMap()

	return _serverSnmpCredential
}

type serverSnmpCredential struct {
	serverSnmpCredentialDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Community      field.String
	MaxRepetitions field.Uint8
	Timeout        field.Uint8
	Port           field.Uint16
	ServerId       field.String
	OrganizationId field.String
	Server         serverSnmpCredentialBelongsToServer

	Organization serverSnmpCredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (s serverSnmpCredential) Table(newTableName string) *serverSnmpCredential {
	s.serverSnmpCredentialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverSnmpCredential) As(alias string) *serverSnmpCredential {
	s.serverSnmpCredentialDo.DO = *(s.serverSnmpCredentialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverSnmpCredential) updateTableName(table string) *serverSnmpCredential {
	s.ALL = field.NewAsterisk(table)
	s.Id = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "createdAt")
	s.UpdatedAt = field.NewTime(table, "updatedAt")
	s.Community = field.NewString(table, "community")
	s.MaxRepetitions = field.NewUint8(table, "maxRepetitions")
	s.Timeout = field.NewUint8(table, "timeout")
	s.Port = field.NewUint16(table, "port")
	s.ServerId = field.NewString(table, "serverId")
	s.OrganizationId = field.NewString(table, "organizationId")

	s.fillFieldMap()

	return s
}

func (s *serverSnmpCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverSnmpCredential) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.Id
	s.fieldMap["createdAt"] = s.CreatedAt
	s.fieldMap["updatedAt"] = s.UpdatedAt
	s.fieldMap["community"] = s.Community
	s.fieldMap["maxRepetitions"] = s.MaxRepetitions
	s.fieldMap["timeout"] = s.Timeout
	s.fieldMap["port"] = s.Port
	s.fieldMap["serverId"] = s.ServerId
	s.fieldMap["organizationId"] = s.OrganizationId

}

func (s serverSnmpCredential) clone(db *gorm.DB) serverSnmpCredential {
	s.serverSnmpCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverSnmpCredential) replaceDB(db *gorm.DB) serverSnmpCredential {
	s.serverSnmpCredentialDo.ReplaceDB(db)
	return s
}

type serverSnmpCredentialBelongsToServer struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Site struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Template struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a serverSnmpCredentialBelongsToServer) Where(conds ...field.Expr) *serverSnmpCredentialBelongsToServer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serverSnmpCredentialBelongsToServer) WithContext(ctx context.Context) *serverSnmpCredentialBelongsToServer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serverSnmpCredentialBelongsToServer) Session(session *gorm.Session) *serverSnmpCredentialBelongsToServer {
	a.db = a.db.Session(session)
	return &a
}

func (a serverSnmpCredentialBelongsToServer) Model(m *models.ServerSnmpCredential) *serverSnmpCredentialBelongsToServerTx {
	return &serverSnmpCredentialBelongsToServerTx{a.db.Model(m).Association(a.Name())}
}

type serverSnmpCredentialBelongsToServerTx struct{ tx *gorm.Association }

func (a serverSnmpCredentialBelongsToServerTx) Find() (result *models.Server, err error) {
	return result, a.tx.Find(&result)
}

func (a serverSnmpCredentialBelongsToServerTx) Append(values ...*models.Server) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serverSnmpCredentialBelongsToServerTx) Replace(values ...*models.Server) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serverSnmpCredentialBelongsToServerTx) Delete(values ...*models.Server) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serverSnmpCredentialBelongsToServerTx) Clear() error {
	return a.tx.Clear()
}

func (a serverSnmpCredentialBelongsToServerTx) Count() int64 {
	return a.tx.Count()
}

type serverSnmpCredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a serverSnmpCredentialBelongsToOrganization) Where(conds ...field.Expr) *serverSnmpCredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serverSnmpCredentialBelongsToOrganization) WithContext(ctx context.Context) *serverSnmpCredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serverSnmpCredentialBelongsToOrganization) Session(session *gorm.Session) *serverSnmpCredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a serverSnmpCredentialBelongsToOrganization) Model(m *models.ServerSnmpCredential) *serverSnmpCredentialBelongsToOrganizationTx {
	return &serverSnmpCredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type serverSnmpCredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a serverSnmpCredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a serverSnmpCredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serverSnmpCredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serverSnmpCredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serverSnmpCredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a serverSnmpCredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type serverSnmpCredentialDo struct{ gen.DO }

type IServerSnmpCredentialDo interface {
	gen.SubQuery
	Debug() IServerSnmpCredentialDo
	WithContext(ctx context.Context) IServerSnmpCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerSnmpCredentialDo
	WriteDB() IServerSnmpCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerSnmpCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerSnmpCredentialDo
	Not(conds ...gen.Condition) IServerSnmpCredentialDo
	Or(conds ...gen.Condition) IServerSnmpCredentialDo
	Select(conds ...field.Expr) IServerSnmpCredentialDo
	Where(conds ...gen.Condition) IServerSnmpCredentialDo
	Order(conds ...field.Expr) IServerSnmpCredentialDo
	Distinct(cols ...field.Expr) IServerSnmpCredentialDo
	Omit(cols ...field.Expr) IServerSnmpCredentialDo
	Join(table schema.Tabler, on ...field.Expr) IServerSnmpCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerSnmpCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerSnmpCredentialDo
	Group(cols ...field.Expr) IServerSnmpCredentialDo
	Having(conds ...gen.Condition) IServerSnmpCredentialDo
	Limit(limit int) IServerSnmpCredentialDo
	Offset(offset int) IServerSnmpCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSnmpCredentialDo
	Unscoped() IServerSnmpCredentialDo
	Create(values ...*models.ServerSnmpCredential) error
	CreateInBatches(values []*models.ServerSnmpCredential, batchSize int) error
	Save(values ...*models.ServerSnmpCredential) error
	First() (*models.ServerSnmpCredential, error)
	Take() (*models.ServerSnmpCredential, error)
	Last() (*models.ServerSnmpCredential, error)
	Find() ([]*models.ServerSnmpCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServerSnmpCredential, err error)
	FindInBatches(result *[]*models.ServerSnmpCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ServerSnmpCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerSnmpCredentialDo
	Assign(attrs ...field.AssignExpr) IServerSnmpCredentialDo
	Joins(fields ...field.RelationField) IServerSnmpCredentialDo
	Preload(fields ...field.RelationField) IServerSnmpCredentialDo
	FirstOrInit() (*models.ServerSnmpCredential, error)
	FirstOrCreate() (*models.ServerSnmpCredential, error)
	FindByPage(offset int, limit int) (result []*models.ServerSnmpCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerSnmpCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverSnmpCredentialDo) Debug() IServerSnmpCredentialDo {
	return s.withDO(s.DO.Debug())
}

func (s serverSnmpCredentialDo) WithContext(ctx context.Context) IServerSnmpCredentialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverSnmpCredentialDo) ReadDB() IServerSnmpCredentialDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverSnmpCredentialDo) WriteDB() IServerSnmpCredentialDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverSnmpCredentialDo) Session(config *gorm.Session) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverSnmpCredentialDo) Clauses(conds ...clause.Expression) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverSnmpCredentialDo) Returning(value interface{}, columns ...string) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverSnmpCredentialDo) Not(conds ...gen.Condition) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverSnmpCredentialDo) Or(conds ...gen.Condition) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverSnmpCredentialDo) Select(conds ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverSnmpCredentialDo) Where(conds ...gen.Condition) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverSnmpCredentialDo) Order(conds ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverSnmpCredentialDo) Distinct(cols ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverSnmpCredentialDo) Omit(cols ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverSnmpCredentialDo) Join(table schema.Tabler, on ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverSnmpCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverSnmpCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverSnmpCredentialDo) Group(cols ...field.Expr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverSnmpCredentialDo) Having(conds ...gen.Condition) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverSnmpCredentialDo) Limit(limit int) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverSnmpCredentialDo) Offset(offset int) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverSnmpCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverSnmpCredentialDo) Unscoped() IServerSnmpCredentialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverSnmpCredentialDo) Create(values ...*models.ServerSnmpCredential) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverSnmpCredentialDo) CreateInBatches(values []*models.ServerSnmpCredential, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverSnmpCredentialDo) Save(values ...*models.ServerSnmpCredential) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverSnmpCredentialDo) First() (*models.ServerSnmpCredential, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerSnmpCredential), nil
	}
}

func (s serverSnmpCredentialDo) Take() (*models.ServerSnmpCredential, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerSnmpCredential), nil
	}
}

func (s serverSnmpCredentialDo) Last() (*models.ServerSnmpCredential, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerSnmpCredential), nil
	}
}

func (s serverSnmpCredentialDo) Find() ([]*models.ServerSnmpCredential, error) {
	result, err := s.DO.Find()
	return result.([]*models.ServerSnmpCredential), err
}

func (s serverSnmpCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServerSnmpCredential, err error) {
	buf := make([]*models.ServerSnmpCredential, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverSnmpCredentialDo) FindInBatches(result *[]*models.ServerSnmpCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverSnmpCredentialDo) Attrs(attrs ...field.AssignExpr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverSnmpCredentialDo) Assign(attrs ...field.AssignExpr) IServerSnmpCredentialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverSnmpCredentialDo) Joins(fields ...field.RelationField) IServerSnmpCredentialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverSnmpCredentialDo) Preload(fields ...field.RelationField) IServerSnmpCredentialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverSnmpCredentialDo) FirstOrInit() (*models.ServerSnmpCredential, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerSnmpCredential), nil
	}
}

func (s serverSnmpCredentialDo) FirstOrCreate() (*models.ServerSnmpCredential, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServerSnmpCredential), nil
	}
}

func (s serverSnmpCredentialDo) FindByPage(offset int, limit int) (result []*models.ServerSnmpCredential, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverSnmpCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverSnmpCredentialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverSnmpCredentialDo) Delete(models ...*models.ServerSnmpCredential) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverSnmpCredentialDo) withDO(do gen.Dao) *serverSnmpCredentialDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAuditLog(db *gorm.DB, opts ...gen.DOOption) auditLog {
	_auditLog := auditLog{}

	_auditLog.auditLogDo.UseDB(db, opts...)
	_auditLog.auditLogDo.UseModel(&models.AuditLog{})

	tableName := _auditLog.auditLogDo.TableName()
	_auditLog.ALL = field.NewAsterisk(tableName)
	_auditLog.Id = field.NewString(tableName, "id")
	_auditLog.CreatedAt = field.NewTime(tableName, "createdAt")
	_auditLog.ObjectId = field.NewString(tableName, "objectId")
	_auditLog.ObjectType = field.NewString(tableName, "objectType")
	_auditLog.RequestId = field.NewString(tableName, "requestId")
	_auditLog.UserId = field.NewString(tableName, "userId")
	_auditLog.Action = field.NewString(tableName, "action")
	_auditLog.Data = field.NewField(tableName, "data")
	_auditLog.Diff = field.NewField(tableName, "diff")
	_auditLog.OrganizationId = field.NewString(tableName, "organizationId")

	_auditLog.fillFieldMap()

	return _auditLog
}

type auditLog struct {
	auditLogDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	ObjectId       field.String
	ObjectType     field.String
	RequestId      field.String
	UserId         field.String
	Action         field.String
	Data           field.Field
	Diff           field.Field
	OrganizationId field.String

	fieldMap map[string]field.Expr
}

func (a auditLog) Table(newTableName string) *auditLog {
	a.auditLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a auditLog) As(alias string) *auditLog {
	a.auditLogDo.DO = *(a.auditLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *auditLog) updateTableName(table string) *auditLog {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewString(table, "id")
	a.CreatedAt = field.NewTime(table, "createdAt")
	a.ObjectId = field.NewString(table, "objectId")
	a.ObjectType = field.NewString(table, "objectType")
	a.RequestId = field.NewString(table, "requestId")
	a.UserId = field.NewString(table, "userId")
	a.Action = field.NewString(table, "action")
	a.Data = field.NewField(table, "data")
	a.Diff = field.NewField(table, "diff")
	a.OrganizationId = field.NewString(table, "organizationId")

	a.fillFieldMap()

	return a
}

func (a *auditLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *auditLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.Id
	a.fieldMap["createdAt"] = a.CreatedAt
	a.fieldMap["objectId"] = a.ObjectId
	a.fieldMap["objectType"] = a.ObjectType
	a.fieldMap["requestId"] = a.RequestId
	a.fieldMap["userId"] = a.UserId
	a.fieldMap["action"] = a.Action
	a.fieldMap["data"] = a.Data
	a.fieldMap["diff"] = a.Diff
	a.fieldMap["organizationId"] = a.OrganizationId
}

func (a auditLog) clone(db *gorm.DB) auditLog {
	a.auditLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a auditLog) replaceDB(db *gorm.DB) auditLog {
	a.auditLogDo.ReplaceDB(db)
	return a
}

type auditLogDo struct{ gen.DO }

type IAuditLogDo interface {
	gen.SubQuery
	Debug() IAuditLogDo
	WithContext(ctx context.Context) IAuditLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuditLogDo
	WriteDB() IAuditLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuditLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuditLogDo
	Not(conds ...gen.Condition) IAuditLogDo
	Or(conds ...gen.Condition) IAuditLogDo
	Select(conds ...field.Expr) IAuditLogDo
	Where(conds ...gen.Condition) IAuditLogDo
	Order(conds ...field.Expr) IAuditLogDo
	Distinct(cols ...field.Expr) IAuditLogDo
	Omit(cols ...field.Expr) IAuditLogDo
	Join(table schema.Tabler, on ...field.Expr) IAuditLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuditLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuditLogDo
	Group(cols ...field.Expr) IAuditLogDo
	Having(conds ...gen.Condition) IAuditLogDo
	Limit(limit int) IAuditLogDo
	Offset(offset int) IAuditLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuditLogDo
	Unscoped() IAuditLogDo
	Create(values ...*models.AuditLog) error
	CreateInBatches(values []*models.AuditLog, batchSize int) error
	Save(values ...*models.AuditLog) error
	First() (*models.AuditLog, error)
	Take() (*models.AuditLog, error)
	Last() (*models.AuditLog, error)
	Find() ([]*models.AuditLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuditLog, err error)
	FindInBatches(result *[]*models.AuditLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AuditLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuditLogDo
	Assign(attrs ...field.AssignExpr) IAuditLogDo
	Joins(fields ...field.RelationField) IAuditLogDo
	Preload(fields ...field.RelationField) IAuditLogDo
	FirstOrInit() (*models.AuditLog, error)
	FirstOrCreate() (*models.AuditLog, error)
	FindByPage(offset int, limit int) (result []*models.AuditLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuditLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a auditLogDo) Debug() IAuditLogDo {
	return a.withDO(a.DO.Debug())
}

func (a auditLogDo) WithContext(ctx context.Context) IAuditLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a auditLogDo) ReadDB() IAuditLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a auditLogDo) WriteDB() IAuditLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a auditLogDo) Session(config *gorm.Session) IAuditLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a auditLogDo) Clauses(conds ...clause.Expression) IAuditLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a auditLogDo) Returning(value interface{}, columns ...string) IAuditLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a auditLogDo) Not(conds ...gen.Condition) IAuditLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a auditLogDo) Or(conds ...gen.Condition) IAuditLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a auditLogDo) Select(conds ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a auditLogDo) Where(conds ...gen.Condition) IAuditLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a auditLogDo) Order(conds ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a auditLogDo) Distinct(cols ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a auditLogDo) Omit(cols ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a auditLogDo) Join(table schema.Tabler, on ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a auditLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a auditLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a auditLogDo) Group(cols ...field.Expr) IAuditLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a auditLogDo) Having(conds ...gen.Condition) IAuditLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a auditLogDo) Limit(limit int) IAuditLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a auditLogDo) Offset(offset int) IAuditLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a auditLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuditLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a auditLogDo) Unscoped() IAuditLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a auditLogDo) Create(values ...*models.AuditLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a auditLogDo) CreateInBatches(values []*models.AuditLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a auditLogDo) Save(values ...*models.AuditLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a auditLogDo) First() (*models.AuditLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuditLog), nil
	}
}

func (a auditLogDo) Take() (*models.AuditLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuditLog), nil
	}
}

func (a auditLogDo) Last() (*models.AuditLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuditLog), nil
	}
}

func (a auditLogDo) Find() ([]*models.AuditLog, error) {
	result, err := a.DO.Find()
	return result.([]*models.AuditLog), err
}

func (a auditLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuditLog, err error) {
	buf := make([]*models.AuditLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a auditLogDo) FindInBatches(result *[]*models.AuditLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a auditLogDo) Attrs(attrs ...field.AssignExpr) IAuditLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a auditLogDo) Assign(attrs ...field.AssignExpr) IAuditLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a auditLogDo) Joins(fields ...field.RelationField) IAuditLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a auditLogDo) Preload(fields ...field.RelationField) IAuditLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a auditLogDo) FirstOrInit() (*models.AuditLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuditLog), nil
	}
}

func (a auditLogDo) FirstOrCreate() (*models.AuditLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuditLog), nil
	}
}

func (a auditLogDo) FindByPage(offset int, limit int) (result []*models.AuditLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a auditLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a auditLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a auditLogDo) Delete(models ...*models.AuditLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *auditLogDo) withDO(do gen.Dao) *auditLogDo {
	a.DO = *do.(*gen.DO)
	return a
}

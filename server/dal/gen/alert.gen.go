// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAlert(db *gorm.DB, opts ...gen.DOOption) alert {
	_alert := alert{}

	_alert.alertDo.UseDB(db, opts...)
	_alert.alertDo.UseModel(&models.Alert{})

	tableName := _alert.alertDo.TableName()
	_alert.ALL = field.NewAsterisk(tableName)
	_alert.ID = field.NewString(tableName, "id")
	_alert.Status = field.NewUint8(tableName, "status")
	_alert.StartedAt = field.NewTime(tableName, "started_at")
	_alert.ResolvedAt = field.NewTime(tableName, "resolved_at")
	_alert.Acknowledged = field.NewBool(tableName, "acknowledged")
	_alert.Suppressed = field.NewBool(tableName, "suppressed")
	_alert.Inhibited = field.NewBool(tableName, "inhibited")
	_alert.Severity = field.NewUint8(tableName, "severity")
	_alert.AlertName = field.NewString(tableName, "alert_name")
	_alert.Tag = field.NewField(tableName, "tag")
	_alert.EventID = field.NewString(tableName, "event_id")
	_alert.TriggerID = field.NewString(tableName, "trigger_id")
	_alert.UserID = field.NewString(tableName, "user_id")
	_alert.SiteID = field.NewString(tableName, "site_id")
	_alert.DeviceID = field.NewString(tableName, "device_id")
	_alert.ApID = field.NewString(tableName, "ap_id")
	_alert.CircuitID = field.NewString(tableName, "circuit_id")
	_alert.DeviceInterfaceID = field.NewString(tableName, "device_interface_id")
	_alert.MaintenanceID = field.NewString(tableName, "maintenance_id")
	_alert.OrganizationID = field.NewString(tableName, "organization_id")
	_alert.User = alertBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
		Group: struct {
			field.RelationField
			Role struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Group", "models.Group"),
			Role: struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
				Menus struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}
			}{
				RelationField: field.NewRelation("User.Group.Role", "models.Role"),
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.Group.Role.Organization", "models.Organization"),
				},
				Menus: struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Permission struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}
				}{
					RelationField: field.NewRelation("User.Group.Role.Menus", "models.Menu"),
					Parent: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("User.Group.Role.Menus.Parent", "models.Menu"),
					},
					Permission: struct {
						field.RelationField
						Menu struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("User.Group.Role.Menus.Permission", "models.Permission"),
						Menu: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("User.Group.Role.Menus.Permission.Menu", "models.Menu"),
						},
					},
				},
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Group.Organization", "models.Organization"),
			},
		},
		Role: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.Role", "models.Role"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.Organization", "models.Organization"),
		},
	}

	_alert.Site = alertBelongsToSite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Site", "models.Site"),
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Site.Organization", "models.Organization"),
		},
	}

	_alert.Device = alertBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "models.Device"),
		Rack: struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Device.Rack", "models.Rack"),
			Location: struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Device.Rack.Location", "models.Location"),
				Parent: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Parent", "models.Location"),
				},
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Site", "models.Site"),
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Organization", "models.Organization"),
				},
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Organization", "models.Organization"),
			},
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Organization", "models.Organization"),
		},
	}

	_alert.Ap = alertBelongsToAp{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Ap", "models.AP"),
		ActiveWac: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Ap.ActiveWac", "models.Device"),
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Ap.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Ap.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Ap.Organization", "models.Organization"),
		},
	}

	_alert.Circuit = alertBelongsToCircuit{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Circuit", "models.Circuit"),
		Provider: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.Provider", "models.Provider"),
		},
		ASite: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.ASite", "models.Site"),
		},
		ADevice: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.ADevice", "models.Device"),
		},
		AInterface: struct {
			field.RelationField
			Device struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Circuit.AInterface", "models.DeviceInterface"),
			Device: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Circuit.AInterface.Device", "models.Device"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Circuit.AInterface.Site", "models.Site"),
			},
		},
		ZSite: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.ZSite", "models.Site"),
		},
		ZDevice: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.ZDevice", "models.Device"),
		},
		ZInterface: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.ZInterface", "models.DeviceInterface"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Circuit.Organization", "models.Organization"),
		},
	}

	_alert.DeviceInterface = alertBelongsToDeviceInterface{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DeviceInterface", "models.DeviceInterface"),
	}

	_alert.Maintenance = alertBelongsToMaintenance{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Maintenance", "models.Maintenance"),
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Maintenance.Organization", "models.Organization"),
		},
		Alert: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Device struct {
				field.RelationField
			}
			Ap struct {
				field.RelationField
			}
			Circuit struct {
				field.RelationField
			}
			DeviceInterface struct {
				field.RelationField
			}
			Maintenance struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Maintenance.Alert", "models.Alert"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.User", "models.User"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.Site", "models.Site"),
			},
			Device: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.Device", "models.Device"),
			},
			Ap: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.Ap", "models.AP"),
			},
			Circuit: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.Circuit", "models.Circuit"),
			},
			DeviceInterface: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.DeviceInterface", "models.DeviceInterface"),
			},
			Maintenance: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.Maintenance", "models.Maintenance"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Maintenance.Alert.Organization", "models.Organization"),
			},
		},
	}

	_alert.Organization = alertBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_alert.fillFieldMap()

	return _alert
}

type alert struct {
	alertDo

	ALL               field.Asterisk
	ID                field.String
	Status            field.Uint8
	StartedAt         field.Time
	ResolvedAt        field.Time
	Acknowledged      field.Bool
	Suppressed        field.Bool
	Inhibited         field.Bool
	Severity          field.Uint8
	AlertName         field.String
	Tag               field.Field
	EventID           field.String
	TriggerID         field.String
	UserID            field.String
	SiteID            field.String
	DeviceID          field.String
	ApID              field.String
	CircuitID         field.String
	DeviceInterfaceID field.String
	MaintenanceID     field.String
	OrganizationID    field.String
	User              alertBelongsToUser

	Site alertBelongsToSite

	Device alertBelongsToDevice

	Ap alertBelongsToAp

	Circuit alertBelongsToCircuit

	DeviceInterface alertBelongsToDeviceInterface

	Maintenance alertBelongsToMaintenance

	Organization alertBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (a alert) Table(newTableName string) *alert {
	a.alertDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alert) As(alias string) *alert {
	a.alertDo.DO = *(a.alertDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alert) updateTableName(table string) *alert {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.Status = field.NewUint8(table, "status")
	a.StartedAt = field.NewTime(table, "started_at")
	a.ResolvedAt = field.NewTime(table, "resolved_at")
	a.Acknowledged = field.NewBool(table, "acknowledged")
	a.Suppressed = field.NewBool(table, "suppressed")
	a.Inhibited = field.NewBool(table, "inhibited")
	a.Severity = field.NewUint8(table, "severity")
	a.AlertName = field.NewString(table, "alert_name")
	a.Tag = field.NewField(table, "tag")
	a.EventID = field.NewString(table, "event_id")
	a.TriggerID = field.NewString(table, "trigger_id")
	a.UserID = field.NewString(table, "user_id")
	a.SiteID = field.NewString(table, "site_id")
	a.DeviceID = field.NewString(table, "device_id")
	a.ApID = field.NewString(table, "ap_id")
	a.CircuitID = field.NewString(table, "circuit_id")
	a.DeviceInterfaceID = field.NewString(table, "device_interface_id")
	a.MaintenanceID = field.NewString(table, "maintenance_id")
	a.OrganizationID = field.NewString(table, "organization_id")

	a.fillFieldMap()

	return a
}

func (a *alert) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alert) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 28)
	a.fieldMap["id"] = a.ID
	a.fieldMap["status"] = a.Status
	a.fieldMap["started_at"] = a.StartedAt
	a.fieldMap["resolved_at"] = a.ResolvedAt
	a.fieldMap["acknowledged"] = a.Acknowledged
	a.fieldMap["suppressed"] = a.Suppressed
	a.fieldMap["inhibited"] = a.Inhibited
	a.fieldMap["severity"] = a.Severity
	a.fieldMap["alert_name"] = a.AlertName
	a.fieldMap["tag"] = a.Tag
	a.fieldMap["event_id"] = a.EventID
	a.fieldMap["trigger_id"] = a.TriggerID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["site_id"] = a.SiteID
	a.fieldMap["device_id"] = a.DeviceID
	a.fieldMap["ap_id"] = a.ApID
	a.fieldMap["circuit_id"] = a.CircuitID
	a.fieldMap["device_interface_id"] = a.DeviceInterfaceID
	a.fieldMap["maintenance_id"] = a.MaintenanceID
	a.fieldMap["organization_id"] = a.OrganizationID

}

func (a alert) clone(db *gorm.DB) alert {
	a.alertDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alert) replaceDB(db *gorm.DB) alert {
	a.alertDo.ReplaceDB(db)
	return a
}

type alertBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	Group struct {
		field.RelationField
		Role struct {
			field.RelationField
			Organization struct {
				field.RelationField
			}
			Menus struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Permission struct {
					field.RelationField
					Menu struct {
						field.RelationField
					}
				}
			}
		}
		Organization struct {
			field.RelationField
		}
	}
	Role struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a alertBelongsToUser) Where(conds ...field.Expr) *alertBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToUser) WithContext(ctx context.Context) *alertBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToUser) Session(session *gorm.Session) *alertBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToUser) Model(m *models.Alert) *alertBelongsToUserTx {
	return &alertBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToUserTx struct{ tx *gorm.Association }

func (a alertBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToSite struct {
	db *gorm.DB

	field.RelationField

	Organization struct {
		field.RelationField
	}
}

func (a alertBelongsToSite) Where(conds ...field.Expr) *alertBelongsToSite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToSite) WithContext(ctx context.Context) *alertBelongsToSite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToSite) Session(session *gorm.Session) *alertBelongsToSite {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToSite) Model(m *models.Alert) *alertBelongsToSiteTx {
	return &alertBelongsToSiteTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToSiteTx struct{ tx *gorm.Association }

func (a alertBelongsToSiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToSiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToSiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToSiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToSiteTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToSiteTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToDevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Location struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a alertBelongsToDevice) Where(conds ...field.Expr) *alertBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToDevice) WithContext(ctx context.Context) *alertBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToDevice) Session(session *gorm.Session) *alertBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToDevice) Model(m *models.Alert) *alertBelongsToDeviceTx {
	return &alertBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToDeviceTx struct{ tx *gorm.Association }

func (a alertBelongsToDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToAp struct {
	db *gorm.DB

	field.RelationField

	ActiveWac struct {
		field.RelationField
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a alertBelongsToAp) Where(conds ...field.Expr) *alertBelongsToAp {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToAp) WithContext(ctx context.Context) *alertBelongsToAp {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToAp) Session(session *gorm.Session) *alertBelongsToAp {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToAp) Model(m *models.Alert) *alertBelongsToApTx {
	return &alertBelongsToApTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToApTx struct{ tx *gorm.Association }

func (a alertBelongsToApTx) Find() (result *models.AP, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToApTx) Append(values ...*models.AP) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToApTx) Replace(values ...*models.AP) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToApTx) Delete(values ...*models.AP) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToApTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToApTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToCircuit struct {
	db *gorm.DB

	field.RelationField

	Provider struct {
		field.RelationField
	}
	ASite struct {
		field.RelationField
	}
	ADevice struct {
		field.RelationField
	}
	AInterface struct {
		field.RelationField
		Device struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
	}
	ZSite struct {
		field.RelationField
	}
	ZDevice struct {
		field.RelationField
	}
	ZInterface struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a alertBelongsToCircuit) Where(conds ...field.Expr) *alertBelongsToCircuit {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToCircuit) WithContext(ctx context.Context) *alertBelongsToCircuit {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToCircuit) Session(session *gorm.Session) *alertBelongsToCircuit {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToCircuit) Model(m *models.Alert) *alertBelongsToCircuitTx {
	return &alertBelongsToCircuitTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToCircuitTx struct{ tx *gorm.Association }

func (a alertBelongsToCircuitTx) Find() (result *models.Circuit, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToCircuitTx) Append(values ...*models.Circuit) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToCircuitTx) Replace(values ...*models.Circuit) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToCircuitTx) Delete(values ...*models.Circuit) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToCircuitTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToCircuitTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToDeviceInterface struct {
	db *gorm.DB

	field.RelationField
}

func (a alertBelongsToDeviceInterface) Where(conds ...field.Expr) *alertBelongsToDeviceInterface {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToDeviceInterface) WithContext(ctx context.Context) *alertBelongsToDeviceInterface {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToDeviceInterface) Session(session *gorm.Session) *alertBelongsToDeviceInterface {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToDeviceInterface) Model(m *models.Alert) *alertBelongsToDeviceInterfaceTx {
	return &alertBelongsToDeviceInterfaceTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToDeviceInterfaceTx struct{ tx *gorm.Association }

func (a alertBelongsToDeviceInterfaceTx) Find() (result *models.DeviceInterface, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToDeviceInterfaceTx) Append(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToDeviceInterfaceTx) Replace(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToDeviceInterfaceTx) Delete(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToDeviceInterfaceTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToDeviceInterfaceTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToMaintenance struct {
	db *gorm.DB

	field.RelationField

	Organization struct {
		field.RelationField
	}
	Alert struct {
		field.RelationField
		User struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
		Device struct {
			field.RelationField
		}
		Ap struct {
			field.RelationField
		}
		Circuit struct {
			field.RelationField
		}
		DeviceInterface struct {
			field.RelationField
		}
		Maintenance struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
}

func (a alertBelongsToMaintenance) Where(conds ...field.Expr) *alertBelongsToMaintenance {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToMaintenance) WithContext(ctx context.Context) *alertBelongsToMaintenance {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToMaintenance) Session(session *gorm.Session) *alertBelongsToMaintenance {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToMaintenance) Model(m *models.Alert) *alertBelongsToMaintenanceTx {
	return &alertBelongsToMaintenanceTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToMaintenanceTx struct{ tx *gorm.Association }

func (a alertBelongsToMaintenanceTx) Find() (result *models.Maintenance, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToMaintenanceTx) Append(values ...*models.Maintenance) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToMaintenanceTx) Replace(values ...*models.Maintenance) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToMaintenanceTx) Delete(values ...*models.Maintenance) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToMaintenanceTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToMaintenanceTx) Count() int64 {
	return a.tx.Count()
}

type alertBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a alertBelongsToOrganization) Where(conds ...field.Expr) *alertBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a alertBelongsToOrganization) WithContext(ctx context.Context) *alertBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a alertBelongsToOrganization) Session(session *gorm.Session) *alertBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a alertBelongsToOrganization) Model(m *models.Alert) *alertBelongsToOrganizationTx {
	return &alertBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type alertBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a alertBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a alertBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a alertBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a alertBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a alertBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a alertBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type alertDo struct{ gen.DO }

type IAlertDo interface {
	gen.SubQuery
	Debug() IAlertDo
	WithContext(ctx context.Context) IAlertDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlertDo
	WriteDB() IAlertDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlertDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlertDo
	Not(conds ...gen.Condition) IAlertDo
	Or(conds ...gen.Condition) IAlertDo
	Select(conds ...field.Expr) IAlertDo
	Where(conds ...gen.Condition) IAlertDo
	Order(conds ...field.Expr) IAlertDo
	Distinct(cols ...field.Expr) IAlertDo
	Omit(cols ...field.Expr) IAlertDo
	Join(table schema.Tabler, on ...field.Expr) IAlertDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlertDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlertDo
	Group(cols ...field.Expr) IAlertDo
	Having(conds ...gen.Condition) IAlertDo
	Limit(limit int) IAlertDo
	Offset(offset int) IAlertDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertDo
	Unscoped() IAlertDo
	Create(values ...*models.Alert) error
	CreateInBatches(values []*models.Alert, batchSize int) error
	Save(values ...*models.Alert) error
	First() (*models.Alert, error)
	Take() (*models.Alert, error)
	Last() (*models.Alert, error)
	Find() ([]*models.Alert, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Alert, err error)
	FindInBatches(result *[]*models.Alert, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Alert) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlertDo
	Assign(attrs ...field.AssignExpr) IAlertDo
	Joins(fields ...field.RelationField) IAlertDo
	Preload(fields ...field.RelationField) IAlertDo
	FirstOrInit() (*models.Alert, error)
	FirstOrCreate() (*models.Alert, error)
	FindByPage(offset int, limit int) (result []*models.Alert, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlertDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alertDo) Debug() IAlertDo {
	return a.withDO(a.DO.Debug())
}

func (a alertDo) WithContext(ctx context.Context) IAlertDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alertDo) ReadDB() IAlertDo {
	return a.Clauses(dbresolver.Read)
}

func (a alertDo) WriteDB() IAlertDo {
	return a.Clauses(dbresolver.Write)
}

func (a alertDo) Session(config *gorm.Session) IAlertDo {
	return a.withDO(a.DO.Session(config))
}

func (a alertDo) Clauses(conds ...clause.Expression) IAlertDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alertDo) Returning(value interface{}, columns ...string) IAlertDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alertDo) Not(conds ...gen.Condition) IAlertDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alertDo) Or(conds ...gen.Condition) IAlertDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alertDo) Select(conds ...field.Expr) IAlertDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alertDo) Where(conds ...gen.Condition) IAlertDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alertDo) Order(conds ...field.Expr) IAlertDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alertDo) Distinct(cols ...field.Expr) IAlertDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alertDo) Omit(cols ...field.Expr) IAlertDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alertDo) Join(table schema.Tabler, on ...field.Expr) IAlertDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alertDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlertDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alertDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlertDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alertDo) Group(cols ...field.Expr) IAlertDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alertDo) Having(conds ...gen.Condition) IAlertDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alertDo) Limit(limit int) IAlertDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alertDo) Offset(offset int) IAlertDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alertDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlertDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alertDo) Unscoped() IAlertDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alertDo) Create(values ...*models.Alert) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alertDo) CreateInBatches(values []*models.Alert, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alertDo) Save(values ...*models.Alert) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alertDo) First() (*models.Alert, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Alert), nil
	}
}

func (a alertDo) Take() (*models.Alert, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Alert), nil
	}
}

func (a alertDo) Last() (*models.Alert, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Alert), nil
	}
}

func (a alertDo) Find() ([]*models.Alert, error) {
	result, err := a.DO.Find()
	return result.([]*models.Alert), err
}

func (a alertDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Alert, err error) {
	buf := make([]*models.Alert, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alertDo) FindInBatches(result *[]*models.Alert, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alertDo) Attrs(attrs ...field.AssignExpr) IAlertDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alertDo) Assign(attrs ...field.AssignExpr) IAlertDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alertDo) Joins(fields ...field.RelationField) IAlertDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alertDo) Preload(fields ...field.RelationField) IAlertDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alertDo) FirstOrInit() (*models.Alert, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Alert), nil
	}
}

func (a alertDo) FirstOrCreate() (*models.Alert, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Alert), nil
	}
}

func (a alertDo) FindByPage(offset int, limit int) (result []*models.Alert, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alertDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alertDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alertDo) Delete(models ...*models.Alert) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alertDo) withDO(do gen.Dao) *alertDo {
	a.DO = *do.(*gen.DO)
	return a
}

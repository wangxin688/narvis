// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newApLLDPNeighbor(db *gorm.DB, opts ...gen.DOOption) apLLDPNeighbor {
	_apLLDPNeighbor := apLLDPNeighbor{}

	_apLLDPNeighbor.apLLDPNeighborDo.UseDB(db, opts...)
	_apLLDPNeighbor.apLLDPNeighborDo.UseModel(&models.ApLLDPNeighbor{})

	tableName := _apLLDPNeighbor.apLLDPNeighborDo.TableName()
	_apLLDPNeighbor.ALL = field.NewAsterisk(tableName)
	_apLLDPNeighbor.ID = field.NewString(tableName, "id")
	_apLLDPNeighbor.CreatedAt = field.NewTime(tableName, "created_at")
	_apLLDPNeighbor.UpdatedAt = field.NewTime(tableName, "updated_at")
	_apLLDPNeighbor.SourceInterfaceID = field.NewString(tableName, "source_interface_id")
	_apLLDPNeighbor.SourceDeviceID = field.NewString(tableName, "source_device_id")
	_apLLDPNeighbor.TargetApID = field.NewString(tableName, "target_ap_id")
	_apLLDPNeighbor.Active = field.NewBool(tableName, "active")
	_apLLDPNeighbor.SiteID = field.NewString(tableName, "site_id")
	_apLLDPNeighbor.OrganizationID = field.NewString(tableName, "organization_id")
	_apLLDPNeighbor.SourceInterface = apLLDPNeighborBelongsToSourceInterface{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SourceInterface", "models.DeviceInterface"),
		Device: struct {
			field.RelationField
			Rack struct {
				field.RelationField
				Location struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Site struct {
						field.RelationField
						Organization struct {
							field.RelationField
						}
					}
					Organization struct {
						field.RelationField
					}
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}
			Template struct {
				field.RelationField
			}
			Location struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("SourceInterface.Device", "models.Device"),
			Rack: struct {
				field.RelationField
				Location struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Site struct {
						field.RelationField
						Organization struct {
							field.RelationField
						}
					}
					Organization struct {
						field.RelationField
					}
				}
				Site struct {
					field.RelationField
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("SourceInterface.Device.Rack", "models.Rack"),
				Location: struct {
					field.RelationField
					Parent struct {
						field.RelationField
					}
					Site struct {
						field.RelationField
						Organization struct {
							field.RelationField
						}
					}
					Organization struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("SourceInterface.Device.Rack.Location", "models.Location"),
					Parent: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("SourceInterface.Device.Rack.Location.Parent", "models.Location"),
					},
					Site: struct {
						field.RelationField
						Organization struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("SourceInterface.Device.Rack.Location.Site", "models.Site"),
						Organization: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("SourceInterface.Device.Rack.Location.Site.Organization", "models.Organization"),
						},
					},
					Organization: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("SourceInterface.Device.Rack.Location.Organization", "models.Organization"),
					},
				},
				Site: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SourceInterface.Device.Rack.Site", "models.Site"),
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("SourceInterface.Device.Rack.Organization", "models.Organization"),
				},
			},
			Template: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SourceInterface.Device.Template", "models.Template"),
			},
			Location: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SourceInterface.Device.Location", "models.Location"),
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SourceInterface.Device.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("SourceInterface.Device.Organization", "models.Organization"),
			},
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SourceInterface.Site", "models.Site"),
		},
	}

	_apLLDPNeighbor.SourceDevice = apLLDPNeighborBelongsToSourceDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SourceDevice", "models.Device"),
	}

	_apLLDPNeighbor.TargetAp = apLLDPNeighborBelongsToTargetAp{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TargetAp", "models.AP"),
		ActiveWac: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("TargetAp.ActiveWac", "models.Device"),
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("TargetAp.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("TargetAp.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("TargetAp.Organization", "models.Organization"),
		},
	}

	_apLLDPNeighbor.Site = apLLDPNeighborBelongsToSite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Site", "models.Site"),
	}

	_apLLDPNeighbor.Organization = apLLDPNeighborBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_apLLDPNeighbor.fillFieldMap()

	return _apLLDPNeighbor
}

type apLLDPNeighbor struct {
	apLLDPNeighborDo

	ALL               field.Asterisk
	ID                field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time
	SourceInterfaceID field.String
	SourceDeviceID    field.String
	TargetApID        field.String
	Active            field.Bool
	SiteID            field.String
	OrganizationID    field.String
	SourceInterface   apLLDPNeighborBelongsToSourceInterface

	SourceDevice apLLDPNeighborBelongsToSourceDevice

	TargetAp apLLDPNeighborBelongsToTargetAp

	Site apLLDPNeighborBelongsToSite

	Organization apLLDPNeighborBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (a apLLDPNeighbor) Table(newTableName string) *apLLDPNeighbor {
	a.apLLDPNeighborDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apLLDPNeighbor) As(alias string) *apLLDPNeighbor {
	a.apLLDPNeighborDo.DO = *(a.apLLDPNeighborDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apLLDPNeighbor) updateTableName(table string) *apLLDPNeighbor {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.SourceInterfaceID = field.NewString(table, "source_interface_id")
	a.SourceDeviceID = field.NewString(table, "source_device_id")
	a.TargetApID = field.NewString(table, "target_ap_id")
	a.Active = field.NewBool(table, "active")
	a.SiteID = field.NewString(table, "site_id")
	a.OrganizationID = field.NewString(table, "organization_id")

	a.fillFieldMap()

	return a
}

func (a *apLLDPNeighbor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apLLDPNeighbor) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["source_interface_id"] = a.SourceInterfaceID
	a.fieldMap["source_device_id"] = a.SourceDeviceID
	a.fieldMap["target_ap_id"] = a.TargetApID
	a.fieldMap["active"] = a.Active
	a.fieldMap["site_id"] = a.SiteID
	a.fieldMap["organization_id"] = a.OrganizationID

}

func (a apLLDPNeighbor) clone(db *gorm.DB) apLLDPNeighbor {
	a.apLLDPNeighborDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a apLLDPNeighbor) replaceDB(db *gorm.DB) apLLDPNeighbor {
	a.apLLDPNeighborDo.ReplaceDB(db)
	return a
}

type apLLDPNeighborBelongsToSourceInterface struct {
	db *gorm.DB

	field.RelationField

	Device struct {
		field.RelationField
		Rack struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}
		Template struct {
			field.RelationField
		}
		Location struct {
			field.RelationField
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Site struct {
		field.RelationField
	}
}

func (a apLLDPNeighborBelongsToSourceInterface) Where(conds ...field.Expr) *apLLDPNeighborBelongsToSourceInterface {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a apLLDPNeighborBelongsToSourceInterface) WithContext(ctx context.Context) *apLLDPNeighborBelongsToSourceInterface {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a apLLDPNeighborBelongsToSourceInterface) Session(session *gorm.Session) *apLLDPNeighborBelongsToSourceInterface {
	a.db = a.db.Session(session)
	return &a
}

func (a apLLDPNeighborBelongsToSourceInterface) Model(m *models.ApLLDPNeighbor) *apLLDPNeighborBelongsToSourceInterfaceTx {
	return &apLLDPNeighborBelongsToSourceInterfaceTx{a.db.Model(m).Association(a.Name())}
}

type apLLDPNeighborBelongsToSourceInterfaceTx struct{ tx *gorm.Association }

func (a apLLDPNeighborBelongsToSourceInterfaceTx) Find() (result *models.DeviceInterface, err error) {
	return result, a.tx.Find(&result)
}

func (a apLLDPNeighborBelongsToSourceInterfaceTx) Append(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a apLLDPNeighborBelongsToSourceInterfaceTx) Replace(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a apLLDPNeighborBelongsToSourceInterfaceTx) Delete(values ...*models.DeviceInterface) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a apLLDPNeighborBelongsToSourceInterfaceTx) Clear() error {
	return a.tx.Clear()
}

func (a apLLDPNeighborBelongsToSourceInterfaceTx) Count() int64 {
	return a.tx.Count()
}

type apLLDPNeighborBelongsToSourceDevice struct {
	db *gorm.DB

	field.RelationField
}

func (a apLLDPNeighborBelongsToSourceDevice) Where(conds ...field.Expr) *apLLDPNeighborBelongsToSourceDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a apLLDPNeighborBelongsToSourceDevice) WithContext(ctx context.Context) *apLLDPNeighborBelongsToSourceDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a apLLDPNeighborBelongsToSourceDevice) Session(session *gorm.Session) *apLLDPNeighborBelongsToSourceDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a apLLDPNeighborBelongsToSourceDevice) Model(m *models.ApLLDPNeighbor) *apLLDPNeighborBelongsToSourceDeviceTx {
	return &apLLDPNeighborBelongsToSourceDeviceTx{a.db.Model(m).Association(a.Name())}
}

type apLLDPNeighborBelongsToSourceDeviceTx struct{ tx *gorm.Association }

func (a apLLDPNeighborBelongsToSourceDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a apLLDPNeighborBelongsToSourceDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a apLLDPNeighborBelongsToSourceDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a apLLDPNeighborBelongsToSourceDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a apLLDPNeighborBelongsToSourceDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a apLLDPNeighborBelongsToSourceDeviceTx) Count() int64 {
	return a.tx.Count()
}

type apLLDPNeighborBelongsToTargetAp struct {
	db *gorm.DB

	field.RelationField

	ActiveWac struct {
		field.RelationField
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a apLLDPNeighborBelongsToTargetAp) Where(conds ...field.Expr) *apLLDPNeighborBelongsToTargetAp {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a apLLDPNeighborBelongsToTargetAp) WithContext(ctx context.Context) *apLLDPNeighborBelongsToTargetAp {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a apLLDPNeighborBelongsToTargetAp) Session(session *gorm.Session) *apLLDPNeighborBelongsToTargetAp {
	a.db = a.db.Session(session)
	return &a
}

func (a apLLDPNeighborBelongsToTargetAp) Model(m *models.ApLLDPNeighbor) *apLLDPNeighborBelongsToTargetApTx {
	return &apLLDPNeighborBelongsToTargetApTx{a.db.Model(m).Association(a.Name())}
}

type apLLDPNeighborBelongsToTargetApTx struct{ tx *gorm.Association }

func (a apLLDPNeighborBelongsToTargetApTx) Find() (result *models.AP, err error) {
	return result, a.tx.Find(&result)
}

func (a apLLDPNeighborBelongsToTargetApTx) Append(values ...*models.AP) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a apLLDPNeighborBelongsToTargetApTx) Replace(values ...*models.AP) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a apLLDPNeighborBelongsToTargetApTx) Delete(values ...*models.AP) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a apLLDPNeighborBelongsToTargetApTx) Clear() error {
	return a.tx.Clear()
}

func (a apLLDPNeighborBelongsToTargetApTx) Count() int64 {
	return a.tx.Count()
}

type apLLDPNeighborBelongsToSite struct {
	db *gorm.DB

	field.RelationField
}

func (a apLLDPNeighborBelongsToSite) Where(conds ...field.Expr) *apLLDPNeighborBelongsToSite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a apLLDPNeighborBelongsToSite) WithContext(ctx context.Context) *apLLDPNeighborBelongsToSite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a apLLDPNeighborBelongsToSite) Session(session *gorm.Session) *apLLDPNeighborBelongsToSite {
	a.db = a.db.Session(session)
	return &a
}

func (a apLLDPNeighborBelongsToSite) Model(m *models.ApLLDPNeighbor) *apLLDPNeighborBelongsToSiteTx {
	return &apLLDPNeighborBelongsToSiteTx{a.db.Model(m).Association(a.Name())}
}

type apLLDPNeighborBelongsToSiteTx struct{ tx *gorm.Association }

func (a apLLDPNeighborBelongsToSiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a apLLDPNeighborBelongsToSiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a apLLDPNeighborBelongsToSiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a apLLDPNeighborBelongsToSiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a apLLDPNeighborBelongsToSiteTx) Clear() error {
	return a.tx.Clear()
}

func (a apLLDPNeighborBelongsToSiteTx) Count() int64 {
	return a.tx.Count()
}

type apLLDPNeighborBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a apLLDPNeighborBelongsToOrganization) Where(conds ...field.Expr) *apLLDPNeighborBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a apLLDPNeighborBelongsToOrganization) WithContext(ctx context.Context) *apLLDPNeighborBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a apLLDPNeighborBelongsToOrganization) Session(session *gorm.Session) *apLLDPNeighborBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a apLLDPNeighborBelongsToOrganization) Model(m *models.ApLLDPNeighbor) *apLLDPNeighborBelongsToOrganizationTx {
	return &apLLDPNeighborBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type apLLDPNeighborBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a apLLDPNeighborBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a apLLDPNeighborBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a apLLDPNeighborBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a apLLDPNeighborBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a apLLDPNeighborBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a apLLDPNeighborBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type apLLDPNeighborDo struct{ gen.DO }

type IApLLDPNeighborDo interface {
	gen.SubQuery
	Debug() IApLLDPNeighborDo
	WithContext(ctx context.Context) IApLLDPNeighborDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApLLDPNeighborDo
	WriteDB() IApLLDPNeighborDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApLLDPNeighborDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApLLDPNeighborDo
	Not(conds ...gen.Condition) IApLLDPNeighborDo
	Or(conds ...gen.Condition) IApLLDPNeighborDo
	Select(conds ...field.Expr) IApLLDPNeighborDo
	Where(conds ...gen.Condition) IApLLDPNeighborDo
	Order(conds ...field.Expr) IApLLDPNeighborDo
	Distinct(cols ...field.Expr) IApLLDPNeighborDo
	Omit(cols ...field.Expr) IApLLDPNeighborDo
	Join(table schema.Tabler, on ...field.Expr) IApLLDPNeighborDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApLLDPNeighborDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApLLDPNeighborDo
	Group(cols ...field.Expr) IApLLDPNeighborDo
	Having(conds ...gen.Condition) IApLLDPNeighborDo
	Limit(limit int) IApLLDPNeighborDo
	Offset(offset int) IApLLDPNeighborDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApLLDPNeighborDo
	Unscoped() IApLLDPNeighborDo
	Create(values ...*models.ApLLDPNeighbor) error
	CreateInBatches(values []*models.ApLLDPNeighbor, batchSize int) error
	Save(values ...*models.ApLLDPNeighbor) error
	First() (*models.ApLLDPNeighbor, error)
	Take() (*models.ApLLDPNeighbor, error)
	Last() (*models.ApLLDPNeighbor, error)
	Find() ([]*models.ApLLDPNeighbor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ApLLDPNeighbor, err error)
	FindInBatches(result *[]*models.ApLLDPNeighbor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ApLLDPNeighbor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApLLDPNeighborDo
	Assign(attrs ...field.AssignExpr) IApLLDPNeighborDo
	Joins(fields ...field.RelationField) IApLLDPNeighborDo
	Preload(fields ...field.RelationField) IApLLDPNeighborDo
	FirstOrInit() (*models.ApLLDPNeighbor, error)
	FirstOrCreate() (*models.ApLLDPNeighbor, error)
	FindByPage(offset int, limit int) (result []*models.ApLLDPNeighbor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApLLDPNeighborDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a apLLDPNeighborDo) Debug() IApLLDPNeighborDo {
	return a.withDO(a.DO.Debug())
}

func (a apLLDPNeighborDo) WithContext(ctx context.Context) IApLLDPNeighborDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apLLDPNeighborDo) ReadDB() IApLLDPNeighborDo {
	return a.Clauses(dbresolver.Read)
}

func (a apLLDPNeighborDo) WriteDB() IApLLDPNeighborDo {
	return a.Clauses(dbresolver.Write)
}

func (a apLLDPNeighborDo) Session(config *gorm.Session) IApLLDPNeighborDo {
	return a.withDO(a.DO.Session(config))
}

func (a apLLDPNeighborDo) Clauses(conds ...clause.Expression) IApLLDPNeighborDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apLLDPNeighborDo) Returning(value interface{}, columns ...string) IApLLDPNeighborDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apLLDPNeighborDo) Not(conds ...gen.Condition) IApLLDPNeighborDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apLLDPNeighborDo) Or(conds ...gen.Condition) IApLLDPNeighborDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apLLDPNeighborDo) Select(conds ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apLLDPNeighborDo) Where(conds ...gen.Condition) IApLLDPNeighborDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apLLDPNeighborDo) Order(conds ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apLLDPNeighborDo) Distinct(cols ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apLLDPNeighborDo) Omit(cols ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apLLDPNeighborDo) Join(table schema.Tabler, on ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apLLDPNeighborDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apLLDPNeighborDo) RightJoin(table schema.Tabler, on ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apLLDPNeighborDo) Group(cols ...field.Expr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apLLDPNeighborDo) Having(conds ...gen.Condition) IApLLDPNeighborDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apLLDPNeighborDo) Limit(limit int) IApLLDPNeighborDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apLLDPNeighborDo) Offset(offset int) IApLLDPNeighborDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apLLDPNeighborDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApLLDPNeighborDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apLLDPNeighborDo) Unscoped() IApLLDPNeighborDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apLLDPNeighborDo) Create(values ...*models.ApLLDPNeighbor) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apLLDPNeighborDo) CreateInBatches(values []*models.ApLLDPNeighbor, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apLLDPNeighborDo) Save(values ...*models.ApLLDPNeighbor) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apLLDPNeighborDo) First() (*models.ApLLDPNeighbor, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ApLLDPNeighbor), nil
	}
}

func (a apLLDPNeighborDo) Take() (*models.ApLLDPNeighbor, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ApLLDPNeighbor), nil
	}
}

func (a apLLDPNeighborDo) Last() (*models.ApLLDPNeighbor, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ApLLDPNeighbor), nil
	}
}

func (a apLLDPNeighborDo) Find() ([]*models.ApLLDPNeighbor, error) {
	result, err := a.DO.Find()
	return result.([]*models.ApLLDPNeighbor), err
}

func (a apLLDPNeighborDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ApLLDPNeighbor, err error) {
	buf := make([]*models.ApLLDPNeighbor, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apLLDPNeighborDo) FindInBatches(result *[]*models.ApLLDPNeighbor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apLLDPNeighborDo) Attrs(attrs ...field.AssignExpr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apLLDPNeighborDo) Assign(attrs ...field.AssignExpr) IApLLDPNeighborDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apLLDPNeighborDo) Joins(fields ...field.RelationField) IApLLDPNeighborDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apLLDPNeighborDo) Preload(fields ...field.RelationField) IApLLDPNeighborDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apLLDPNeighborDo) FirstOrInit() (*models.ApLLDPNeighbor, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ApLLDPNeighbor), nil
	}
}

func (a apLLDPNeighborDo) FirstOrCreate() (*models.ApLLDPNeighbor, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ApLLDPNeighbor), nil
	}
}

func (a apLLDPNeighborDo) FindByPage(offset int, limit int) (result []*models.ApLLDPNeighbor, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apLLDPNeighborDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apLLDPNeighborDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apLLDPNeighborDo) Delete(models ...*models.ApLLDPNeighbor) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apLLDPNeighborDo) withDO(do gen.Dao) *apLLDPNeighborDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDeviceRestconfCredential(db *gorm.DB, opts ...gen.DOOption) deviceRestconfCredential {
	_deviceRestconfCredential := deviceRestconfCredential{}

	_deviceRestconfCredential.deviceRestconfCredentialDo.UseDB(db, opts...)
	_deviceRestconfCredential.deviceRestconfCredentialDo.UseModel(&models.DeviceRestconfCredential{})

	tableName := _deviceRestconfCredential.deviceRestconfCredentialDo.TableName()
	_deviceRestconfCredential.ALL = field.NewAsterisk(tableName)
	_deviceRestconfCredential.Id = field.NewString(tableName, "id")
	_deviceRestconfCredential.CreatedAt = field.NewTime(tableName, "created_at")
	_deviceRestconfCredential.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deviceRestconfCredential.Url = field.NewString(tableName, "url")
	_deviceRestconfCredential.Username = field.NewString(tableName, "username")
	_deviceRestconfCredential.Password = field.NewString(tableName, "password")
	_deviceRestconfCredential.DeviceId = field.NewString(tableName, "device_id")
	_deviceRestconfCredential.OrganizationID = field.NewString(tableName, "organization_id")
	_deviceRestconfCredential.Device = deviceRestconfCredentialBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "models.Device"),
		Rack: struct {
			field.RelationField
			Location struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}
			Site struct {
				field.RelationField
			}
			Organization struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Device.Rack", "models.Rack"),
			Location: struct {
				field.RelationField
				Parent struct {
					field.RelationField
				}
				Site struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}
				Organization struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Device.Rack.Location", "models.Location"),
				Parent: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Parent", "models.Location"),
				},
				Site: struct {
					field.RelationField
					Organization struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Site", "models.Site"),
					Organization: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Device.Rack.Location.Site.Organization", "models.Organization"),
					},
				},
				Organization: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Device.Rack.Location.Organization", "models.Organization"),
				},
			},
			Site: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Site", "models.Site"),
			},
			Organization: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Device.Rack.Organization", "models.Organization"),
			},
		},
		Location: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Location", "models.Location"),
		},
		Site: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Site", "models.Site"),
		},
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Device.Organization", "models.Organization"),
		},
	}

	_deviceRestconfCredential.Organization = deviceRestconfCredentialBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_deviceRestconfCredential.fillFieldMap()

	return _deviceRestconfCredential
}

type deviceRestconfCredential struct {
	deviceRestconfCredentialDo

	ALL            field.Asterisk
	Id             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Url            field.String
	Username       field.String
	Password       field.String
	DeviceId       field.String
	OrganizationID field.String
	Device         deviceRestconfCredentialBelongsToDevice

	Organization deviceRestconfCredentialBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (d deviceRestconfCredential) Table(newTableName string) *deviceRestconfCredential {
	d.deviceRestconfCredentialDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceRestconfCredential) As(alias string) *deviceRestconfCredential {
	d.deviceRestconfCredentialDo.DO = *(d.deviceRestconfCredentialDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceRestconfCredential) updateTableName(table string) *deviceRestconfCredential {
	d.ALL = field.NewAsterisk(table)
	d.Id = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Url = field.NewString(table, "url")
	d.Username = field.NewString(table, "username")
	d.Password = field.NewString(table, "password")
	d.DeviceId = field.NewString(table, "device_id")
	d.OrganizationID = field.NewString(table, "organization_id")

	d.fillFieldMap()

	return d
}

func (d *deviceRestconfCredential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceRestconfCredential) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.Id
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["url"] = d.Url
	d.fieldMap["username"] = d.Username
	d.fieldMap["password"] = d.Password
	d.fieldMap["device_id"] = d.DeviceId
	d.fieldMap["organization_id"] = d.OrganizationID

}

func (d deviceRestconfCredential) clone(db *gorm.DB) deviceRestconfCredential {
	d.deviceRestconfCredentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceRestconfCredential) replaceDB(db *gorm.DB) deviceRestconfCredential {
	d.deviceRestconfCredentialDo.ReplaceDB(db)
	return d
}

type deviceRestconfCredentialBelongsToDevice struct {
	db *gorm.DB

	field.RelationField

	Rack struct {
		field.RelationField
		Location struct {
			field.RelationField
			Parent struct {
				field.RelationField
			}
			Site struct {
				field.RelationField
				Organization struct {
					field.RelationField
				}
			}
			Organization struct {
				field.RelationField
			}
		}
		Site struct {
			field.RelationField
		}
		Organization struct {
			field.RelationField
		}
	}
	Location struct {
		field.RelationField
	}
	Site struct {
		field.RelationField
	}
	Organization struct {
		field.RelationField
	}
}

func (a deviceRestconfCredentialBelongsToDevice) Where(conds ...field.Expr) *deviceRestconfCredentialBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deviceRestconfCredentialBelongsToDevice) WithContext(ctx context.Context) *deviceRestconfCredentialBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deviceRestconfCredentialBelongsToDevice) Session(session *gorm.Session) *deviceRestconfCredentialBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a deviceRestconfCredentialBelongsToDevice) Model(m *models.DeviceRestconfCredential) *deviceRestconfCredentialBelongsToDeviceTx {
	return &deviceRestconfCredentialBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

type deviceRestconfCredentialBelongsToDeviceTx struct{ tx *gorm.Association }

func (a deviceRestconfCredentialBelongsToDeviceTx) Find() (result *models.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a deviceRestconfCredentialBelongsToDeviceTx) Append(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deviceRestconfCredentialBelongsToDeviceTx) Replace(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deviceRestconfCredentialBelongsToDeviceTx) Delete(values ...*models.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deviceRestconfCredentialBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a deviceRestconfCredentialBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

type deviceRestconfCredentialBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a deviceRestconfCredentialBelongsToOrganization) Where(conds ...field.Expr) *deviceRestconfCredentialBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deviceRestconfCredentialBelongsToOrganization) WithContext(ctx context.Context) *deviceRestconfCredentialBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deviceRestconfCredentialBelongsToOrganization) Session(session *gorm.Session) *deviceRestconfCredentialBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a deviceRestconfCredentialBelongsToOrganization) Model(m *models.DeviceRestconfCredential) *deviceRestconfCredentialBelongsToOrganizationTx {
	return &deviceRestconfCredentialBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type deviceRestconfCredentialBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a deviceRestconfCredentialBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a deviceRestconfCredentialBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deviceRestconfCredentialBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deviceRestconfCredentialBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deviceRestconfCredentialBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a deviceRestconfCredentialBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type deviceRestconfCredentialDo struct{ gen.DO }

type IDeviceRestconfCredentialDo interface {
	gen.SubQuery
	Debug() IDeviceRestconfCredentialDo
	WithContext(ctx context.Context) IDeviceRestconfCredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceRestconfCredentialDo
	WriteDB() IDeviceRestconfCredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceRestconfCredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceRestconfCredentialDo
	Not(conds ...gen.Condition) IDeviceRestconfCredentialDo
	Or(conds ...gen.Condition) IDeviceRestconfCredentialDo
	Select(conds ...field.Expr) IDeviceRestconfCredentialDo
	Where(conds ...gen.Condition) IDeviceRestconfCredentialDo
	Order(conds ...field.Expr) IDeviceRestconfCredentialDo
	Distinct(cols ...field.Expr) IDeviceRestconfCredentialDo
	Omit(cols ...field.Expr) IDeviceRestconfCredentialDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceRestconfCredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceRestconfCredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceRestconfCredentialDo
	Group(cols ...field.Expr) IDeviceRestconfCredentialDo
	Having(conds ...gen.Condition) IDeviceRestconfCredentialDo
	Limit(limit int) IDeviceRestconfCredentialDo
	Offset(offset int) IDeviceRestconfCredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceRestconfCredentialDo
	Unscoped() IDeviceRestconfCredentialDo
	Create(values ...*models.DeviceRestconfCredential) error
	CreateInBatches(values []*models.DeviceRestconfCredential, batchSize int) error
	Save(values ...*models.DeviceRestconfCredential) error
	First() (*models.DeviceRestconfCredential, error)
	Take() (*models.DeviceRestconfCredential, error)
	Last() (*models.DeviceRestconfCredential, error)
	Find() ([]*models.DeviceRestconfCredential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DeviceRestconfCredential, err error)
	FindInBatches(result *[]*models.DeviceRestconfCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DeviceRestconfCredential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceRestconfCredentialDo
	Assign(attrs ...field.AssignExpr) IDeviceRestconfCredentialDo
	Joins(fields ...field.RelationField) IDeviceRestconfCredentialDo
	Preload(fields ...field.RelationField) IDeviceRestconfCredentialDo
	FirstOrInit() (*models.DeviceRestconfCredential, error)
	FirstOrCreate() (*models.DeviceRestconfCredential, error)
	FindByPage(offset int, limit int) (result []*models.DeviceRestconfCredential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceRestconfCredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceRestconfCredentialDo) Debug() IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceRestconfCredentialDo) WithContext(ctx context.Context) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceRestconfCredentialDo) ReadDB() IDeviceRestconfCredentialDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceRestconfCredentialDo) WriteDB() IDeviceRestconfCredentialDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceRestconfCredentialDo) Session(config *gorm.Session) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceRestconfCredentialDo) Clauses(conds ...clause.Expression) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceRestconfCredentialDo) Returning(value interface{}, columns ...string) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceRestconfCredentialDo) Not(conds ...gen.Condition) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceRestconfCredentialDo) Or(conds ...gen.Condition) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceRestconfCredentialDo) Select(conds ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceRestconfCredentialDo) Where(conds ...gen.Condition) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceRestconfCredentialDo) Order(conds ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceRestconfCredentialDo) Distinct(cols ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceRestconfCredentialDo) Omit(cols ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceRestconfCredentialDo) Join(table schema.Tabler, on ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceRestconfCredentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceRestconfCredentialDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceRestconfCredentialDo) Group(cols ...field.Expr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceRestconfCredentialDo) Having(conds ...gen.Condition) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceRestconfCredentialDo) Limit(limit int) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceRestconfCredentialDo) Offset(offset int) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceRestconfCredentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceRestconfCredentialDo) Unscoped() IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceRestconfCredentialDo) Create(values ...*models.DeviceRestconfCredential) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceRestconfCredentialDo) CreateInBatches(values []*models.DeviceRestconfCredential, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceRestconfCredentialDo) Save(values ...*models.DeviceRestconfCredential) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceRestconfCredentialDo) First() (*models.DeviceRestconfCredential, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceRestconfCredential), nil
	}
}

func (d deviceRestconfCredentialDo) Take() (*models.DeviceRestconfCredential, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceRestconfCredential), nil
	}
}

func (d deviceRestconfCredentialDo) Last() (*models.DeviceRestconfCredential, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceRestconfCredential), nil
	}
}

func (d deviceRestconfCredentialDo) Find() ([]*models.DeviceRestconfCredential, error) {
	result, err := d.DO.Find()
	return result.([]*models.DeviceRestconfCredential), err
}

func (d deviceRestconfCredentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DeviceRestconfCredential, err error) {
	buf := make([]*models.DeviceRestconfCredential, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceRestconfCredentialDo) FindInBatches(result *[]*models.DeviceRestconfCredential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceRestconfCredentialDo) Attrs(attrs ...field.AssignExpr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceRestconfCredentialDo) Assign(attrs ...field.AssignExpr) IDeviceRestconfCredentialDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceRestconfCredentialDo) Joins(fields ...field.RelationField) IDeviceRestconfCredentialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceRestconfCredentialDo) Preload(fields ...field.RelationField) IDeviceRestconfCredentialDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceRestconfCredentialDo) FirstOrInit() (*models.DeviceRestconfCredential, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceRestconfCredential), nil
	}
}

func (d deviceRestconfCredentialDo) FirstOrCreate() (*models.DeviceRestconfCredential, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DeviceRestconfCredential), nil
	}
}

func (d deviceRestconfCredentialDo) FindByPage(offset int, limit int) (result []*models.DeviceRestconfCredential, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceRestconfCredentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceRestconfCredentialDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceRestconfCredentialDo) Delete(models ...*models.DeviceRestconfCredential) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceRestconfCredentialDo) withDO(do gen.Dao) *deviceRestconfCredentialDo {
	d.DO = *do.(*gen.DO)
	return d
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSubscriptionRecord(db *gorm.DB, opts ...gen.DOOption) subscriptionRecord {
	_subscriptionRecord := subscriptionRecord{}

	_subscriptionRecord.subscriptionRecordDo.UseDB(db, opts...)
	_subscriptionRecord.subscriptionRecordDo.UseModel(&models.SubscriptionRecord{})

	tableName := _subscriptionRecord.subscriptionRecordDo.TableName()
	_subscriptionRecord.ALL = field.NewAsterisk(tableName)
	_subscriptionRecord.ID = field.NewString(tableName, "id")
	_subscriptionRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_subscriptionRecord.SubscriptionID = field.NewString(tableName, "subscription_id")
	_subscriptionRecord.AlertID = field.NewString(tableName, "alert_id")
	_subscriptionRecord.AlertGroup = field.NewString(tableName, "alert_group")

	_subscriptionRecord.fillFieldMap()

	return _subscriptionRecord
}

type subscriptionRecord struct {
	subscriptionRecordDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	SubscriptionID field.String
	AlertID        field.String
	AlertGroup     field.String

	fieldMap map[string]field.Expr
}

func (s subscriptionRecord) Table(newTableName string) *subscriptionRecord {
	s.subscriptionRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscriptionRecord) As(alias string) *subscriptionRecord {
	s.subscriptionRecordDo.DO = *(s.subscriptionRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscriptionRecord) updateTableName(table string) *subscriptionRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.SubscriptionID = field.NewString(table, "subscription_id")
	s.AlertID = field.NewString(table, "alert_id")
	s.AlertGroup = field.NewString(table, "alert_group")

	s.fillFieldMap()

	return s
}

func (s *subscriptionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscriptionRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["subscription_id"] = s.SubscriptionID
	s.fieldMap["alert_id"] = s.AlertID
	s.fieldMap["alert_group"] = s.AlertGroup
}

func (s subscriptionRecord) clone(db *gorm.DB) subscriptionRecord {
	s.subscriptionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscriptionRecord) replaceDB(db *gorm.DB) subscriptionRecord {
	s.subscriptionRecordDo.ReplaceDB(db)
	return s
}

type subscriptionRecordDo struct{ gen.DO }

type ISubscriptionRecordDo interface {
	gen.SubQuery
	Debug() ISubscriptionRecordDo
	WithContext(ctx context.Context) ISubscriptionRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubscriptionRecordDo
	WriteDB() ISubscriptionRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubscriptionRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubscriptionRecordDo
	Not(conds ...gen.Condition) ISubscriptionRecordDo
	Or(conds ...gen.Condition) ISubscriptionRecordDo
	Select(conds ...field.Expr) ISubscriptionRecordDo
	Where(conds ...gen.Condition) ISubscriptionRecordDo
	Order(conds ...field.Expr) ISubscriptionRecordDo
	Distinct(cols ...field.Expr) ISubscriptionRecordDo
	Omit(cols ...field.Expr) ISubscriptionRecordDo
	Join(table schema.Tabler, on ...field.Expr) ISubscriptionRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriptionRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubscriptionRecordDo
	Group(cols ...field.Expr) ISubscriptionRecordDo
	Having(conds ...gen.Condition) ISubscriptionRecordDo
	Limit(limit int) ISubscriptionRecordDo
	Offset(offset int) ISubscriptionRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriptionRecordDo
	Unscoped() ISubscriptionRecordDo
	Create(values ...*models.SubscriptionRecord) error
	CreateInBatches(values []*models.SubscriptionRecord, batchSize int) error
	Save(values ...*models.SubscriptionRecord) error
	First() (*models.SubscriptionRecord, error)
	Take() (*models.SubscriptionRecord, error)
	Last() (*models.SubscriptionRecord, error)
	Find() ([]*models.SubscriptionRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubscriptionRecord, err error)
	FindInBatches(result *[]*models.SubscriptionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SubscriptionRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubscriptionRecordDo
	Assign(attrs ...field.AssignExpr) ISubscriptionRecordDo
	Joins(fields ...field.RelationField) ISubscriptionRecordDo
	Preload(fields ...field.RelationField) ISubscriptionRecordDo
	FirstOrInit() (*models.SubscriptionRecord, error)
	FirstOrCreate() (*models.SubscriptionRecord, error)
	FindByPage(offset int, limit int) (result []*models.SubscriptionRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubscriptionRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subscriptionRecordDo) Debug() ISubscriptionRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s subscriptionRecordDo) WithContext(ctx context.Context) ISubscriptionRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscriptionRecordDo) ReadDB() ISubscriptionRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s subscriptionRecordDo) WriteDB() ISubscriptionRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s subscriptionRecordDo) Session(config *gorm.Session) ISubscriptionRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s subscriptionRecordDo) Clauses(conds ...clause.Expression) ISubscriptionRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscriptionRecordDo) Returning(value interface{}, columns ...string) ISubscriptionRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscriptionRecordDo) Not(conds ...gen.Condition) ISubscriptionRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscriptionRecordDo) Or(conds ...gen.Condition) ISubscriptionRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscriptionRecordDo) Select(conds ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscriptionRecordDo) Where(conds ...gen.Condition) ISubscriptionRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscriptionRecordDo) Order(conds ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscriptionRecordDo) Distinct(cols ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscriptionRecordDo) Omit(cols ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscriptionRecordDo) Join(table schema.Tabler, on ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscriptionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscriptionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscriptionRecordDo) Group(cols ...field.Expr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscriptionRecordDo) Having(conds ...gen.Condition) ISubscriptionRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscriptionRecordDo) Limit(limit int) ISubscriptionRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscriptionRecordDo) Offset(offset int) ISubscriptionRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscriptionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriptionRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscriptionRecordDo) Unscoped() ISubscriptionRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscriptionRecordDo) Create(values ...*models.SubscriptionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscriptionRecordDo) CreateInBatches(values []*models.SubscriptionRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscriptionRecordDo) Save(values ...*models.SubscriptionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscriptionRecordDo) First() (*models.SubscriptionRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionRecord), nil
	}
}

func (s subscriptionRecordDo) Take() (*models.SubscriptionRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionRecord), nil
	}
}

func (s subscriptionRecordDo) Last() (*models.SubscriptionRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionRecord), nil
	}
}

func (s subscriptionRecordDo) Find() ([]*models.SubscriptionRecord, error) {
	result, err := s.DO.Find()
	return result.([]*models.SubscriptionRecord), err
}

func (s subscriptionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubscriptionRecord, err error) {
	buf := make([]*models.SubscriptionRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscriptionRecordDo) FindInBatches(result *[]*models.SubscriptionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscriptionRecordDo) Attrs(attrs ...field.AssignExpr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscriptionRecordDo) Assign(attrs ...field.AssignExpr) ISubscriptionRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscriptionRecordDo) Joins(fields ...field.RelationField) ISubscriptionRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscriptionRecordDo) Preload(fields ...field.RelationField) ISubscriptionRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscriptionRecordDo) FirstOrInit() (*models.SubscriptionRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionRecord), nil
	}
}

func (s subscriptionRecordDo) FirstOrCreate() (*models.SubscriptionRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionRecord), nil
	}
}

func (s subscriptionRecordDo) FindByPage(offset int, limit int) (result []*models.SubscriptionRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscriptionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscriptionRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscriptionRecordDo) Delete(models ...*models.SubscriptionRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscriptionRecordDo) withDO(do gen.Dao) *subscriptionRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}

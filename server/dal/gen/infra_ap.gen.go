// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"github.com/wangxin688/narvis/server/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAP(db *gorm.DB, opts ...gen.DOOption) aP {
	_aP := aP{}

	_aP.aPDo.UseDB(db, opts...)
	_aP.aPDo.UseModel(&models.AP{})

	tableName := _aP.aPDo.TableName()
	_aP.ALL = field.NewAsterisk(tableName)
	_aP.Id = field.NewString(tableName, "id")
	_aP.CreatedAt = field.NewTime(tableName, "createdAt")
	_aP.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_aP.Name = field.NewString(tableName, "name")
	_aP.Status = field.NewString(tableName, "status")
	_aP.MacAddress = field.NewString(tableName, "macAddress")
	_aP.SerialNumber = field.NewString(tableName, "serialNumber")
	_aP.ManagementIp = field.NewString(tableName, "managementIp")
	_aP.DeviceModel = field.NewString(tableName, "deviceModel")
	_aP.Manufacturer = field.NewString(tableName, "manufacturer")
	_aP.DeviceRole = field.NewString(tableName, "deviceRole")
	_aP.OsVersion = field.NewString(tableName, "osVersion")
	_aP.GroupName = field.NewString(tableName, "groupName")
	_aP.WlanACIpAddress = field.NewString(tableName, "wlanACIpAddress")
	_aP.Floor = field.NewString(tableName, "floor")
	_aP.CoordinateX = field.NewFloat32(tableName, "coordinateX")
	_aP.CoordinateY = field.NewFloat32(tableName, "coordinateY")
	_aP.CoordinateZ = field.NewFloat32(tableName, "coordinateZ")
	_aP.SiteId = field.NewString(tableName, "siteId")
	_aP.OrganizationId = field.NewString(tableName, "organizationId")
	_aP.Site = aPBelongsToSite{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Site", "models.Site"),
		Organization: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Site.Organization", "models.Organization"),
		},
	}

	_aP.Organization = aPBelongsToOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "models.Organization"),
	}

	_aP.fillFieldMap()

	return _aP
}

type aP struct {
	aPDo

	ALL             field.Asterisk
	Id              field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	Name            field.String
	Status          field.String
	MacAddress      field.String
	SerialNumber    field.String
	ManagementIp    field.String
	DeviceModel     field.String
	Manufacturer    field.String
	DeviceRole      field.String
	OsVersion       field.String
	GroupName       field.String
	WlanACIpAddress field.String
	Floor           field.String
	CoordinateX     field.Float32
	CoordinateY     field.Float32
	CoordinateZ     field.Float32
	SiteId          field.String
	OrganizationId  field.String
	Site            aPBelongsToSite

	Organization aPBelongsToOrganization

	fieldMap map[string]field.Expr
}

func (a aP) Table(newTableName string) *aP {
	a.aPDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aP) As(alias string) *aP {
	a.aPDo.DO = *(a.aPDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aP) updateTableName(table string) *aP {
	a.ALL = field.NewAsterisk(table)
	a.Id = field.NewString(table, "id")
	a.CreatedAt = field.NewTime(table, "createdAt")
	a.UpdatedAt = field.NewTime(table, "updatedAt")
	a.Name = field.NewString(table, "name")
	a.Status = field.NewString(table, "status")
	a.MacAddress = field.NewString(table, "macAddress")
	a.SerialNumber = field.NewString(table, "serialNumber")
	a.ManagementIp = field.NewString(table, "managementIp")
	a.DeviceModel = field.NewString(table, "deviceModel")
	a.Manufacturer = field.NewString(table, "manufacturer")
	a.DeviceRole = field.NewString(table, "deviceRole")
	a.OsVersion = field.NewString(table, "osVersion")
	a.GroupName = field.NewString(table, "groupName")
	a.WlanACIpAddress = field.NewString(table, "wlanACIpAddress")
	a.Floor = field.NewString(table, "floor")
	a.CoordinateX = field.NewFloat32(table, "coordinateX")
	a.CoordinateY = field.NewFloat32(table, "coordinateY")
	a.CoordinateZ = field.NewFloat32(table, "coordinateZ")
	a.SiteId = field.NewString(table, "siteId")
	a.OrganizationId = field.NewString(table, "organizationId")

	a.fillFieldMap()

	return a
}

func (a *aP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aP) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 22)
	a.fieldMap["id"] = a.Id
	a.fieldMap["createdAt"] = a.CreatedAt
	a.fieldMap["updatedAt"] = a.UpdatedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["status"] = a.Status
	a.fieldMap["macAddress"] = a.MacAddress
	a.fieldMap["serialNumber"] = a.SerialNumber
	a.fieldMap["managementIp"] = a.ManagementIp
	a.fieldMap["deviceModel"] = a.DeviceModel
	a.fieldMap["manufacturer"] = a.Manufacturer
	a.fieldMap["deviceRole"] = a.DeviceRole
	a.fieldMap["osVersion"] = a.OsVersion
	a.fieldMap["groupName"] = a.GroupName
	a.fieldMap["wlanACIpAddress"] = a.WlanACIpAddress
	a.fieldMap["floor"] = a.Floor
	a.fieldMap["coordinateX"] = a.CoordinateX
	a.fieldMap["coordinateY"] = a.CoordinateY
	a.fieldMap["coordinateZ"] = a.CoordinateZ
	a.fieldMap["siteId"] = a.SiteId
	a.fieldMap["organizationId"] = a.OrganizationId

}

func (a aP) clone(db *gorm.DB) aP {
	a.aPDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aP) replaceDB(db *gorm.DB) aP {
	a.aPDo.ReplaceDB(db)
	return a
}

type aPBelongsToSite struct {
	db *gorm.DB

	field.RelationField

	Organization struct {
		field.RelationField
	}
}

func (a aPBelongsToSite) Where(conds ...field.Expr) *aPBelongsToSite {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPBelongsToSite) WithContext(ctx context.Context) *aPBelongsToSite {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPBelongsToSite) Session(session *gorm.Session) *aPBelongsToSite {
	a.db = a.db.Session(session)
	return &a
}

func (a aPBelongsToSite) Model(m *models.AP) *aPBelongsToSiteTx {
	return &aPBelongsToSiteTx{a.db.Model(m).Association(a.Name())}
}

type aPBelongsToSiteTx struct{ tx *gorm.Association }

func (a aPBelongsToSiteTx) Find() (result *models.Site, err error) {
	return result, a.tx.Find(&result)
}

func (a aPBelongsToSiteTx) Append(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPBelongsToSiteTx) Replace(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPBelongsToSiteTx) Delete(values ...*models.Site) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPBelongsToSiteTx) Clear() error {
	return a.tx.Clear()
}

func (a aPBelongsToSiteTx) Count() int64 {
	return a.tx.Count()
}

type aPBelongsToOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a aPBelongsToOrganization) Where(conds ...field.Expr) *aPBelongsToOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPBelongsToOrganization) WithContext(ctx context.Context) *aPBelongsToOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPBelongsToOrganization) Session(session *gorm.Session) *aPBelongsToOrganization {
	a.db = a.db.Session(session)
	return &a
}

func (a aPBelongsToOrganization) Model(m *models.AP) *aPBelongsToOrganizationTx {
	return &aPBelongsToOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type aPBelongsToOrganizationTx struct{ tx *gorm.Association }

func (a aPBelongsToOrganizationTx) Find() (result *models.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a aPBelongsToOrganizationTx) Append(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPBelongsToOrganizationTx) Replace(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPBelongsToOrganizationTx) Delete(values ...*models.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPBelongsToOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a aPBelongsToOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type aPDo struct{ gen.DO }

type IAPDo interface {
	gen.SubQuery
	Debug() IAPDo
	WithContext(ctx context.Context) IAPDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPDo
	WriteDB() IAPDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPDo
	Not(conds ...gen.Condition) IAPDo
	Or(conds ...gen.Condition) IAPDo
	Select(conds ...field.Expr) IAPDo
	Where(conds ...gen.Condition) IAPDo
	Order(conds ...field.Expr) IAPDo
	Distinct(cols ...field.Expr) IAPDo
	Omit(cols ...field.Expr) IAPDo
	Join(table schema.Tabler, on ...field.Expr) IAPDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPDo
	Group(cols ...field.Expr) IAPDo
	Having(conds ...gen.Condition) IAPDo
	Limit(limit int) IAPDo
	Offset(offset int) IAPDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPDo
	Unscoped() IAPDo
	Create(values ...*models.AP) error
	CreateInBatches(values []*models.AP, batchSize int) error
	Save(values ...*models.AP) error
	First() (*models.AP, error)
	Take() (*models.AP, error)
	Last() (*models.AP, error)
	Find() ([]*models.AP, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AP, err error)
	FindInBatches(result *[]*models.AP, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AP) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPDo
	Assign(attrs ...field.AssignExpr) IAPDo
	Joins(fields ...field.RelationField) IAPDo
	Preload(fields ...field.RelationField) IAPDo
	FirstOrInit() (*models.AP, error)
	FirstOrCreate() (*models.AP, error)
	FindByPage(offset int, limit int) (result []*models.AP, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPDo) Debug() IAPDo {
	return a.withDO(a.DO.Debug())
}

func (a aPDo) WithContext(ctx context.Context) IAPDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPDo) ReadDB() IAPDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPDo) WriteDB() IAPDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPDo) Session(config *gorm.Session) IAPDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPDo) Clauses(conds ...clause.Expression) IAPDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPDo) Returning(value interface{}, columns ...string) IAPDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPDo) Not(conds ...gen.Condition) IAPDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPDo) Or(conds ...gen.Condition) IAPDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPDo) Select(conds ...field.Expr) IAPDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPDo) Where(conds ...gen.Condition) IAPDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPDo) Order(conds ...field.Expr) IAPDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPDo) Distinct(cols ...field.Expr) IAPDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPDo) Omit(cols ...field.Expr) IAPDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPDo) Join(table schema.Tabler, on ...field.Expr) IAPDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPDo) Group(cols ...field.Expr) IAPDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPDo) Having(conds ...gen.Condition) IAPDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPDo) Limit(limit int) IAPDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPDo) Offset(offset int) IAPDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPDo) Unscoped() IAPDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPDo) Create(values ...*models.AP) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPDo) CreateInBatches(values []*models.AP, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPDo) Save(values ...*models.AP) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPDo) First() (*models.AP, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AP), nil
	}
}

func (a aPDo) Take() (*models.AP, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AP), nil
	}
}

func (a aPDo) Last() (*models.AP, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AP), nil
	}
}

func (a aPDo) Find() ([]*models.AP, error) {
	result, err := a.DO.Find()
	return result.([]*models.AP), err
}

func (a aPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AP, err error) {
	buf := make([]*models.AP, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPDo) FindInBatches(result *[]*models.AP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPDo) Attrs(attrs ...field.AssignExpr) IAPDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPDo) Assign(attrs ...field.AssignExpr) IAPDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPDo) Joins(fields ...field.RelationField) IAPDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPDo) Preload(fields ...field.RelationField) IAPDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPDo) FirstOrInit() (*models.AP, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AP), nil
	}
}

func (a aPDo) FirstOrCreate() (*models.AP, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AP), nil
	}
}

func (a aPDo) FindByPage(offset int, limit int) (result []*models.AP, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPDo) Delete(models ...*models.AP) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPDo) withDO(do gen.Dao) *aPDo {
	a.DO = *do.(*gen.DO)
	return a
}
